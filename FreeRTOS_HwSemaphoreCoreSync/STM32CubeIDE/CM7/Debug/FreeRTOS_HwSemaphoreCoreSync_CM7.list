
FreeRTOS_HwSemaphoreCoreSync_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08003bac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009c4  20000024  08003bd0  00005024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200009e8  08003bd0  000059e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012f84  00000000  00000000  00005052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002bff  00000000  00000000  00017fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001278  00000000  00000000  0001abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e31  00000000  00000000  0001be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00042304  00000000  00000000  0001cc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001480b  00000000  00000000  0005ef85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001b8a0e  00000000  00000000  00073790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0022c19e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ca8  00000000  00000000  0022c1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000009a  00000000  00000000  00230e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000024 	.word	0x20000024
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08003b40 	.word	0x08003b40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000028 	.word	0x20000028
 80002dc:	08003b40 	.word	0x08003b40

080002e0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80002e0:	b5b0      	push	{r4, r5, r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7) 
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes */
  MPU_Config();
 80002e6:	f000 f965 	bl	80005b4 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80002ea:	f000 f8f1 	bl	80004d0 <CPU_CACHE_Enable>
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80002ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002f2:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80002f4:	bf00      	nop
 80002f6:	4b2a      	ldr	r3, [pc, #168]	@ (80003a0 <main+0xc0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d004      	beq.n	800030c <main+0x2c>
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	1e5a      	subs	r2, r3, #1
 8000306:	61fa      	str	r2, [r7, #28]
 8000308:	2b00      	cmp	r3, #0
 800030a:	dcf4      	bgt.n	80002f6 <main+0x16>
  if ( timeout < 0 )
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	2b00      	cmp	r3, #0
 8000310:	da01      	bge.n	8000316 <main+0x36>
  {
    Error_Handler();
 8000312:	f000 f94b 	bl	80005ac <Error_Handler>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
  */
  HAL_Init();
 8000316:	f000 fb19 	bl	800094c <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();  
 800031a:	f000 f85b 	bl	80003d4 <SystemClock_Config>
  /* When system initialization is finished, Cortex-M7 will release (wakeup) Cortex-M4  by means of 
     HSEM notification. Cortex-M4 release could be also ensured by any Domain D2 wakeup source (SEV,EXTI..).
  */
  
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 800031e:	4b20      	ldr	r3, [pc, #128]	@ (80003a0 <main+0xc0>)
 8000320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000324:	4a1e      	ldr	r2, [pc, #120]	@ (80003a0 <main+0xc0>)
 8000326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800032a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800032e:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <main+0xc0>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]

  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);   
 800033c:	2000      	movs	r0, #0
 800033e:	f000 feb5 	bl	80010ac <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/     
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000342:	2100      	movs	r1, #0
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fecb 	bl	80010e0 <HAL_HSEM_Release>

  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800034a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800034e:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000350:	bf00      	nop
 8000352:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <main+0xc0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800035a:	2b00      	cmp	r3, #0
 800035c:	d104      	bne.n	8000368 <main+0x88>
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	1e5a      	subs	r2, r3, #1
 8000362:	61fa      	str	r2, [r7, #28]
 8000364:	2b00      	cmp	r3, #0
 8000366:	dcf4      	bgt.n	8000352 <main+0x72>
  if ( timeout < 0 )
 8000368:	69fb      	ldr	r3, [r7, #28]
 800036a:	2b00      	cmp	r3, #0
 800036c:	da01      	bge.n	8000372 <main+0x92>
  {
    Error_Handler();
 800036e:	f000 f91d 	bl	80005ac <Error_Handler>
  }

   /* Add Cortex-M7 user application code here */ 
  /* Configure LED1 */
  BSP_LED_Init(LED1);
 8000372:	2000      	movs	r0, #0
 8000374:	f000 fa12 	bl	800079c <BSP_LED_Init>


  /* Create the Thread that toggle LED1 */
  osThreadDef(CORE1_Thread, CORE1_SemaphoreCoreSync, osPriorityNormal, 0, semtstSTACK_SIZE);
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <main+0xc4>)
 800037a:	f107 0408 	add.w	r4, r7, #8
 800037e:	461d      	mov	r5, r3
 8000380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000384:	682b      	ldr	r3, [r5, #0]
 8000386:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(CORE1_Thread), (void *) osSemaphore); 
 8000388:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <main+0xc8>)
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	f107 0308 	add.w	r3, r7, #8
 8000390:	4611      	mov	r1, r2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fa1d 	bl	80027d2 <osThreadCreate>

  
  /* Start scheduler */
  osKernelStart();
 8000398:	f002 fa14 	bl	80027c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  for (;;);
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <main+0xbc>
 80003a0:	58024400 	.word	0x58024400
 80003a4:	08003b68 	.word	0x08003b68
 80003a8:	20000040 	.word	0x20000040

080003ac <CORE1_SemaphoreCoreSync>:
  * @brief  Semaphore Test.
  * @param  argument: Not used
  * @retval None
  */
static void CORE1_SemaphoreCoreSync(void const *argument)
{ 
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /*Take Hw Semaphore 0*/ 
    HAL_HSEM_FastTake(HSEM_ID_0); 
 80003b4:	2000      	movs	r0, #0
 80003b6:	f000 fe79 	bl	80010ac <HAL_HSEM_FastTake>
    BSP_LED_Toggle(LED1);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 fa32 	bl	8000824 <BSP_LED_Toggle>
    osDelay(500);
 80003c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003c4:	f002 fa2c 	bl	8002820 <osDelay>
    /*Release Hw Semaphore 0 in order to notify the CPU2(CM4)*/ 
    HAL_HSEM_Release(HSEM_ID_0,0);
 80003c8:	2100      	movs	r1, #0
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 fe88 	bl	80010e0 <HAL_HSEM_Release>
    HAL_HSEM_FastTake(HSEM_ID_0); 
 80003d0:	bf00      	nop
 80003d2:	e7ef      	b.n	80003b4 <CORE1_SemaphoreCoreSync+0x8>

080003d4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09e      	sub	sp, #120	@ 0x78
 80003d8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80003da:	2300      	movs	r3, #0
 80003dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003e0:	2004      	movs	r0, #4
 80003e2:	f000 fe91 	bl	8001108 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	4b37      	ldr	r3, [pc, #220]	@ (80004c8 <SystemClock_Config+0xf4>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ee:	4a36      	ldr	r2, [pc, #216]	@ (80004c8 <SystemClock_Config+0xf4>)
 80003f0:	f023 0301 	bic.w	r3, r3, #1
 80003f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80003f6:	4b34      	ldr	r3, [pc, #208]	@ (80004c8 <SystemClock_Config+0xf4>)
 80003f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	4b32      	ldr	r3, [pc, #200]	@ (80004cc <SystemClock_Config+0xf8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a31      	ldr	r2, [pc, #196]	@ (80004cc <SystemClock_Config+0xf8>)
 8000406:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b2f      	ldr	r3, [pc, #188]	@ (80004cc <SystemClock_Config+0xf8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000418:	bf00      	nop
 800041a:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <SystemClock_Config+0xf8>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000426:	d1f8      	bne.n	800041a <SystemClock_Config+0x46>
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000430:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043a:	2302      	movs	r3, #2
 800043c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800043e:	2302      	movs	r3, #2
 8000440:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000442:	2305      	movs	r3, #5
 8000444:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000446:	23a0      	movs	r3, #160	@ 0xa0
 8000448:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800044e:	2302      	movs	r3, #2
 8000450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000452:	2302      	movs	r3, #2
 8000454:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000456:	2304      	movs	r3, #4
 8000458:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800045a:	2300      	movs	r3, #0
 800045c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800045e:	2308      	movs	r3, #8
 8000460:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000462:	f107 0308 	add.w	r3, r7, #8
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fea8 	bl	80011bc <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8000472:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800047a:	f000 f897 	bl	80005ac <Error_Handler>
  }
  
/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800047e:	233f      	movs	r3, #63	@ 0x3f
 8000480:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2303      	movs	r3, #3
 8000484:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800048a:	2308      	movs	r3, #8
 800048c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800048e:	2340      	movs	r3, #64	@ 0x40
 8000490:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 8000492:	2340      	movs	r3, #64	@ 0x40
 8000494:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800049a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 800049c:	2340      	movs	r3, #64	@ 0x40
 800049e:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80004a4:	2104      	movs	r1, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fae2 	bl	8001a70 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 80004b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004ba:	f000 f877 	bl	80005ac <Error_Handler>
  
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
  
  HAL_EnableCompensationCell();
  */  
}
 80004be:	bf00      	nop
 80004c0:	3778      	adds	r7, #120	@ 0x78
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	58000400 	.word	0x58000400
 80004cc:	58024800 	.word	0x58024800

080004d0 <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004d6:	4b34      	ldr	r3, [pc, #208]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d11b      	bne.n	800051a <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004e2:	f3bf 8f4f 	dsb	sy
}
 80004e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004e8:	f3bf 8f6f 	isb	sy
}
 80004ec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004ee:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004f6:	f3bf 8f4f 	dsb	sy
}
 80004fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fc:	f3bf 8f6f 	isb	sy
}
 8000500:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000502:	4b29      	ldr	r3, [pc, #164]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a28      	ldr	r2, [pc, #160]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 8000508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800050c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800050e:	f3bf 8f4f 	dsb	sy
}
 8000512:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000514:	f3bf 8f6f 	isb	sy
}
 8000518:	e000      	b.n	800051c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800051a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800051c:	4b22      	ldr	r3, [pc, #136]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d138      	bne.n	800059a <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000528:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 800052a:	2200      	movs	r2, #0
 800052c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000536:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 8000538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800053c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	0b5b      	lsrs	r3, r3, #13
 8000542:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000546:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	08db      	lsrs	r3, r3, #3
 800054c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000550:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	015a      	lsls	r2, r3, #5
 8000556:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800055a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000560:	4911      	ldr	r1, [pc, #68]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 8000562:	4313      	orrs	r3, r2
 8000564:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	1e5a      	subs	r2, r3, #1
 800056c:	607a      	str	r2, [r7, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1ef      	bne.n	8000552 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	1e5a      	subs	r2, r3, #1
 8000576:	60ba      	str	r2, [r7, #8]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d1e5      	bne.n	8000548 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <CPU_CACHE_Enable+0xd8>)
 8000588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800058c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800058e:	f3bf 8f4f 	dsb	sy
}
 8000592:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000594:	f3bf 8f6f 	isb	sy
}
 8000598:	e000      	b.n	800059c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800059a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <Error_Handler+0x4>

080005b4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 80005ba:	f000 fb17 	bl	8000bec <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005be:	2301      	movs	r3, #1
 80005c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005c6:	231f      	movs	r3, #31
 80005c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005ca:	2300      	movs	r3, #0
 80005cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005d6:	2301      	movs	r3, #1
 80005d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005da:	2300      	movs	r3, #0
 80005dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005de:	2300      	movs	r3, #0
 80005e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80005e2:	2387      	movs	r3, #135	@ 0x87
 80005e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005e6:	2301      	movs	r3, #1
 80005e8:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005ea:	463b      	mov	r3, r7
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fb35 	bl	8000c5c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005f2:	2004      	movs	r0, #4
 80005f4:	f000 fb12 	bl	8000c1c <HAL_MPU_Enable>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b090      	sub	sp, #64	@ 0x40
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d827      	bhi.n	800065e <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800060e:	2200      	movs	r2, #0
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	2036      	movs	r0, #54	@ 0x36
 8000614:	f000 fac2 	bl	8000b9c <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000618:	2036      	movs	r0, #54	@ 0x36
 800061a:	f000 fad9 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800061e:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <HAL_InitTick+0xc4>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <HAL_InitTick+0xc8>)
 8000626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800062a:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <HAL_InitTick+0xc8>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <HAL_InitTick+0xc8>)
 8000636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800063a:	f003 0310 	and.w	r3, r3, #16
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000642:	f107 0210 	add.w	r2, r7, #16
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fd85 	bl	800215c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000658:	2b00      	cmp	r3, #0
 800065a:	d106      	bne.n	800066a <HAL_InitTick+0x6a>
 800065c:	e001      	b.n	8000662 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e02b      	b.n	80006ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000662:	f001 fd65 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 8000666:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000668:	e004      	b.n	8000674 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800066a:	f001 fd61 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 800066e:	4603      	mov	r3, r0
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000676:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <HAL_InitTick+0xcc>)
 8000678:	fba2 2303 	umull	r2, r3, r2, r3
 800067c:	0c9b      	lsrs	r3, r3, #18
 800067e:	3b01      	subs	r3, #1
 8000680:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <HAL_InitTick+0xd0>)
 8000684:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <HAL_InitTick+0xd4>)
 8000686:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <HAL_InitTick+0xd0>)
 800068a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800068e:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000690:	4a0f      	ldr	r2, [pc, #60]	@ (80006d0 <HAL_InitTick+0xd0>)
 8000692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000694:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <HAL_InitTick+0xd0>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <HAL_InitTick+0xd0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80006a2:	480b      	ldr	r0, [pc, #44]	@ (80006d0 <HAL_InitTick+0xd0>)
 80006a4:	f001 fd9c 	bl	80021e0 <HAL_TIM_Base_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d104      	bne.n	80006b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80006ae:	4808      	ldr	r0, [pc, #32]	@ (80006d0 <HAL_InitTick+0xd0>)
 80006b0:	f001 fdf8 	bl	80022a4 <HAL_TIM_Base_Start_IT>
 80006b4:	4603      	mov	r3, r0
 80006b6:	e000      	b.n	80006ba <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3740      	adds	r7, #64	@ 0x40
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000018 	.word	0x20000018
 80006c8:	58024400 	.word	0x58024400
 80006cc:	431bde83 	.word	0x431bde83
 80006d0:	20000044 	.word	0x20000044
 80006d4:	40001000 	.word	0x40001000

080006d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80006e0:	f000 f978 	bl	80009d4 <HAL_IncTick>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80006f0:	4802      	ldr	r0, [pc, #8]	@ (80006fc <TIM6_DAC_IRQHandler+0x10>)
 80006f2:	f001 fe4f 	bl	8002394 <HAL_TIM_IRQHandler>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000044 	.word	0x20000044

08000700 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <HardFault_Handler+0x4>

08000716 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800071a:	bf00      	nop
 800071c:	e7fd      	b.n	800071a <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000722:	bf00      	nop
 8000724:	e7fd      	b.n	8000722 <BusFault_Handler+0x4>

08000726 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800072a:	bf00      	nop
 800072c:	e7fd      	b.n	800072a <UsageFault_Handler+0x4>

0800072e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  osSystickHandler();
 8000740:	f002 f882 	bl	8002848 <osSystickHandler>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800074c:	f000 f888 	bl	8000860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	@ (8000784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	@ (8000788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	@ (8000794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000776:	f003 f9bf 	bl	8003af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077a:	f7ff fdb1 	bl	80002e0 <main>
  bx  lr
 800077e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800078c:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8000790:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000794:	200009e8 	.word	0x200009e8

08000798 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC3_IRQHandler>
	...

0800079c <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 80007aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <BSP_LED_Init+0x7c>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	4a19      	ldr	r2, [pc, #100]	@ (8000818 <BSP_LED_Init+0x7c>)
 80007b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <BSP_LED_Init+0x7c>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <BSP_LED_Init+0x80>)
 80007cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <BSP_LED_Init+0x84>)
 80007e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e6:	f107 0210 	add.w	r2, r7, #16
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fa79 	bl	8000ce4 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <BSP_LED_Init+0x84>)
 80007f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a07      	ldr	r2, [pc, #28]	@ (800081c <BSP_LED_Init+0x80>)
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	b29b      	uxth	r3, r3
 8000804:	2201      	movs	r2, #1
 8000806:	4619      	mov	r1, r3
 8000808:	f000 fc1c 	bl	8001044 <HAL_GPIO_WritePin>
 return ret;
 800080c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800080e:	4618      	mov	r0, r3
 8000810:	3728      	adds	r7, #40	@ 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	58024400 	.word	0x58024400
 800081c:	08003b84 	.word	0x08003b84
 8000820:	20000000 	.word	0x20000000

08000824 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <BSP_LED_Toggle+0x34>)
 8000836:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4907      	ldr	r1, [pc, #28]	@ (800085c <BSP_LED_Toggle+0x38>)
 800083e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000842:	b29b      	uxth	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	4610      	mov	r0, r2
 8000848:	f000 fc15 	bl	8001076 <HAL_GPIO_TogglePin>
  return ret;
 800084c:	68fb      	ldr	r3, [r7, #12]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000000 	.word	0x20000000
 800085c:	08003b84 	.word	0x08003b84

08000860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000864:	4b31      	ldr	r3, [pc, #196]	@ (800092c <SystemInit+0xcc>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800086a:	4a30      	ldr	r2, [pc, #192]	@ (800092c <SystemInit+0xcc>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000874:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <SystemInit+0xcc>)
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	4a2c      	ldr	r2, [pc, #176]	@ (800092c <SystemInit+0xcc>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000880:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <SystemInit+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <SystemInit+0xd0>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800088c:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <SystemInit+0xd0>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000892:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <SystemInit+0xd0>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4926      	ldr	r1, [pc, #152]	@ (8000930 <SystemInit+0xd0>)
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <SystemInit+0xd4>)
 800089a:	4013      	ands	r3, r2
 800089c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <SystemInit+0xd0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <SystemInit+0xd0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <SystemInit+0xd0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <SystemInit+0xd0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <SystemInit+0xd0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <SystemInit+0xd0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <SystemInit+0xd0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <SystemInit+0xd0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <SystemInit+0xd0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <SystemInit+0xd0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <SystemInit+0xd0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <SystemInit+0xd0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <SystemInit+0xd0>)
 80008e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <SystemInit+0xd0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;  
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <SystemInit+0xd8>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <SystemInit+0xd8>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <SystemInit+0xdc>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <SystemInit+0xe0>)
 8000904:	4013      	ands	r3, r2
 8000906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800090a:	d202      	bcs.n	8000912 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 800090c:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <SystemInit+0xe4>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <SystemInit+0xe8>)
 8000914:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000918:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <SystemInit+0xcc>)
 800091c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000920:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00
 8000930:	58024400 	.word	0x58024400
 8000934:	eaf6ed7f 	.word	0xeaf6ed7f
 8000938:	580000c0 	.word	0x580000c0
 800093c:	5c001000 	.word	0x5c001000
 8000940:	ffff0000 	.word	0xffff0000
 8000944:	51008108 	.word	0x51008108
 8000948:	52004000 	.word	0x52004000

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f917 	bl	8000b86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000958:	f001 fa40 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800095c:	4602      	mov	r2, r0
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_Init+0x68>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	4913      	ldr	r1, [pc, #76]	@ (80009b8 <HAL_Init+0x6c>)
 800096a:	5ccb      	ldrb	r3, [r1, r3]
 800096c:	f003 031f 	and.w	r3, r3, #31
 8000970:	fa22 f303 	lsr.w	r3, r2, r3
 8000974:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_Init+0x68>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_Init+0x6c>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	fa22 f303 	lsr.w	r3, r2, r3
 800098c:	4a0b      	ldr	r2, [pc, #44]	@ (80009bc <HAL_Init+0x70>)
 800098e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000990:	4a0b      	ldr	r2, [pc, #44]	@ (80009c0 <HAL_Init+0x74>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	200f      	movs	r0, #15
 8000998:	f7ff fe32 	bl	8000600 <HAL_InitTick>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e002      	b.n	80009ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009a6:	f000 f80d 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	58024400 	.word	0x58024400
 80009b8:	08003b94 	.word	0x08003b94
 80009bc:	20000014 	.word	0x20000014
 80009c0:	20000010 	.word	0x20000010

080009c4 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	2000001c 	.word	0x2000001c
 80009f8:	20000090 	.word	0x20000090

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000090 	.word	0x20000090

08000a14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <HAL_GetREVID+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	0c1b      	lsrs	r3, r3, #16
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	5c001000 	.word	0x5c001000

08000a2c <__NVIC_SetPriorityGrouping>:
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x40>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x40>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	05fa0000 	.word	0x05fa0000

08000a74 <__NVIC_GetPriorityGrouping>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	@ (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ff4c 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000baa:	f7ff ff63 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	6978      	ldr	r0, [r7, #20]
 8000bb6:	f7ff ffb3 	bl	8000b20 <NVIC_EncodePriority>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff82 	bl	8000acc <__NVIC_SetPriority>
}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff56 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bf0:	f3bf 8f5f 	dmb	sy
}
 8000bf4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <HAL_MPU_Disable+0x28>)
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	4a06      	ldr	r2, [pc, #24]	@ (8000c14 <HAL_MPU_Disable+0x28>)
 8000bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_MPU_Disable+0x2c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	e000ed90 	.word	0xe000ed90

08000c1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c24:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <HAL_MPU_Enable+0x38>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_MPU_Enable+0x3c>)
 8000c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <HAL_MPU_Enable+0x3c>)
 8000c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3a:	f3bf 8f4f 	dsb	sy
}
 8000c3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c40:	f3bf 8f6f 	isb	sy
}
 8000c44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed90 	.word	0xe000ed90
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	785a      	ldrb	r2, [r3, #1]
 8000c68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <HAL_MPU_ConfigRegion+0x84>)
 8000c6a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d029      	beq.n	8000cc8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000c74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce0 <HAL_MPU_ConfigRegion+0x84>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7b1b      	ldrb	r3, [r3, #12]
 8000c80:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7adb      	ldrb	r3, [r3, #11]
 8000c86:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7a9b      	ldrb	r3, [r3, #10]
 8000c8e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7b5b      	ldrb	r3, [r3, #13]
 8000c96:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7b9b      	ldrb	r3, [r3, #14]
 8000c9e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ca0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7bdb      	ldrb	r3, [r3, #15]
 8000ca6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ca8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7a5b      	ldrb	r3, [r3, #9]
 8000cae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7a1b      	ldrb	r3, [r3, #8]
 8000cb6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000cb8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cc2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cc4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000cc6:	e005      	b.n	8000cd4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_MPU_ConfigRegion+0x84>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000cce:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <HAL_MPU_ConfigRegion+0x84>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed90 	.word	0xe000ed90

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	@ 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cf2:	4b89      	ldr	r3, [pc, #548]	@ (8000f18 <HAL_GPIO_Init+0x234>)
 8000cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cf6:	e194      	b.n	8001022 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8186 	beq.w	800101c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d005      	beq.n	8000d28 <HAL_GPIO_Init+0x44>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d017      	beq.n	8000dc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d123      	bne.n	8000e1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	69b9      	ldr	r1, [r7, #24]
 8000e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0203 	and.w	r2, r3, #3
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 80e0 	beq.w	800101c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <HAL_GPIO_Init+0x238>)
 8000e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e62:	4a2e      	ldr	r2, [pc, #184]	@ (8000f1c <HAL_GPIO_Init+0x238>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_GPIO_Init+0x238>)
 8000e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7a:	4a29      	ldr	r2, [pc, #164]	@ (8000f20 <HAL_GPIO_Init+0x23c>)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <HAL_GPIO_Init+0x240>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d052      	beq.n	8000f4c <HAL_GPIO_Init+0x268>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_GPIO_Init+0x244>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d031      	beq.n	8000f12 <HAL_GPIO_Init+0x22e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <HAL_GPIO_Init+0x248>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d02b      	beq.n	8000f0e <HAL_GPIO_Init+0x22a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f30 <HAL_GPIO_Init+0x24c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x226>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f34 <HAL_GPIO_Init+0x250>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x222>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f38 <HAL_GPIO_Init+0x254>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x21e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <HAL_GPIO_Init+0x258>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x21a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	@ (8000f40 <HAL_GPIO_Init+0x25c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x216>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a18      	ldr	r2, [pc, #96]	@ (8000f44 <HAL_GPIO_Init+0x260>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x212>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <HAL_GPIO_Init+0x264>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x20e>
 8000eee:	2309      	movs	r3, #9
 8000ef0:	e02d      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	e02b      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	e029      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000efa:	2307      	movs	r3, #7
 8000efc:	e027      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e025      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e023      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e021      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e01f      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e01d      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e01b      	b.n	8000f4e <HAL_GPIO_Init+0x26a>
 8000f16:	bf00      	nop
 8000f18:	58000080 	.word	0x58000080
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58000400 	.word	0x58000400
 8000f24:	58020000 	.word	0x58020000
 8000f28:	58020400 	.word	0x58020400
 8000f2c:	58020800 	.word	0x58020800
 8000f30:	58020c00 	.word	0x58020c00
 8000f34:	58021000 	.word	0x58021000
 8000f38:	58021400 	.word	0x58021400
 8000f3c:	58021800 	.word	0x58021800
 8000f40:	58021c00 	.word	0x58021c00
 8000f44:	58022000 	.word	0x58022000
 8000f48:	58022400 	.word	0x58022400
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	f002 0203 	and.w	r2, r2, #3
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4093      	lsls	r3, r2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5e:	4938      	ldr	r1, [pc, #224]	@ (8001040 <HAL_GPIO_Init+0x35c>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	3301      	adds	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f ae63 	bne.w	8000cf8 <HAL_GPIO_Init+0x14>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3724      	adds	r7, #36	@ 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58000400 	.word	0x58000400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001088:	887a      	ldrh	r2, [r7, #2]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	041a      	lsls	r2, r3, #16
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43d9      	mvns	r1, r3
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	400b      	ands	r3, r1
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	619a      	str	r2, [r3, #24]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <HAL_HSEM_FastTake+0x2c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3320      	adds	r3, #32
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_HSEM_FastTake+0x30>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e000      	b.n	80010ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	58026400 	.word	0x58026400
 80010dc:	80000300 	.word	0x80000300

080010e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80010ea:	4906      	ldr	r1, [pc, #24]	@ (8001104 <HAL_HSEM_Release+0x24>)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	58026400 	.word	0x58026400

08001108 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001110:	4b29      	ldr	r3, [pc, #164]	@ (80011b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	2b06      	cmp	r3, #6
 800111a:	d00a      	beq.n	8001132 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800111c:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d001      	beq.n	800112e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e040      	b.n	80011b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e03e      	b.n	80011b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800113a:	491f      	ldr	r1, [pc, #124]	@ (80011b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001142:	f7ff fc5b 	bl	80009fc <HAL_GetTick>
 8001146:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001148:	e009      	b.n	800115e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800114a:	f7ff fc57 	bl	80009fc <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001158:	d901      	bls.n	800115e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e028      	b.n	80011b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800116a:	d1ee      	bne.n	800114a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b1e      	cmp	r3, #30
 8001170:	d008      	beq.n	8001184 <HAL_PWREx_ConfigSupply+0x7c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b2e      	cmp	r3, #46	@ 0x2e
 8001176:	d005      	beq.n	8001184 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b1d      	cmp	r3, #29
 800117c:	d002      	beq.n	8001184 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b2d      	cmp	r3, #45	@ 0x2d
 8001182:	d114      	bne.n	80011ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001184:	f7ff fc3a 	bl	80009fc <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800118a:	e009      	b.n	80011a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800118c:	f7ff fc36 	bl	80009fc <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800119a:	d901      	bls.n	80011a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e007      	b.n	80011b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ac:	d1ee      	bne.n	800118c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	58024800 	.word	0x58024800

080011bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f000 bc48 	b.w	8001a60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8088 	beq.w	80012ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011de:	4b99      	ldr	r3, [pc, #612]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011e8:	4b96      	ldr	r3, [pc, #600]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d007      	beq.n	8001204 <HAL_RCC_OscConfig+0x48>
 80011f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f6:	2b18      	cmp	r3, #24
 80011f8:	d111      	bne.n	800121e <HAL_RCC_OscConfig+0x62>
 80011fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	4b8f      	ldr	r3, [pc, #572]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d06d      	beq.n	80012ec <HAL_RCC_OscConfig+0x130>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d169      	bne.n	80012ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f000 bc21 	b.w	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x7a>
 8001228:	4b86      	ldr	r3, [pc, #536]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a85      	ldr	r2, [pc, #532]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800122e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e02e      	b.n	8001294 <HAL_RCC_OscConfig+0xd8>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x9c>
 800123e:	4b81      	ldr	r3, [pc, #516]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a80      	ldr	r2, [pc, #512]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a7d      	ldr	r2, [pc, #500]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xd8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0xc0>
 8001262:	4b78      	ldr	r3, [pc, #480]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a77      	ldr	r2, [pc, #476]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b75      	ldr	r3, [pc, #468]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a74      	ldr	r2, [pc, #464]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xd8>
 800127c:	4b71      	ldr	r3, [pc, #452]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a70      	ldr	r2, [pc, #448]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b6e      	ldr	r3, [pc, #440]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6d      	ldr	r2, [pc, #436]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fbae 	bl	80009fc <HAL_GetTick>
 80012a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fbaa 	bl	80009fc <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	@ 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e3d4      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b6:	4b63      	ldr	r3, [pc, #396]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xe8>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb9a 	bl	80009fc <HAL_GetTick>
 80012c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fb96 	bl	80009fc <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e3c0      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012de:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x110>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80ca 	beq.w	8001490 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fc:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001304:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001306:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_RCC_OscConfig+0x166>
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	2b18      	cmp	r3, #24
 8001316:	d156      	bne.n	80013c6 <HAL_RCC_OscConfig+0x20a>
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d151      	bne.n	80013c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001322:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x17e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e392      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800133a:	4b42      	ldr	r3, [pc, #264]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0219 	bic.w	r2, r3, #25
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	493f      	ldr	r1, [pc, #252]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fb56 	bl	80009fc <HAL_GetTick>
 8001350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fb52 	bl	80009fc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e37c      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	f7ff fb4f 	bl	8000a14 <HAL_GetREVID>
 8001376:	4603      	mov	r3, r0
 8001378:	f241 0203 	movw	r2, #4099	@ 0x1003
 800137c:	4293      	cmp	r3, r2
 800137e:	d817      	bhi.n	80013b0 <HAL_RCC_OscConfig+0x1f4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b40      	cmp	r3, #64	@ 0x40
 8001386:	d108      	bne.n	800139a <HAL_RCC_OscConfig+0x1de>
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001390:	4a2c      	ldr	r2, [pc, #176]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001396:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001398:	e07a      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	031b      	lsls	r3, r3, #12
 80013a8:	4926      	ldr	r1, [pc, #152]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ae:	e06f      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	4921      	ldr	r1, [pc, #132]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c4:	e064      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d047      	beq.n	800145e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 0219 	bic.w	r2, r3, #25
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	491a      	ldr	r1, [pc, #104]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb0c 	bl	80009fc <HAL_GetTick>
 80013e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fb08 	bl	80009fc <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e332      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	f7ff fb05 	bl	8000a14 <HAL_GetREVID>
 800140a:	4603      	mov	r3, r0
 800140c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001410:	4293      	cmp	r3, r2
 8001412:	d819      	bhi.n	8001448 <HAL_RCC_OscConfig+0x28c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b40      	cmp	r3, #64	@ 0x40
 800141a:	d108      	bne.n	800142e <HAL_RCC_OscConfig+0x272>
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142a:	6053      	str	r3, [r2, #4]
 800142c:	e030      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	031b      	lsls	r3, r3, #12
 800143c:	4901      	ldr	r1, [pc, #4]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
 8001442:	e025      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
 8001444:	58024400 	.word	0x58024400
 8001448:	4b9a      	ldr	r3, [pc, #616]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	4997      	ldr	r1, [pc, #604]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e018      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b95      	ldr	r3, [pc, #596]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a94      	ldr	r2, [pc, #592]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fac7 	bl	80009fc <HAL_GetTick>
 800146e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fac3 	bl	80009fc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e2ed      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001484:	4b8b      	ldr	r3, [pc, #556]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a9 	beq.w	80015f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149e:	4b85      	ldr	r3, [pc, #532]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014a8:	4b82      	ldr	r3, [pc, #520]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d007      	beq.n	80014c4 <HAL_RCC_OscConfig+0x308>
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b18      	cmp	r3, #24
 80014b8:	d13a      	bne.n	8001530 <HAL_RCC_OscConfig+0x374>
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d135      	bne.n	8001530 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c4:	4b7b      	ldr	r3, [pc, #492]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x320>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b80      	cmp	r3, #128	@ 0x80
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e2c1      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014dc:	f7ff fa9a 	bl	8000a14 <HAL_GetREVID>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d817      	bhi.n	800151a <HAL_RCC_OscConfig+0x35e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d108      	bne.n	8001504 <HAL_RCC_OscConfig+0x348>
 80014f2:	4b70      	ldr	r3, [pc, #448]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014fa:	4a6e      	ldr	r2, [pc, #440]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001500:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001502:	e075      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001504:	4b6b      	ldr	r3, [pc, #428]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	069b      	lsls	r3, r3, #26
 8001512:	4968      	ldr	r1, [pc, #416]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001518:	e06a      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800151a:	4b66      	ldr	r3, [pc, #408]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	061b      	lsls	r3, r3, #24
 8001528:	4962      	ldr	r1, [pc, #392]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800152e:	e05f      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d042      	beq.n	80015be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001538:	4b5e      	ldr	r3, [pc, #376]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a5d      	ldr	r2, [pc, #372]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800153e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fa5a 	bl	80009fc <HAL_GetTick>
 8001548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800154c:	f7ff fa56 	bl	80009fc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e280      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800155e:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800156a:	f7ff fa53 	bl	8000a14 <HAL_GetREVID>
 800156e:	4603      	mov	r3, r0
 8001570:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001574:	4293      	cmp	r3, r2
 8001576:	d817      	bhi.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	2b20      	cmp	r3, #32
 800157e:	d108      	bne.n	8001592 <HAL_RCC_OscConfig+0x3d6>
 8001580:	4b4c      	ldr	r3, [pc, #304]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001588:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800158e:	6053      	str	r3, [r2, #4]
 8001590:	e02e      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
 8001592:	4b48      	ldr	r3, [pc, #288]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	069b      	lsls	r3, r3, #26
 80015a0:	4944      	ldr	r1, [pc, #272]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e023      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
 80015a8:	4b42      	ldr	r3, [pc, #264]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	493f      	ldr	r1, [pc, #252]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015be:	4b3d      	ldr	r3, [pc, #244]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a3c      	ldr	r2, [pc, #240]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fa17 	bl	80009fc <HAL_GetTick>
 80015ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015d2:	f7ff fa13 	bl	80009fc <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e23d      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015e4:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d036      	beq.n	800166a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d019      	beq.n	8001638 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001608:	4a2a      	ldr	r2, [pc, #168]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff f9f4 	bl	80009fc <HAL_GetTick>
 8001614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff f9f0 	bl	80009fc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e21a      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x45c>
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163c:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff f9da 	bl	80009fc <HAL_GetTick>
 8001648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff f9d6 	bl	80009fc <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e200      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d039      	beq.n	80016ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a0c      	ldr	r2, [pc, #48]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001688:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800168a:	f7ff f9b7 	bl	80009fc <HAL_GetTick>
 800168e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001692:	f7ff f9b3 	bl	80009fc <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1dd      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x4d6>
 80016b0:	e01b      	b.n	80016ea <HAL_RCC_OscConfig+0x52e>
 80016b2:	bf00      	nop
 80016b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a9a      	ldr	r2, [pc, #616]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80016be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f99a 	bl	80009fc <HAL_GetTick>
 80016c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016cc:	f7ff f996 	bl	80009fc <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1c0      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016de:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8081 	beq.w	80017fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016f8:	4b8c      	ldr	r3, [pc, #560]	@ (800192c <HAL_RCC_OscConfig+0x770>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a8b      	ldr	r2, [pc, #556]	@ (800192c <HAL_RCC_OscConfig+0x770>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001704:	f7ff f97a 	bl	80009fc <HAL_GetTick>
 8001708:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170c:	f7ff f976 	bl	80009fc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1a0      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800171e:	4b83      	ldr	r3, [pc, #524]	@ (800192c <HAL_RCC_OscConfig+0x770>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x584>
 8001732:	4b7d      	ldr	r3, [pc, #500]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001736:	4a7c      	ldr	r2, [pc, #496]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	@ 0x70
 800173e:	e02d      	b.n	800179c <HAL_RCC_OscConfig+0x5e0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10c      	bne.n	8001762 <HAL_RCC_OscConfig+0x5a6>
 8001748:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a76      	ldr	r2, [pc, #472]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	4b74      	ldr	r3, [pc, #464]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	4a73      	ldr	r2, [pc, #460]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x5e0>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b05      	cmp	r3, #5
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c8>
 800176a:	4b6f      	ldr	r3, [pc, #444]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a6e      	ldr	r2, [pc, #440]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	4b6c      	ldr	r3, [pc, #432]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	4a6b      	ldr	r2, [pc, #428]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	@ 0x70
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x5e0>
 8001784:	4b68      	ldr	r3, [pc, #416]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a67      	ldr	r2, [pc, #412]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001794:	4a64      	ldr	r2, [pc, #400]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff f92a 	bl	80009fc <HAL_GetTick>
 80017a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff f926 	bl	80009fc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e14e      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017c2:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0ee      	beq.n	80017ac <HAL_RCC_OscConfig+0x5f0>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff f914 	bl	80009fc <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff f910 	bl	80009fc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e138      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ee      	bne.n	80017d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 812d 	beq.w	8001a5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001804:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800180c:	2b18      	cmp	r3, #24
 800180e:	f000 80bd 	beq.w	800198c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	2b02      	cmp	r3, #2
 8001818:	f040 809e 	bne.w	8001958 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a41      	ldr	r2, [pc, #260]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff f8e8 	bl	80009fc <HAL_GetTick>
 800182c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f8e4 	bl	80009fc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e10e      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184e:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001852:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_RCC_OscConfig+0x774>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	430a      	orrs	r2, r1
 8001862:	4931      	ldr	r1, [pc, #196]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	628b      	str	r3, [r1, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	3b01      	subs	r3, #1
 800186e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001876:	3b01      	subs	r3, #1
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	b29b      	uxth	r3, r3
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001882:	3b01      	subs	r3, #1
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001890:	3b01      	subs	r3, #1
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001898:	4923      	ldr	r1, [pc, #140]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018b6:	00d2      	lsls	r2, r2, #3
 80018b8:	491b      	ldr	r1, [pc, #108]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	f023 020c 	bic.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4917      	ldr	r1, [pc, #92]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	f023 0202 	bic.w	r2, r3, #2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018dc:	4912      	ldr	r1, [pc, #72]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001918:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f86d 	bl	80009fc <HAL_GetTick>
 8001922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001924:	e011      	b.n	800194a <HAL_RCC_OscConfig+0x78e>
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400
 800192c:	58024800 	.word	0x58024800
 8001930:	fffffc0c 	.word	0xfffffc0c
 8001934:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f860 	bl	80009fc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e08a      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800194a:	4b47      	ldr	r3, [pc, #284]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x77c>
 8001956:	e082      	b.n	8001a5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a42      	ldr	r2, [pc, #264]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800195e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f84a 	bl	80009fc <HAL_GetTick>
 8001968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f846 	bl	80009fc <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e070      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x7b0>
 800198a:	e068      	b.n	8001a5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001992:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	2b01      	cmp	r3, #1
 800199e:	d031      	beq.n	8001a04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0203 	and.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d12a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d122      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0a5b      	lsrs	r3, r3, #9
 80019d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d111      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0e1b      	lsrs	r3, r3, #24
 80019f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e02b      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d01f      	beq.n	8001a5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a2a:	f7fe ffe7 	bl	80009fc <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a30:	bf00      	nop
 8001a32:	f7fe ffe3 	bl	80009fc <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d0f9      	beq.n	8001a32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_RCC_OscConfig+0x8b0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4906      	ldr	r1, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3730      	adds	r7, #48	@ 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	ffff0007 	.word	0xffff0007

08001a70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e19c      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b87      	ldr	r3, [pc, #540]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 020f 	bic.w	r2, r3, #15
 8001a9a:	4985      	ldr	r1, [pc, #532]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b83      	ldr	r3, [pc, #524]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e184      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ad0:	4b78      	ldr	r3, [pc, #480]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	4975      	ldr	r1, [pc, #468]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	4b70      	ldr	r3, [pc, #448]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d908      	bls.n	8001b10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001afe:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	496a      	ldr	r1, [pc, #424]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	4b64      	ldr	r3, [pc, #400]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d908      	bls.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b2c:	4b61      	ldr	r3, [pc, #388]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	495e      	ldr	r1, [pc, #376]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	4b59      	ldr	r3, [pc, #356]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d908      	bls.n	8001b6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b5a:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4953      	ldr	r1, [pc, #332]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d908      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f023 020f 	bic.w	r2, r3, #15
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4947      	ldr	r1, [pc, #284]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d055      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4940      	ldr	r1, [pc, #256]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d121      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0f6      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bd8:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d115      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0ea      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0de      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c00:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d6      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f023 0207 	bic.w	r2, r3, #7
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4925      	ldr	r1, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c22:	f7fe feeb 	bl	80009fc <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7fe fee7 	bl	80009fc <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0be      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c40:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d1eb      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d208      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f023 020f 	bic.w	r2, r3, #15
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	490e      	ldr	r1, [pc, #56]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d214      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 020f 	bic.w	r2, r3, #15
 8001c96:	4906      	ldr	r1, [pc, #24]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e086      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
 8001cb0:	52002000 	.word	0x52002000
 8001cb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d208      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	4939      	ldr	r1, [pc, #228]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d208      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d02:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	492e      	ldr	r1, [pc, #184]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d208      	bcs.n	8001d42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d30:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4922      	ldr	r1, [pc, #136]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d208      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4917      	ldr	r1, [pc, #92]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d70:	f000 f834 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	4912      	ldr	r1, [pc, #72]	@ (8001dcc <HAL_RCC_ClockConfig+0x35c>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <HAL_RCC_ClockConfig+0x35c>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <HAL_RCC_ClockConfig+0x360>)
 8001da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x364>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_ClockConfig+0x368>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fc24 	bl	8000600 <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	08003b94 	.word	0x08003b94
 8001dd0:	20000014 	.word	0x20000014
 8001dd4:	20000010 	.word	0x20000010
 8001dd8:	20000018 	.word	0x20000018

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de2:	4bb3      	ldr	r3, [pc, #716]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dea:	2b18      	cmp	r3, #24
 8001dec:	f200 8155 	bhi.w	800209a <HAL_RCC_GetSysClockFreq+0x2be>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e5d 	.word	0x08001e5d
 8001dfc:	0800209b 	.word	0x0800209b
 8001e00:	0800209b 	.word	0x0800209b
 8001e04:	0800209b 	.word	0x0800209b
 8001e08:	0800209b 	.word	0x0800209b
 8001e0c:	0800209b 	.word	0x0800209b
 8001e10:	0800209b 	.word	0x0800209b
 8001e14:	0800209b 	.word	0x0800209b
 8001e18:	08001e83 	.word	0x08001e83
 8001e1c:	0800209b 	.word	0x0800209b
 8001e20:	0800209b 	.word	0x0800209b
 8001e24:	0800209b 	.word	0x0800209b
 8001e28:	0800209b 	.word	0x0800209b
 8001e2c:	0800209b 	.word	0x0800209b
 8001e30:	0800209b 	.word	0x0800209b
 8001e34:	0800209b 	.word	0x0800209b
 8001e38:	08001e89 	.word	0x08001e89
 8001e3c:	0800209b 	.word	0x0800209b
 8001e40:	0800209b 	.word	0x0800209b
 8001e44:	0800209b 	.word	0x0800209b
 8001e48:	0800209b 	.word	0x0800209b
 8001e4c:	0800209b 	.word	0x0800209b
 8001e50:	0800209b 	.word	0x0800209b
 8001e54:	0800209b 	.word	0x0800209b
 8001e58:	08001e8f 	.word	0x08001e8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e5c:	4b94      	ldr	r3, [pc, #592]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e68:	4b91      	ldr	r3, [pc, #580]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	4a90      	ldr	r2, [pc, #576]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e7a:	e111      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e7c:	4b8d      	ldr	r3, [pc, #564]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e7e:	61bb      	str	r3, [r7, #24]
      break;
 8001e80:	e10e      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e82:	4b8d      	ldr	r3, [pc, #564]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e84:	61bb      	str	r3, [r7, #24]
      break;
 8001e86:	e10b      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e88:	4b8c      	ldr	r3, [pc, #560]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e8a:	61bb      	str	r3, [r7, #24]
      break;
 8001e8c:	e108      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e8e:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e98:	4b85      	ldr	r3, [pc, #532]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ea4:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001eae:	4b80      	ldr	r3, [pc, #512]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80e1 	beq.w	8002094 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	f000 8083 	beq.w	8001fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	f200 80a1 	bhi.w	8002024 <HAL_RCC_GetSysClockFreq+0x248>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d056      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001eee:	e099      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d02d      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001efc:	4b6c      	ldr	r3, [pc, #432]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	4a6b      	ldr	r2, [pc, #428]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f26:	4b62      	ldr	r3, [pc, #392]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f56:	e087      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6a:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f9a:	e065      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fae:	4b40      	ldr	r3, [pc, #256]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fde:	e043      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002002:	ed97 6a02 	vldr	s12, [r7, #8]
 8002006:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002022:	e021      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002046:	ed97 6a02 	vldr	s12, [r7, #8]
 800204a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800204e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800205a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002066:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	0a5b      	lsrs	r3, r3, #9
 800206e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002072:	3301      	adds	r3, #1
 8002074:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002080:	edd7 6a07 	vldr	s13, [r7, #28]
 8002084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208c:	ee17 3a90 	vmov	r3, s15
 8002090:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002092:	e005      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
      break;
 8002098:	e002      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800209c:	61bb      	str	r3, [r7, #24]
      break;
 800209e:	bf00      	nop
  }

  return sysclockfreq;
 80020a0:	69bb      	ldr	r3, [r7, #24]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
 80020b4:	03d09000 	.word	0x03d09000
 80020b8:	003d0900 	.word	0x003d0900
 80020bc:	017d7840 	.word	0x017d7840
 80020c0:	46000000 	.word	0x46000000
 80020c4:	4c742400 	.word	0x4c742400
 80020c8:	4a742400 	.word	0x4a742400
 80020cc:	4bbebc20 	.word	0x4bbebc20

080020d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80020d6:	f7ff fe81 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_RCC_GetHCLKFreq+0x50>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490f      	ldr	r1, [pc, #60]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x54>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_RCC_GetHCLKFreq+0x50>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x54>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a07      	ldr	r2, [pc, #28]	@ (8002128 <HAL_RCC_GetHCLKFreq+0x58>)
 800210c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800210e:	4a07      	ldr	r2, [pc, #28]	@ (800212c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <HAL_RCC_GetHCLKFreq+0x58>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	58024400 	.word	0x58024400
 8002124:	08003b94 	.word	0x08003b94
 8002128:	20000014 	.word	0x20000014
 800212c:	20000010 	.word	0x20000010

08002130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002134:	f7ff ffcc 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4904      	ldr	r1, [pc, #16]	@ (8002158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	58024400 	.word	0x58024400
 8002158:	08003b94 	.word	0x08003b94

0800215c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	223f      	movs	r2, #63	@ 0x3f
 800216a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_RCC_GetClockConfig+0x7c>)
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f003 0207 	and.w	r2, r3, #7
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002178:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <HAL_RCC_GetClockConfig+0x7c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_RCC_GetClockConfig+0x7c>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_RCC_GetClockConfig+0x7c>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_RCC_GetClockConfig+0x7c>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_RCC_GetClockConfig+0x7c>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_RCC_GetClockConfig+0x7c>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_RCC_GetClockConfig+0x80>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	601a      	str	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	58024400 	.word	0x58024400
 80021dc:	52002000 	.word	0x52002000

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e049      	b.n	8002286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f841 	bl	800228e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 fa00 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d001      	beq.n	80022bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e054      	b.n	8002366 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a26      	ldr	r2, [pc, #152]	@ (8002374 <HAL_TIM_Base_Start_IT+0xd0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d022      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x80>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e6:	d01d      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x80>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a22      	ldr	r2, [pc, #136]	@ (8002378 <HAL_TIM_Base_Start_IT+0xd4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d018      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x80>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a21      	ldr	r2, [pc, #132]	@ (800237c <HAL_TIM_Base_Start_IT+0xd8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x80>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1f      	ldr	r2, [pc, #124]	@ (8002380 <HAL_TIM_Base_Start_IT+0xdc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00e      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x80>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <HAL_TIM_Base_Start_IT+0xe0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x80>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1c      	ldr	r2, [pc, #112]	@ (8002388 <HAL_TIM_Base_Start_IT+0xe4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x80>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1b      	ldr	r2, [pc, #108]	@ (800238c <HAL_TIM_Base_Start_IT+0xe8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d115      	bne.n	8002350 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_TIM_Base_Start_IT+0xec>)
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b06      	cmp	r3, #6
 8002334:	d015      	beq.n	8002362 <HAL_TIM_Base_Start_IT+0xbe>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800233c:	d011      	beq.n	8002362 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	e008      	b.n	8002362 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e000      	b.n	8002364 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40001800 	.word	0x40001800
 800238c:	40014000 	.word	0x40014000
 8002390:	00010007 	.word	0x00010007

08002394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d122      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d11b      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0202 	mvn.w	r2, #2
 80023c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f905 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8f7 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f908 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d122      	bne.n	8002444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b04      	cmp	r3, #4
 800240a:	d11b      	bne.n	8002444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0204 	mvn.w	r2, #4
 8002414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2202      	movs	r2, #2
 800241a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8db 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8cd 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f8de 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b08      	cmp	r3, #8
 8002450:	d122      	bne.n	8002498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b08      	cmp	r3, #8
 800245e:	d11b      	bne.n	8002498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0208 	mvn.w	r2, #8
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2204      	movs	r2, #4
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8b1 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8a3 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8b4 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d122      	bne.n	80024ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b10      	cmp	r3, #16
 80024b2:	d11b      	bne.n	80024ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0210 	mvn.w	r2, #16
 80024bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2208      	movs	r2, #8
 80024c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f887 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f879 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f88a 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10e      	bne.n	8002518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0201 	mvn.w	r2, #1
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe f8e0 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002522:	2b80      	cmp	r3, #128	@ 0x80
 8002524:	d10e      	bne.n	8002544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002530:	2b80      	cmp	r3, #128	@ 0x80
 8002532:	d107      	bne.n	8002544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800253c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f914 	bl	800276c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002552:	d10e      	bne.n	8002572 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255e:	2b80      	cmp	r3, #128	@ 0x80
 8002560:	d107      	bne.n	8002572 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800256a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f907 	bl	8002780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b40      	cmp	r3, #64	@ 0x40
 800257e:	d10e      	bne.n	800259e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258a:	2b40      	cmp	r3, #64	@ 0x40
 800258c:	d107      	bne.n	800259e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f838 	bl	800260e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d10e      	bne.n	80025ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d107      	bne.n	80025ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f06f 0220 	mvn.w	r2, #32
 80025c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8c7 	bl	8002758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a40      	ldr	r2, [pc, #256]	@ (8002738 <TIM_Base_SetConfig+0x114>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002642:	d00f      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a3d      	ldr	r2, [pc, #244]	@ (800273c <TIM_Base_SetConfig+0x118>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00b      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3c      	ldr	r2, [pc, #240]	@ (8002740 <TIM_Base_SetConfig+0x11c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a3b      	ldr	r2, [pc, #236]	@ (8002744 <TIM_Base_SetConfig+0x120>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3a      	ldr	r2, [pc, #232]	@ (8002748 <TIM_Base_SetConfig+0x124>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d108      	bne.n	8002676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a2f      	ldr	r2, [pc, #188]	@ (8002738 <TIM_Base_SetConfig+0x114>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002684:	d01b      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a2c      	ldr	r2, [pc, #176]	@ (800273c <TIM_Base_SetConfig+0x118>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d017      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a2b      	ldr	r2, [pc, #172]	@ (8002740 <TIM_Base_SetConfig+0x11c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a2a      	ldr	r2, [pc, #168]	@ (8002744 <TIM_Base_SetConfig+0x120>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00f      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a29      	ldr	r2, [pc, #164]	@ (8002748 <TIM_Base_SetConfig+0x124>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00b      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a28      	ldr	r2, [pc, #160]	@ (800274c <TIM_Base_SetConfig+0x128>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a27      	ldr	r2, [pc, #156]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d003      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a26      	ldr	r2, [pc, #152]	@ (8002754 <TIM_Base_SetConfig+0x130>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <TIM_Base_SetConfig+0x114>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00f      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a12      	ldr	r2, [pc, #72]	@ (8002748 <TIM_Base_SetConfig+0x124>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a11      	ldr	r2, [pc, #68]	@ (800274c <TIM_Base_SetConfig+0x128>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a10      	ldr	r2, [pc, #64]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <TIM_Base_SetConfig+0x130>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	615a      	str	r2, [r3, #20]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40010000 	.word	0x40010000
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800
 8002744:	40000c00 	.word	0x40000c00
 8002748:	40010400 	.word	0x40010400
 800274c:	40014000 	.word	0x40014000
 8002750:	40014400 	.word	0x40014400
 8002754:	40014800 	.word	0x40014800

08002758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a6:	2b84      	cmp	r3, #132	@ 0x84
 80027a8:	d005      	beq.n	80027b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	3303      	adds	r3, #3
 80027b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027c8:	f000 fa72 	bl	8002cb0 <vTaskStartScheduler>
  
  return osOK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80027d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d4:	b087      	sub	sp, #28
 80027d6:	af02      	add	r7, sp, #8
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685c      	ldr	r4, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027e8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ffcf 	bl	8002794 <makeFreeRtosPriority>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	9200      	str	r2, [sp, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4632      	mov	r2, r6
 8002804:	4629      	mov	r1, r5
 8002806:	4620      	mov	r0, r4
 8002808:	f000 f8dd 	bl	80029c6 <xTaskCreate>
 800280c:	4603      	mov	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002820 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <osDelay+0x16>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	e000      	b.n	8002838 <osDelay+0x18>
 8002836:	2301      	movs	r3, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fa03 	bl	8002c44 <vTaskDelay>
  
  return osOK;
 800283e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800284c:	f000 fcf0 	bl	8003230 <xTaskGetSchedulerState>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002856:	f001 f8f7 	bl	8003a48 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}

0800285e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f103 0208 	add.w	r2, r3, #8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0208 	add.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f103 0208 	add.w	r2, r3, #8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d103      	bne.n	8002920 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e00c      	b.n	800293a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3308      	adds	r3, #8
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e002      	b.n	800292e <vListInsert+0x2e>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d2f6      	bcs.n	8002928 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6892      	ldr	r2, [r2, #8]
 8002988:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6852      	ldr	r2, [r2, #4]
 8002992:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d103      	bne.n	80029a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b08c      	sub	sp, #48	@ 0x30
 80029ca:	af04      	add	r7, sp, #16
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fcac 	bl	8003338 <pvPortMalloc>
 80029e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029e8:	205c      	movs	r0, #92	@ 0x5c
 80029ea:	f000 fca5 	bl	8003338 <pvPortMalloc>
 80029ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80029fc:	e005      	b.n	8002a0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f000 fd68 	bl	80034d4 <vPortFree>
 8002a04:	e001      	b.n	8002a0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	2300      	movs	r3, #0
 8002a14:	9303      	str	r3, [sp, #12]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f80e 	bl	8002a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a2c:	69f8      	ldr	r0, [r7, #28]
 8002a2e:	f000 f89b 	bl	8002b68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e002      	b.n	8002a3e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	461a      	mov	r2, r3
 8002a60:	21a5      	movs	r1, #165	@ 0xa5
 8002a62:	f001 f841 	bl	8003ae8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002a70:	440b      	add	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f023 0307 	bic.w	r3, r3, #7
 8002a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01f      	beq.n	8002ae8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	e012      	b.n	8002ad4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	7819      	ldrb	r1, [r3, #0]
 8002ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	3334      	adds	r3, #52	@ 0x34
 8002abe:	460a      	mov	r2, r1
 8002ac0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b0f      	cmp	r3, #15
 8002ad8:	d9e9      	bls.n	8002aae <prvInitialiseNewTask+0x66>
 8002ada:	e000      	b.n	8002ade <prvInitialiseNewTask+0x96>
			{
				break;
 8002adc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ae6:	e003      	b.n	8002af0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d901      	bls.n	8002afa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002af6:	2306      	movs	r3, #6
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002afe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	2200      	movs	r2, #0
 8002b0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fec4 	bl	800289e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	3318      	adds	r3, #24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff febf 	bl	800289e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b28:	f1c3 0207 	rsb	r2, r3, #7
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	2200      	movs	r2, #0
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	69b8      	ldr	r0, [r7, #24]
 8002b4a:	f000 fde3 	bl	8003714 <pxPortInitialiseStack>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b60:	bf00      	nop
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b70:	f000 feda 	bl	8003928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b74:	4b2c      	ldr	r3, [pc, #176]	@ (8002c28 <prvAddNewTaskToReadyList+0xc0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <prvAddNewTaskToReadyList+0xc0>)
 8002b7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <prvAddNewTaskToReadyList+0xc4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b86:	4a29      	ldr	r2, [pc, #164]	@ (8002c2c <prvAddNewTaskToReadyList+0xc4>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b8c:	4b26      	ldr	r3, [pc, #152]	@ (8002c28 <prvAddNewTaskToReadyList+0xc0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d110      	bne.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b94:	f000 faae 	bl	80030f4 <prvInitialiseTaskLists>
 8002b98:	e00d      	b.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b9a:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <prvAddNewTaskToReadyList+0xc8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ba2:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <prvAddNewTaskToReadyList+0xc4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d802      	bhi.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c2c <prvAddNewTaskToReadyList+0xc4>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c34 <prvAddNewTaskToReadyList+0xcc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c34 <prvAddNewTaskToReadyList+0xcc>)
 8002bbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c34 <prvAddNewTaskToReadyList+0xcc>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <prvAddNewTaskToReadyList+0xd0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	4a18      	ldr	r2, [pc, #96]	@ (8002c38 <prvAddNewTaskToReadyList+0xd0>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <prvAddNewTaskToReadyList+0xd4>)
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f7ff fe61 	bl	80028b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bf6:	f000 fec9 	bl	800398c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <prvAddNewTaskToReadyList+0xc8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00e      	beq.n	8002c20 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <prvAddNewTaskToReadyList+0xc4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d207      	bcs.n	8002c20 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <prvAddNewTaskToReadyList+0xd8>)
 8002c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000194 	.word	0x20000194
 8002c2c:	20000094 	.word	0x20000094
 8002c30:	200001a0 	.word	0x200001a0
 8002c34:	200001b0 	.word	0x200001b0
 8002c38:	2000019c 	.word	0x2000019c
 8002c3c:	20000098 	.word	0x20000098
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d018      	beq.n	8002c88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <vTaskDelay+0x64>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <vTaskDelay+0x32>
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	60bb      	str	r3, [r7, #8]
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	e7fd      	b.n	8002c72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c76:	f000 f863 	bl	8002d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 faf5 	bl	800326c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c82:	f000 f86b 	bl	8002d5c <xTaskResumeAll>
 8002c86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <vTaskDelay+0x68>)
 8002c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200001bc 	.word	0x200001bc
 8002cac:	e000ed04 	.word	0xe000ed04

08002cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <vTaskStartScheduler+0x78>)
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2280      	movs	r2, #128	@ 0x80
 8002cc2:	491a      	ldr	r1, [pc, #104]	@ (8002d2c <vTaskStartScheduler+0x7c>)
 8002cc4:	481a      	ldr	r0, [pc, #104]	@ (8002d30 <vTaskStartScheduler+0x80>)
 8002cc6:	f7ff fe7e 	bl	80029c6 <xTaskCreate>
 8002cca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d116      	bne.n	8002d00 <vTaskStartScheduler+0x50>
	__asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	60bb      	str	r3, [r7, #8]
}
 8002ce4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <vTaskStartScheduler+0x84>)
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <vTaskStartScheduler+0x88>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <vTaskStartScheduler+0x8c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cfa:	f000 fd99 	bl	8003830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cfe:	e00f      	b.n	8002d20 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d10b      	bne.n	8002d20 <vTaskStartScheduler+0x70>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	607b      	str	r3, [r7, #4]
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <vTaskStartScheduler+0x6c>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200001b8 	.word	0x200001b8
 8002d2c:	08003b7c 	.word	0x08003b7c
 8002d30:	080030c5 	.word	0x080030c5
 8002d34:	200001b4 	.word	0x200001b4
 8002d38:	200001a0 	.word	0x200001a0
 8002d3c:	20000198 	.word	0x20000198

08002d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <vTaskSuspendAll+0x18>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	4a03      	ldr	r2, [pc, #12]	@ (8002d58 <vTaskSuspendAll+0x18>)
 8002d4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	200001bc 	.word	0x200001bc

08002d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d6a:	4b42      	ldr	r3, [pc, #264]	@ (8002e74 <xTaskResumeAll+0x118>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <xTaskResumeAll+0x2e>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	603b      	str	r3, [r7, #0]
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	e7fd      	b.n	8002d86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d8a:	f000 fdcd 	bl	8003928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d8e:	4b39      	ldr	r3, [pc, #228]	@ (8002e74 <xTaskResumeAll+0x118>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	4a37      	ldr	r2, [pc, #220]	@ (8002e74 <xTaskResumeAll+0x118>)
 8002d96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d98:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <xTaskResumeAll+0x118>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d161      	bne.n	8002e64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002da0:	4b35      	ldr	r3, [pc, #212]	@ (8002e78 <xTaskResumeAll+0x11c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05d      	beq.n	8002e64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002da8:	e02e      	b.n	8002e08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002daa:	4b34      	ldr	r3, [pc, #208]	@ (8002e7c <xTaskResumeAll+0x120>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3318      	adds	r3, #24
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fddb 	bl	8002972 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fdd6 	bl	8002972 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	4b2c      	ldr	r3, [pc, #176]	@ (8002e80 <xTaskResumeAll+0x124>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e80 <xTaskResumeAll+0x124>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4a27      	ldr	r2, [pc, #156]	@ (8002e84 <xTaskResumeAll+0x128>)
 8002de6:	441a      	add	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f7ff fd62 	bl	80028b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df8:	4b23      	ldr	r3, [pc, #140]	@ (8002e88 <xTaskResumeAll+0x12c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e02:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <xTaskResumeAll+0x130>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e08:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <xTaskResumeAll+0x120>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1cc      	bne.n	8002daa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e16:	f000 f9eb 	bl	80031f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <xTaskResumeAll+0x134>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e26:	f000 f837 	bl	8002e98 <xTaskIncrementTick>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e30:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <xTaskResumeAll+0x130>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f1      	bne.n	8002e26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e42:	4b13      	ldr	r3, [pc, #76]	@ (8002e90 <xTaskResumeAll+0x134>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e48:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <xTaskResumeAll+0x130>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d009      	beq.n	8002e64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <xTaskResumeAll+0x138>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e64:	f000 fd92 	bl	800398c <vPortExitCritical>

	return xAlreadyYielded;
 8002e68:	68bb      	ldr	r3, [r7, #8]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200001bc 	.word	0x200001bc
 8002e78:	20000194 	.word	0x20000194
 8002e7c:	20000154 	.word	0x20000154
 8002e80:	2000019c 	.word	0x2000019c
 8002e84:	20000098 	.word	0x20000098
 8002e88:	20000094 	.word	0x20000094
 8002e8c:	200001a8 	.word	0x200001a8
 8002e90:	200001a4 	.word	0x200001a4
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8002fe0 <xTaskIncrementTick+0x148>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 808f 	bne.w	8002fca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eac:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe4 <xTaskIncrementTick+0x14c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe4 <xTaskIncrementTick+0x14c>)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d121      	bne.n	8002f04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ec0:	4b49      	ldr	r3, [pc, #292]	@ (8002fe8 <xTaskIncrementTick+0x150>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	603b      	str	r3, [r7, #0]
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <xTaskIncrementTick+0x46>
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <xTaskIncrementTick+0x150>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	4b40      	ldr	r3, [pc, #256]	@ (8002fec <xTaskIncrementTick+0x154>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3e      	ldr	r2, [pc, #248]	@ (8002fe8 <xTaskIncrementTick+0x150>)
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8002fec <xTaskIncrementTick+0x154>)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <xTaskIncrementTick+0x158>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	4a3c      	ldr	r2, [pc, #240]	@ (8002ff0 <xTaskIncrementTick+0x158>)
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	f000 f976 	bl	80031f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f04:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff4 <xTaskIncrementTick+0x15c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d348      	bcc.n	8002fa0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f0e:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <xTaskIncrementTick+0x150>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f18:	4b36      	ldr	r3, [pc, #216]	@ (8002ff4 <xTaskIncrementTick+0x15c>)
 8002f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1e:	601a      	str	r2, [r3, #0]
					break;
 8002f20:	e03e      	b.n	8002fa0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f22:	4b31      	ldr	r3, [pc, #196]	@ (8002fe8 <xTaskIncrementTick+0x150>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d203      	bcs.n	8002f42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <xTaskIncrementTick+0x15c>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f40:	e02e      	b.n	8002fa0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fd13 	bl	8002972 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	3318      	adds	r3, #24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fd0a 	bl	8002972 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	2201      	movs	r2, #1
 8002f64:	409a      	lsls	r2, r3
 8002f66:	4b24      	ldr	r3, [pc, #144]	@ (8002ff8 <xTaskIncrementTick+0x160>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <xTaskIncrementTick+0x160>)
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ffc <xTaskIncrementTick+0x164>)
 8002f7e:	441a      	add	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7ff fc96 	bl	80028b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <xTaskIncrementTick+0x168>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3b9      	bcc.n	8002f0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f9e:	e7b6      	b.n	8002f0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fa0:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <xTaskIncrementTick+0x168>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa6:	4915      	ldr	r1, [pc, #84]	@ (8002ffc <xTaskIncrementTick+0x164>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d901      	bls.n	8002fbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <xTaskIncrementTick+0x16c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e004      	b.n	8002fd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002fca:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <xTaskIncrementTick+0x170>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003008 <xTaskIncrementTick+0x170>)
 8002fd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002fd4:	697b      	ldr	r3, [r7, #20]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200001bc 	.word	0x200001bc
 8002fe4:	20000198 	.word	0x20000198
 8002fe8:	2000014c 	.word	0x2000014c
 8002fec:	20000150 	.word	0x20000150
 8002ff0:	200001ac 	.word	0x200001ac
 8002ff4:	200001b4 	.word	0x200001b4
 8002ff8:	2000019c 	.word	0x2000019c
 8002ffc:	20000098 	.word	0x20000098
 8003000:	20000094 	.word	0x20000094
 8003004:	200001a8 	.word	0x200001a8
 8003008:	200001a4 	.word	0x200001a4

0800300c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003012:	4b27      	ldr	r3, [pc, #156]	@ (80030b0 <vTaskSwitchContext+0xa4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800301a:	4b26      	ldr	r3, [pc, #152]	@ (80030b4 <vTaskSwitchContext+0xa8>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003020:	e040      	b.n	80030a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003022:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <vTaskSwitchContext+0xa8>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003028:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <vTaskSwitchContext+0xac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003036:	7afb      	ldrb	r3, [r7, #11]
 8003038:	f1c3 031f 	rsb	r3, r3, #31
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	491f      	ldr	r1, [pc, #124]	@ (80030bc <vTaskSwitchContext+0xb0>)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	e7fd      	b.n	8003066 <vTaskSwitchContext+0x5a>
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <vTaskSwitchContext+0xb0>)
 8003076:	4413      	add	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3308      	adds	r3, #8
 800308c:	429a      	cmp	r2, r3
 800308e:	d104      	bne.n	800309a <vTaskSwitchContext+0x8e>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a07      	ldr	r2, [pc, #28]	@ (80030c0 <vTaskSwitchContext+0xb4>)
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	200001bc 	.word	0x200001bc
 80030b4:	200001a8 	.word	0x200001a8
 80030b8:	2000019c 	.word	0x2000019c
 80030bc:	20000098 	.word	0x20000098
 80030c0:	20000094 	.word	0x20000094

080030c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030cc:	f000 f852 	bl	8003174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030d0:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <prvIdleTask+0x28>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d9f9      	bls.n	80030cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <prvIdleTask+0x2c>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030e8:	e7f0      	b.n	80030cc <prvIdleTask+0x8>
 80030ea:	bf00      	nop
 80030ec:	20000098 	.word	0x20000098
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	e00c      	b.n	800311a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4a12      	ldr	r2, [pc, #72]	@ (8003154 <prvInitialiseTaskLists+0x60>)
 800310c:	4413      	add	r3, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fba5 	bl	800285e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3301      	adds	r3, #1
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d9ef      	bls.n	8003100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003120:	480d      	ldr	r0, [pc, #52]	@ (8003158 <prvInitialiseTaskLists+0x64>)
 8003122:	f7ff fb9c 	bl	800285e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003126:	480d      	ldr	r0, [pc, #52]	@ (800315c <prvInitialiseTaskLists+0x68>)
 8003128:	f7ff fb99 	bl	800285e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800312c:	480c      	ldr	r0, [pc, #48]	@ (8003160 <prvInitialiseTaskLists+0x6c>)
 800312e:	f7ff fb96 	bl	800285e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003132:	480c      	ldr	r0, [pc, #48]	@ (8003164 <prvInitialiseTaskLists+0x70>)
 8003134:	f7ff fb93 	bl	800285e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003138:	480b      	ldr	r0, [pc, #44]	@ (8003168 <prvInitialiseTaskLists+0x74>)
 800313a:	f7ff fb90 	bl	800285e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <prvInitialiseTaskLists+0x78>)
 8003140:	4a05      	ldr	r2, [pc, #20]	@ (8003158 <prvInitialiseTaskLists+0x64>)
 8003142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003144:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <prvInitialiseTaskLists+0x7c>)
 8003146:	4a05      	ldr	r2, [pc, #20]	@ (800315c <prvInitialiseTaskLists+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000098 	.word	0x20000098
 8003158:	20000124 	.word	0x20000124
 800315c:	20000138 	.word	0x20000138
 8003160:	20000154 	.word	0x20000154
 8003164:	20000168 	.word	0x20000168
 8003168:	20000180 	.word	0x20000180
 800316c:	2000014c 	.word	0x2000014c
 8003170:	20000150 	.word	0x20000150

08003174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800317a:	e019      	b.n	80031b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800317c:	f000 fbd4 	bl	8003928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003180:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <prvCheckTasksWaitingTermination+0x50>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fbf0 	bl	8002972 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <prvCheckTasksWaitingTermination+0x54>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3b01      	subs	r3, #1
 8003198:	4a0b      	ldr	r2, [pc, #44]	@ (80031c8 <prvCheckTasksWaitingTermination+0x54>)
 800319a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <prvCheckTasksWaitingTermination+0x58>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	4a0a      	ldr	r2, [pc, #40]	@ (80031cc <prvCheckTasksWaitingTermination+0x58>)
 80031a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031a6:	f000 fbf1 	bl	800398c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f810 	bl	80031d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <prvCheckTasksWaitingTermination+0x58>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e1      	bne.n	800317c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000168 	.word	0x20000168
 80031c8:	20000194 	.word	0x20000194
 80031cc:	2000017c 	.word	0x2000017c

080031d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f979 	bl	80034d4 <vPortFree>
			vPortFree( pxTCB );
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f976 	bl	80034d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <prvResetNextTaskUnblockTime+0x38>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <prvResetNextTaskUnblockTime+0x3c>)
 8003202:	f04f 32ff 	mov.w	r2, #4294967295
 8003206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003208:	e008      	b.n	800321c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320a:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <prvResetNextTaskUnblockTime+0x38>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a04      	ldr	r2, [pc, #16]	@ (800322c <prvResetNextTaskUnblockTime+0x3c>)
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	2000014c 	.word	0x2000014c
 800322c:	200001b4 	.word	0x200001b4

08003230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003236:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <xTaskGetSchedulerState+0x34>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800323e:	2301      	movs	r3, #1
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	e008      	b.n	8003256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003244:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <xTaskGetSchedulerState+0x38>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800324c:	2302      	movs	r3, #2
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	e001      	b.n	8003256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003256:	687b      	ldr	r3, [r7, #4]
	}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	200001a0 	.word	0x200001a0
 8003268:	200001bc 	.word	0x200001bc

0800326c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003276:	4b29      	ldr	r3, [pc, #164]	@ (800331c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800327c:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3304      	adds	r3, #4
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb75 	bl	8002972 <uxListRemove>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800328e:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	2201      	movs	r2, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4013      	ands	r3, r2
 80032a2:	4a20      	ldr	r2, [pc, #128]	@ (8003324 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d10a      	bne.n	80032c4 <prvAddCurrentTaskToDelayedList+0x58>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3304      	adds	r3, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	481a      	ldr	r0, [pc, #104]	@ (8003328 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032be:	f7ff fafb 	bl	80028b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032c2:	e026      	b.n	8003312 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032cc:	4b14      	ldr	r3, [pc, #80]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d209      	bcs.n	80032f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032dc:	4b13      	ldr	r3, [pc, #76]	@ (800332c <prvAddCurrentTaskToDelayedList+0xc0>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f7ff fb09 	bl	8002900 <vListInsert>
}
 80032ee:	e010      	b.n	8003312 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <prvAddCurrentTaskToDelayedList+0xc4>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f7ff faff 	bl	8002900 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003302:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d202      	bcs.n	8003312 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800330c:	4a09      	ldr	r2, [pc, #36]	@ (8003334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000198 	.word	0x20000198
 8003320:	20000094 	.word	0x20000094
 8003324:	2000019c 	.word	0x2000019c
 8003328:	20000180 	.word	0x20000180
 800332c:	20000150 	.word	0x20000150
 8003330:	2000014c 	.word	0x2000014c
 8003334:	200001b4 	.word	0x200001b4

08003338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003344:	f7ff fcfc 	bl	8002d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003348:	4b5c      	ldr	r3, [pc, #368]	@ (80034bc <pvPortMalloc+0x184>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003350:	f000 f924 	bl	800359c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003354:	4b5a      	ldr	r3, [pc, #360]	@ (80034c0 <pvPortMalloc+0x188>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 8095 	bne.w	800348c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01e      	beq.n	80033a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003368:	2208      	movs	r2, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f023 0307 	bic.w	r3, r3, #7
 8003380:	3308      	adds	r3, #8
 8003382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <pvPortMalloc+0x6e>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	617b      	str	r3, [r7, #20]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d06f      	beq.n	800348c <pvPortMalloc+0x154>
 80033ac:	4b45      	ldr	r3, [pc, #276]	@ (80034c4 <pvPortMalloc+0x18c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d86a      	bhi.n	800348c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033b6:	4b44      	ldr	r3, [pc, #272]	@ (80034c8 <pvPortMalloc+0x190>)
 80033b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80033ba:	4b43      	ldr	r3, [pc, #268]	@ (80034c8 <pvPortMalloc+0x190>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033c0:	e004      	b.n	80033cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d903      	bls.n	80033de <pvPortMalloc+0xa6>
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f1      	bne.n	80033c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80033de:	4b37      	ldr	r3, [pc, #220]	@ (80034bc <pvPortMalloc+0x184>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d051      	beq.n	800348c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2208      	movs	r2, #8
 80033ee:	4413      	add	r3, r2
 80033f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	2308      	movs	r3, #8
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	429a      	cmp	r2, r3
 8003408:	d920      	bls.n	800344c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00b      	beq.n	8003434 <pvPortMalloc+0xfc>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	613b      	str	r3, [r7, #16]
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003446:	69b8      	ldr	r0, [r7, #24]
 8003448:	f000 f90a 	bl	8003660 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800344c:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <pvPortMalloc+0x18c>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <pvPortMalloc+0x18c>)
 8003458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800345a:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <pvPortMalloc+0x18c>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <pvPortMalloc+0x194>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d203      	bcs.n	800346e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003466:	4b17      	ldr	r3, [pc, #92]	@ (80034c4 <pvPortMalloc+0x18c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <pvPortMalloc+0x194>)
 800346c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <pvPortMalloc+0x188>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	431a      	orrs	r2, r3
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <pvPortMalloc+0x198>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	4a11      	ldr	r2, [pc, #68]	@ (80034d0 <pvPortMalloc+0x198>)
 800348a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800348c:	f7ff fc66 	bl	8002d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <pvPortMalloc+0x17a>
	__asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	60fb      	str	r3, [r7, #12]
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	e7fd      	b.n	80034ae <pvPortMalloc+0x176>
	return pvReturn;
 80034b2:	69fb      	ldr	r3, [r7, #28]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3728      	adds	r7, #40	@ 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	200009c8 	.word	0x200009c8
 80034c0:	200009dc 	.word	0x200009dc
 80034c4:	200009cc 	.word	0x200009cc
 80034c8:	200009c0 	.word	0x200009c0
 80034cc:	200009d0 	.word	0x200009d0
 80034d0:	200009d4 	.word	0x200009d4

080034d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04f      	beq.n	8003586 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034e6:	2308      	movs	r3, #8
 80034e8:	425b      	negs	r3, r3
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4413      	add	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4b25      	ldr	r3, [pc, #148]	@ (8003590 <vPortFree+0xbc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <vPortFree+0x46>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60fb      	str	r3, [r7, #12]
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	e7fd      	b.n	8003516 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <vPortFree+0x66>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	60bb      	str	r3, [r7, #8]
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	e7fd      	b.n	8003536 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <vPortFree+0xbc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01e      	beq.n	8003586 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11a      	bne.n	8003586 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <vPortFree+0xbc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	43db      	mvns	r3, r3
 800355a:	401a      	ands	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003560:	f7ff fbee 	bl	8002d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <vPortFree+0xc0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4413      	add	r3, r2
 800356e:	4a09      	ldr	r2, [pc, #36]	@ (8003594 <vPortFree+0xc0>)
 8003570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003572:	6938      	ldr	r0, [r7, #16]
 8003574:	f000 f874 	bl	8003660 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003578:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <vPortFree+0xc4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	4a06      	ldr	r2, [pc, #24]	@ (8003598 <vPortFree+0xc4>)
 8003580:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003582:	f7ff fbeb 	bl	8002d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200009dc 	.word	0x200009dc
 8003594:	200009cc 	.word	0x200009cc
 8003598:	200009d8 	.word	0x200009d8

0800359c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80035a8:	4b27      	ldr	r3, [pc, #156]	@ (8003648 <prvHeapInit+0xac>)
 80035aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3307      	adds	r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0307 	bic.w	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <prvHeapInit+0xac>)
 80035cc:	4413      	add	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035d4:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <prvHeapInit+0xb0>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80035da:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <prvHeapInit+0xb0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4413      	add	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80035e8:	2208      	movs	r2, #8
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a15      	ldr	r2, [pc, #84]	@ (8003650 <prvHeapInit+0xb4>)
 80035fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <prvHeapInit+0xb4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003606:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <prvHeapInit+0xb4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	1ad2      	subs	r2, r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800361c:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <prvHeapInit+0xb4>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <prvHeapInit+0xb8>)
 800362a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a09      	ldr	r2, [pc, #36]	@ (8003658 <prvHeapInit+0xbc>)
 8003632:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003634:	4b09      	ldr	r3, [pc, #36]	@ (800365c <prvHeapInit+0xc0>)
 8003636:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	200001c0 	.word	0x200001c0
 800364c:	200009c0 	.word	0x200009c0
 8003650:	200009c8 	.word	0x200009c8
 8003654:	200009d0 	.word	0x200009d0
 8003658:	200009cc 	.word	0x200009cc
 800365c:	200009dc 	.word	0x200009dc

08003660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003668:	4b28      	ldr	r3, [pc, #160]	@ (800370c <prvInsertBlockIntoFreeList+0xac>)
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e002      	b.n	8003674 <prvInsertBlockIntoFreeList+0x14>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d8f7      	bhi.n	800366e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d108      	bne.n	80036a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	441a      	add	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	441a      	add	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d118      	bne.n	80036e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <prvInsertBlockIntoFreeList+0xb0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d00d      	beq.n	80036de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e008      	b.n	80036f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80036de:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <prvInsertBlockIntoFreeList+0xb0>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e003      	b.n	80036f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d002      	beq.n	80036fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	200009c0 	.word	0x200009c0
 8003710:	200009c8 	.word	0x200009c8

08003714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b04      	subs	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800372c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3b04      	subs	r3, #4
 8003732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0201 	bic.w	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b04      	subs	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003744:	4a0c      	ldr	r2, [pc, #48]	@ (8003778 <pxPortInitialiseStack+0x64>)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3b14      	subs	r3, #20
 800374e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b04      	subs	r3, #4
 800375a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f06f 0202 	mvn.w	r2, #2
 8003762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3b20      	subs	r3, #32
 8003768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800376a:	68fb      	ldr	r3, [r7, #12]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	0800377d 	.word	0x0800377d

0800377c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003786:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <prvTaskExitError+0x58>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d00b      	beq.n	80037a8 <prvTaskExitError+0x2c>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	60fb      	str	r3, [r7, #12]
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <prvTaskExitError+0x28>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	60bb      	str	r3, [r7, #8]
}
 80037ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80037bc:	bf00      	nop
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0fc      	beq.n	80037be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000020 	.word	0x20000020
	...

080037e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037e0:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <pxCurrentTCBConst2>)
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	6808      	ldr	r0, [r1, #0]
 80037e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ea:	f380 8809 	msr	PSP, r0
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8811 	msr	BASEPRI, r0
 80037fa:	4770      	bx	lr
 80037fc:	f3af 8000 	nop.w

08003800 <pxCurrentTCBConst2>:
 8003800:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop

08003808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003808:	4808      	ldr	r0, [pc, #32]	@ (800382c <prvPortStartFirstTask+0x24>)
 800380a:	6800      	ldr	r0, [r0, #0]
 800380c:	6800      	ldr	r0, [r0, #0]
 800380e:	f380 8808 	msr	MSP, r0
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f380 8814 	msr	CONTROL, r0
 800381a:	b662      	cpsie	i
 800381c:	b661      	cpsie	f
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	df00      	svc	0
 8003828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800382a:	bf00      	nop
 800382c:	e000ed08 	.word	0xe000ed08

08003830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003836:	4b36      	ldr	r3, [pc, #216]	@ (8003910 <xPortStartScheduler+0xe0>)
 8003838:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	22ff      	movs	r2, #255	@ 0xff
 8003846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4b2e      	ldr	r3, [pc, #184]	@ (8003914 <xPortStartScheduler+0xe4>)
 800385c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800385e:	4b2e      	ldr	r3, [pc, #184]	@ (8003918 <xPortStartScheduler+0xe8>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003864:	e009      	b.n	800387a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003866:	4b2c      	ldr	r3, [pc, #176]	@ (8003918 <xPortStartScheduler+0xe8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3b01      	subs	r3, #1
 800386c:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <xPortStartScheduler+0xe8>)
 800386e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003882:	2b80      	cmp	r3, #128	@ 0x80
 8003884:	d0ef      	beq.n	8003866 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003886:	4b24      	ldr	r3, [pc, #144]	@ (8003918 <xPortStartScheduler+0xe8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1c3 0307 	rsb	r3, r3, #7
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00b      	beq.n	80038aa <xPortStartScheduler+0x7a>
	__asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	60bb      	str	r3, [r7, #8]
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	e7fd      	b.n	80038a6 <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <xPortStartScheduler+0xe8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <xPortStartScheduler+0xe8>)
 80038b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038b4:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <xPortStartScheduler+0xe8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038bc:	4a16      	ldr	r2, [pc, #88]	@ (8003918 <xPortStartScheduler+0xe8>)
 80038be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038c8:	4b14      	ldr	r3, [pc, #80]	@ (800391c <xPortStartScheduler+0xec>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a13      	ldr	r2, [pc, #76]	@ (800391c <xPortStartScheduler+0xec>)
 80038ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038d4:	4b11      	ldr	r3, [pc, #68]	@ (800391c <xPortStartScheduler+0xec>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a10      	ldr	r2, [pc, #64]	@ (800391c <xPortStartScheduler+0xec>)
 80038da:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80038de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038e0:	f000 f8d4 	bl	8003a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <xPortStartScheduler+0xf0>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038ea:	f000 f8f3 	bl	8003ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <xPortStartScheduler+0xf4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003924 <xPortStartScheduler+0xf4>)
 80038f4:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80038f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038fa:	f7ff ff85 	bl	8003808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038fe:	f7ff fb85 	bl	800300c <vTaskSwitchContext>
	prvTaskExitError();
 8003902:	f7ff ff3b 	bl	800377c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	e000e400 	.word	0xe000e400
 8003914:	200009e0 	.word	0x200009e0
 8003918:	200009e4 	.word	0x200009e4
 800391c:	e000ed20 	.word	0xe000ed20
 8003920:	20000020 	.word	0x20000020
 8003924:	e000ef34 	.word	0xe000ef34

08003928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	607b      	str	r3, [r7, #4]
}
 8003940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003942:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <vPortEnterCritical+0x5c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	4a0e      	ldr	r2, [pc, #56]	@ (8003984 <vPortEnterCritical+0x5c>)
 800394a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800394c:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <vPortEnterCritical+0x5c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d110      	bne.n	8003976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <vPortEnterCritical+0x60>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <vPortEnterCritical+0x4e>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	603b      	str	r3, [r7, #0]
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <vPortEnterCritical+0x4a>
	}
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000020 	.word	0x20000020
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003992:	4b12      	ldr	r3, [pc, #72]	@ (80039dc <vPortExitCritical+0x50>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <vPortExitCritical+0x26>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	607b      	str	r3, [r7, #4]
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	e7fd      	b.n	80039ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039b2:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <vPortExitCritical+0x50>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	4a08      	ldr	r2, [pc, #32]	@ (80039dc <vPortExitCritical+0x50>)
 80039ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039bc:	4b07      	ldr	r3, [pc, #28]	@ (80039dc <vPortExitCritical+0x50>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <vPortExitCritical+0x44>
 80039c4:	2300      	movs	r3, #0
 80039c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	20000020 	.word	0x20000020

080039e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039e0:	f3ef 8009 	mrs	r0, PSP
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <pxCurrentTCBConst>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	f01e 0f10 	tst.w	lr, #16
 80039f0:	bf08      	it	eq
 80039f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80039f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fa:	6010      	str	r0, [r2, #0]
 80039fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003a04:	b672      	cpsid	i
 8003a06:	f380 8811 	msr	BASEPRI, r0
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	b662      	cpsie	i
 8003a14:	f7ff fafa 	bl	800300c <vTaskSwitchContext>
 8003a18:	f04f 0000 	mov.w	r0, #0
 8003a1c:	f380 8811 	msr	BASEPRI, r0
 8003a20:	bc09      	pop	{r0, r3}
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	6808      	ldr	r0, [r1, #0]
 8003a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2a:	f01e 0f10 	tst.w	lr, #16
 8003a2e:	bf08      	it	eq
 8003a30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a34:	f380 8809 	msr	PSP, r0
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop

08003a40 <pxCurrentTCBConst>:
 8003a40:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop

08003a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	607b      	str	r3, [r7, #4]
}
 8003a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a62:	f7ff fa19 	bl	8002e98 <xTaskIncrementTick>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <xPortSysTickHandler+0x40>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	2300      	movs	r3, #0
 8003a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	f383 8811 	msr	BASEPRI, r3
}
 8003a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <vPortSetupTimerInterrupt+0x34>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <vPortSetupTimerInterrupt+0x38>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <vPortSetupTimerInterrupt+0x3c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <vPortSetupTimerInterrupt+0x40>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <vPortSetupTimerInterrupt+0x44>)
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003aae:	4b04      	ldr	r3, [pc, #16]	@ (8003ac0 <vPortSetupTimerInterrupt+0x34>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e010 	.word	0xe000e010
 8003ac4:	e000e018 	.word	0xe000e018
 8003ac8:	20000010 	.word	0x20000010
 8003acc:	10624dd3 	.word	0x10624dd3
 8003ad0:	e000e014 	.word	0xe000e014

08003ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003ae4 <vPortEnableVFP+0x10>
 8003ad8:	6801      	ldr	r1, [r0, #0]
 8003ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003ade:	6001      	str	r1, [r0, #0]
 8003ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ae2:	bf00      	nop
 8003ae4:	e000ed88 	.word	0xe000ed88

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	@ (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	@ (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 f818 	bl	8003b40 <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08003ba4 	.word	0x08003ba4
 8003b34:	08003ba4 	.word	0x08003ba4
 8003b38:	08003ba4 	.word	0x08003ba4
 8003b3c:	08003ba8 	.word	0x08003ba8

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
