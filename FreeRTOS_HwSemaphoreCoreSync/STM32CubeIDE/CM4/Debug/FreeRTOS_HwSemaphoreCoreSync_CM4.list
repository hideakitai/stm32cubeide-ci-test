
FreeRTOS_HwSemaphoreCoreSync_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b4  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08103654  08103654  00004654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081036a0  081036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081036a4  081036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  10000000  081036a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000978  10000024  081036cc  00005024  2**2
                  ALLOC
  7 ._user_heap_stack 00000c04  1000099c  081036cc  0000599c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e79c  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002713  00000000  00000000  000137f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000df8  00000000  00000000  00015f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a80  00000000  00000000  00016d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00040aec  00000000  00000000  00017780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000eed9  00000000  00000000  0005826c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001ab923  00000000  00000000  00067145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00212a68  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003834  00000000  00000000  00212aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000009a  00000000  00000000  002162e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000024 	.word	0x10000024
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810363c 	.word	0x0810363c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000028 	.word	0x10000028
 81002dc:	0810363c 	.word	0x0810363c

081002e0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 81002e0:	b5b0      	push	{r4, r5, r7, lr}
 81002e2:	b088      	sub	sp, #32
 81002e4:	af00      	add	r7, sp, #0

  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81002e6:	4b2e      	ldr	r3, [pc, #184]	@ (81003a0 <main+0xc0>)
 81002e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81002ec:	4a2c      	ldr	r2, [pc, #176]	@ (81003a0 <main+0xc0>)
 81002ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81002f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81002f6:	4b2a      	ldr	r3, [pc, #168]	@ (81003a0 <main+0xc0>)
 81002f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81002fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100300:	607b      	str	r3, [r7, #4]
 8100302:	687b      	ldr	r3, [r7, #4]

  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100304:	2001      	movs	r0, #1
 8100306:	f000 fd0d 	bl	8100d24 <HAL_HSEM_ActivateNotification>

  /* 
    Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
    perform system initialization (system clock config, external memory configuration.. )   
  */
  HAL_PWREx_ClearPendingEvent();
 810030a:	f000 fdb1 	bl	8100e70 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810030e:	2201      	movs	r2, #1
 8100310:	2102      	movs	r1, #2
 8100312:	2000      	movs	r0, #0
 8100314:	f000 fd32 	bl	8100d7c <HAL_PWREx_EnterSTOPMode>

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100318:	4b22      	ldr	r3, [pc, #136]	@ (81003a4 <main+0xc4>)
 810031a:	681b      	ldr	r3, [r3, #0]
 810031c:	091b      	lsrs	r3, r3, #4
 810031e:	f003 030f 	and.w	r3, r3, #15
 8100322:	2b07      	cmp	r3, #7
 8100324:	d108      	bne.n	8100338 <main+0x58>
 8100326:	4b20      	ldr	r3, [pc, #128]	@ (81003a8 <main+0xc8>)
 8100328:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810032c:	4a1e      	ldr	r2, [pc, #120]	@ (81003a8 <main+0xc8>)
 810032e:	f043 0301 	orr.w	r3, r3, #1
 8100332:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100336:	e007      	b.n	8100348 <main+0x68>
 8100338:	4b1b      	ldr	r3, [pc, #108]	@ (81003a8 <main+0xc8>)
 810033a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810033e:	4a1a      	ldr	r2, [pc, #104]	@ (81003a8 <main+0xc8>)
 8100340:	f043 0301 	orr.w	r3, r3, #1
 8100344:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
  */
  HAL_Init();
 8100348:	f000 f934 	bl	81005b4 <HAL_Init>
  /* Add Cortex-M4 user application code here */ 
  /* Configure LED3 */
  BSP_LED_Init(LED3);
 810034c:	2002      	movs	r0, #2
 810034e:	f000 f8b3 	bl	81004b8 <BSP_LED_Init>

  /* Enable HSEM Interrupt */
  HAL_NVIC_SetPriority(HSEM2_IRQn,10, 0);
 8100352:	2200      	movs	r2, #0
 8100354:	210a      	movs	r1, #10
 8100356:	207e      	movs	r0, #126	@ 0x7e
 8100358:	f000 fab7 	bl	81008ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);  
 810035c:	207e      	movs	r0, #126	@ 0x7e
 810035e:	f000 face 	bl	81008fe <HAL_NVIC_EnableIRQ>

  /* Define used semaphore */
  osSemaphoreDef(SEM);
 8100362:	2300      	movs	r3, #0
 8100364:	61fb      	str	r3, [r7, #28]
  
  /* Create the semaphore */
  osSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1);
 8100366:	f107 031c 	add.w	r3, r7, #28
 810036a:	2101      	movs	r1, #1
 810036c:	4618      	mov	r0, r3
 810036e:	f000 ff5f 	bl	8101230 <osSemaphoreCreate>
 8100372:	4603      	mov	r3, r0
 8100374:	4a0d      	ldr	r2, [pc, #52]	@ (81003ac <main+0xcc>)
 8100376:	6013      	str	r3, [r2, #0]
  
  /* Create the Thread that toggle LED1 */
  osThreadDef(CORE2_Thread, CORE2_SemaphoreCoreSync, osPriorityNormal, 0, semtstSTACK_SIZE);
 8100378:	4b0d      	ldr	r3, [pc, #52]	@ (81003b0 <main+0xd0>)
 810037a:	f107 0408 	add.w	r4, r7, #8
 810037e:	461d      	mov	r5, r3
 8100380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100384:	682b      	ldr	r3, [r5, #0]
 8100386:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(CORE2_Thread), (void *) osSemaphore);
 8100388:	4b08      	ldr	r3, [pc, #32]	@ (81003ac <main+0xcc>)
 810038a:	681a      	ldr	r2, [r3, #0]
 810038c:	f107 0308 	add.w	r3, r7, #8
 8100390:	4611      	mov	r1, r2
 8100392:	4618      	mov	r0, r3
 8100394:	f000 ff25 	bl	81011e2 <osThreadCreate>


  /* Start scheduler */
  osKernelStart();
 8100398:	f000 ff1c 	bl	81011d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  for (;;);
 810039c:	bf00      	nop
 810039e:	e7fd      	b.n	810039c <main+0xbc>
 81003a0:	58024400 	.word	0x58024400
 81003a4:	e000ed00 	.word	0xe000ed00
 81003a8:	58026400 	.word	0x58026400
 81003ac:	10000040 	.word	0x10000040
 81003b0:	08103664 	.word	0x08103664

081003b4 <CORE2_SemaphoreCoreSync>:
  * @brief  Semaphore Test.
  * @param  argument: Not used
  * @retval None
  */
static void CORE2_SemaphoreCoreSync(void const *argument)
{ 
 81003b4:	b580      	push	{r7, lr}
 81003b6:	b082      	sub	sp, #8
 81003b8:	af00      	add	r7, sp, #0
 81003ba:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    if (osSemaphore != NULL)
 81003bc:	4b09      	ldr	r3, [pc, #36]	@ (81003e4 <CORE2_SemaphoreCoreSync+0x30>)
 81003be:	681b      	ldr	r3, [r3, #0]
 81003c0:	2b00      	cmp	r3, #0
 81003c2:	d0fb      	beq.n	81003bc <CORE2_SemaphoreCoreSync+0x8>
    {
      /* HSEM Activate Notification*/
      HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));      
 81003c4:	2001      	movs	r0, #1
 81003c6:	f000 fcad 	bl	8100d24 <HAL_HSEM_ActivateNotification>
      /* Try to obtain the semaphore */
      if(osSemaphoreWait(osSemaphore , 0) == osOK)
 81003ca:	4b06      	ldr	r3, [pc, #24]	@ (81003e4 <CORE2_SemaphoreCoreSync+0x30>)
 81003cc:	681b      	ldr	r3, [r3, #0]
 81003ce:	2100      	movs	r1, #0
 81003d0:	4618      	mov	r0, r3
 81003d2:	f000 ff51 	bl	8101278 <osSemaphoreWait>
 81003d6:	4603      	mov	r3, r0
 81003d8:	2b00      	cmp	r3, #0
 81003da:	d1ef      	bne.n	81003bc <CORE2_SemaphoreCoreSync+0x8>
      {
        BSP_LED_Toggle(LED3);
 81003dc:	2002      	movs	r0, #2
 81003de:	f000 f8af 	bl	8100540 <BSP_LED_Toggle>
    if (osSemaphore != NULL)
 81003e2:	e7eb      	b.n	81003bc <CORE2_SemaphoreCoreSync+0x8>
 81003e4:	10000040 	.word	0x10000040

081003e8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81003e8:	b580      	push	{r7, lr}
 81003ea:	b082      	sub	sp, #8
 81003ec:	af00      	add	r7, sp, #0
 81003ee:	6078      	str	r0, [r7, #4]
  if (osSemaphore != NULL)
 81003f0:	4b06      	ldr	r3, [pc, #24]	@ (810040c <HAL_HSEM_FreeCallback+0x24>)
 81003f2:	681b      	ldr	r3, [r3, #0]
 81003f4:	2b00      	cmp	r3, #0
 81003f6:	d004      	beq.n	8100402 <HAL_HSEM_FreeCallback+0x1a>
  {
    osSemaphoreRelease (osSemaphore);
 81003f8:	4b04      	ldr	r3, [pc, #16]	@ (810040c <HAL_HSEM_FreeCallback+0x24>)
 81003fa:	681b      	ldr	r3, [r3, #0]
 81003fc:	4618      	mov	r0, r3
 81003fe:	f000 ff89 	bl	8101314 <osSemaphoreRelease>
  }
  
} 
 8100402:	bf00      	nop
 8100404:	3708      	adds	r7, #8
 8100406:	46bd      	mov	sp, r7
 8100408:	bd80      	pop	{r7, pc}
 810040a:	bf00      	nop
 810040c:	10000040 	.word	0x10000040

08100410 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8100410:	b480      	push	{r7}
 8100412:	af00      	add	r7, sp, #0
}
 8100414:	bf00      	nop
 8100416:	46bd      	mov	sp, r7
 8100418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810041c:	4770      	bx	lr

0810041e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 810041e:	b480      	push	{r7}
 8100420:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8100422:	bf00      	nop
 8100424:	e7fd      	b.n	8100422 <HardFault_Handler+0x4>

08100426 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8100426:	b480      	push	{r7}
 8100428:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 810042a:	bf00      	nop
 810042c:	e7fd      	b.n	810042a <MemManage_Handler+0x4>

0810042e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 810042e:	b480      	push	{r7}
 8100430:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8100432:	bf00      	nop
 8100434:	e7fd      	b.n	8100432 <BusFault_Handler+0x4>

08100436 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8100436:	b480      	push	{r7}
 8100438:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 810043a:	bf00      	nop
 810043c:	e7fd      	b.n	810043a <UsageFault_Handler+0x4>

0810043e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 810043e:	b480      	push	{r7}
 8100440:	af00      	add	r7, sp, #0
}
 8100442:	bf00      	nop
 8100444:	46bd      	mov	sp, r7
 8100446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810044a:	4770      	bx	lr

0810044c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 810044c:	b580      	push	{r7, lr}
 810044e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8100450:	f000 f94c 	bl	81006ec <HAL_IncTick>
}
 8100454:	bf00      	nop
 8100456:	bd80      	pop	{r7, pc}

08100458 <HSEM2_IRQHandler>:
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
void HSEM2_IRQHandler(void)
{
 8100458:	b580      	push	{r7, lr}
 810045a:	af00      	add	r7, sp, #0
  HAL_HSEM_IRQHandler();	  
 810045c:	f000 fc74 	bl	8100d48 <HAL_HSEM_IRQHandler>
}
 8100460:	bf00      	nop
 8100462:	bd80      	pop	{r7, pc}

08100464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810049c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100468:	f000 f888 	bl	810057c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810046c:	480c      	ldr	r0, [pc, #48]	@ (81004a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810046e:	490d      	ldr	r1, [pc, #52]	@ (81004a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100470:	4a0d      	ldr	r2, [pc, #52]	@ (81004a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100474:	e002      	b.n	810047c <LoopCopyDataInit>

08100476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810047a:	3304      	adds	r3, #4

0810047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100480:	d3f9      	bcc.n	8100476 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100482:	4a0a      	ldr	r2, [pc, #40]	@ (81004ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100484:	4c0a      	ldr	r4, [pc, #40]	@ (81004b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100488:	e001      	b.n	810048e <LoopFillZerobss>

0810048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810048c:	3204      	adds	r2, #4

0810048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100490:	d3fb      	bcc.n	810048a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100492:	f003 f8a1 	bl	81035d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100496:	f7ff ff23 	bl	81002e0 <main>
  bx  lr
 810049a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810049c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004a0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004a4:	10000024 	.word	0x10000024
  ldr r2, =_sidata
 81004a8:	081036a8 	.word	0x081036a8
  ldr r2, =_sbss
 81004ac:	10000024 	.word	0x10000024
  ldr r4, =_ebss
 81004b0:	1000099c 	.word	0x1000099c

081004b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81004b4:	e7fe      	b.n	81004b4 <ADC3_IRQHandler>
	...

081004b8 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 81004b8:	b580      	push	{r7, lr}
 81004ba:	b08a      	sub	sp, #40	@ 0x28
 81004bc:	af00      	add	r7, sp, #0
 81004be:	4603      	mov	r3, r0
 81004c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81004c2:	2300      	movs	r3, #0
 81004c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 81004c6:	4b1b      	ldr	r3, [pc, #108]	@ (8100534 <BSP_LED_Init+0x7c>)
 81004c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004cc:	4a19      	ldr	r2, [pc, #100]	@ (8100534 <BSP_LED_Init+0x7c>)
 81004ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81004d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81004d6:	4b17      	ldr	r3, [pc, #92]	@ (8100534 <BSP_LED_Init+0x7c>)
 81004d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81004e0:	60fb      	str	r3, [r7, #12]
 81004e2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 81004e4:	79fb      	ldrb	r3, [r7, #7]
 81004e6:	4a14      	ldr	r2, [pc, #80]	@ (8100538 <BSP_LED_Init+0x80>)
 81004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81004ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81004ee:	2301      	movs	r3, #1
 81004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81004f2:	2301      	movs	r3, #1
 81004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81004f6:	2303      	movs	r3, #3
 81004f8:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 81004fa:	79fb      	ldrb	r3, [r7, #7]
 81004fc:	4a0f      	ldr	r2, [pc, #60]	@ (810053c <BSP_LED_Init+0x84>)
 81004fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100502:	f107 0210 	add.w	r2, r7, #16
 8100506:	4611      	mov	r1, r2
 8100508:	4618      	mov	r0, r3
 810050a:	f000 fa27 	bl	810095c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 810050e:	79fb      	ldrb	r3, [r7, #7]
 8100510:	4a0a      	ldr	r2, [pc, #40]	@ (810053c <BSP_LED_Init+0x84>)
 8100512:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8100516:	79fb      	ldrb	r3, [r7, #7]
 8100518:	4a07      	ldr	r2, [pc, #28]	@ (8100538 <BSP_LED_Init+0x80>)
 810051a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810051e:	b29b      	uxth	r3, r3
 8100520:	2201      	movs	r2, #1
 8100522:	4619      	mov	r1, r3
 8100524:	f000 fbca 	bl	8100cbc <HAL_GPIO_WritePin>
 return ret;
 8100528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810052a:	4618      	mov	r0, r3
 810052c:	3728      	adds	r7, #40	@ 0x28
 810052e:	46bd      	mov	sp, r7
 8100530:	bd80      	pop	{r7, pc}
 8100532:	bf00      	nop
 8100534:	58024400 	.word	0x58024400
 8100538:	08103680 	.word	0x08103680
 810053c:	10000000 	.word	0x10000000

08100540 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 8100540:	b580      	push	{r7, lr}
 8100542:	b084      	sub	sp, #16
 8100544:	af00      	add	r7, sp, #0
 8100546:	4603      	mov	r3, r0
 8100548:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 810054a:	2300      	movs	r3, #0
 810054c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 810054e:	79fb      	ldrb	r3, [r7, #7]
 8100550:	4a08      	ldr	r2, [pc, #32]	@ (8100574 <BSP_LED_Toggle+0x34>)
 8100552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100556:	79fb      	ldrb	r3, [r7, #7]
 8100558:	4907      	ldr	r1, [pc, #28]	@ (8100578 <BSP_LED_Toggle+0x38>)
 810055a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 810055e:	b29b      	uxth	r3, r3
 8100560:	4619      	mov	r1, r3
 8100562:	4610      	mov	r0, r2
 8100564:	f000 fbc3 	bl	8100cee <HAL_GPIO_TogglePin>
  return ret;
 8100568:	68fb      	ldr	r3, [r7, #12]
}
 810056a:	4618      	mov	r0, r3
 810056c:	3710      	adds	r7, #16
 810056e:	46bd      	mov	sp, r7
 8100570:	bd80      	pop	{r7, pc}
 8100572:	bf00      	nop
 8100574:	10000000 	.word	0x10000000
 8100578:	08103680 	.word	0x08103680

0810057c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 810057c:	b480      	push	{r7}
 810057e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100580:	4b0b      	ldr	r3, [pc, #44]	@ (81005b0 <SystemInit+0x34>)
 8100582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100586:	4a0a      	ldr	r2, [pc, #40]	@ (81005b0 <SystemInit+0x34>)
 8100588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810058c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100590:	4b07      	ldr	r3, [pc, #28]	@ (81005b0 <SystemInit+0x34>)
 8100592:	691b      	ldr	r3, [r3, #16]
 8100594:	4a06      	ldr	r2, [pc, #24]	@ (81005b0 <SystemInit+0x34>)
 8100596:	f043 0310 	orr.w	r3, r3, #16
 810059a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810059c:	4b04      	ldr	r3, [pc, #16]	@ (81005b0 <SystemInit+0x34>)
 810059e:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 81005a2:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 81005a4:	bf00      	nop
 81005a6:	46bd      	mov	sp, r7
 81005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ac:	4770      	bx	lr
 81005ae:	bf00      	nop
 81005b0:	e000ed00 	.word	0xe000ed00

081005b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81005b4:	b580      	push	{r7, lr}
 81005b6:	b082      	sub	sp, #8
 81005b8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81005ba:	4b28      	ldr	r3, [pc, #160]	@ (810065c <HAL_Init+0xa8>)
 81005bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81005c0:	4a26      	ldr	r2, [pc, #152]	@ (810065c <HAL_Init+0xa8>)
 81005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81005c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81005ca:	4b24      	ldr	r3, [pc, #144]	@ (810065c <HAL_Init+0xa8>)
 81005cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81005d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81005d4:	603b      	str	r3, [r7, #0]
 81005d6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81005d8:	4b21      	ldr	r3, [pc, #132]	@ (8100660 <HAL_Init+0xac>)
 81005da:	681b      	ldr	r3, [r3, #0]
 81005dc:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81005e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81005e4:	4a1e      	ldr	r2, [pc, #120]	@ (8100660 <HAL_Init+0xac>)
 81005e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81005ea:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8100660 <HAL_Init+0xac>)
 81005ee:	681b      	ldr	r3, [r3, #0]
 81005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8100660 <HAL_Init+0xac>)
 81005f2:	f043 0301 	orr.w	r3, r3, #1
 81005f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81005f8:	2003      	movs	r0, #3
 81005fa:	f000 f95b 	bl	81008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81005fe:	f000 fc45 	bl	8100e8c <HAL_RCC_GetSysClockFreq>
 8100602:	4602      	mov	r2, r0
 8100604:	4b15      	ldr	r3, [pc, #84]	@ (810065c <HAL_Init+0xa8>)
 8100606:	699b      	ldr	r3, [r3, #24]
 8100608:	0a1b      	lsrs	r3, r3, #8
 810060a:	f003 030f 	and.w	r3, r3, #15
 810060e:	4915      	ldr	r1, [pc, #84]	@ (8100664 <HAL_Init+0xb0>)
 8100610:	5ccb      	ldrb	r3, [r1, r3]
 8100612:	f003 031f 	and.w	r3, r3, #31
 8100616:	fa22 f303 	lsr.w	r3, r2, r3
 810061a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810061c:	4b0f      	ldr	r3, [pc, #60]	@ (810065c <HAL_Init+0xa8>)
 810061e:	699b      	ldr	r3, [r3, #24]
 8100620:	f003 030f 	and.w	r3, r3, #15
 8100624:	4a0f      	ldr	r2, [pc, #60]	@ (8100664 <HAL_Init+0xb0>)
 8100626:	5cd3      	ldrb	r3, [r2, r3]
 8100628:	f003 031f 	and.w	r3, r3, #31
 810062c:	687a      	ldr	r2, [r7, #4]
 810062e:	fa22 f303 	lsr.w	r3, r2, r3
 8100632:	4a0d      	ldr	r2, [pc, #52]	@ (8100668 <HAL_Init+0xb4>)
 8100634:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100636:	4b0c      	ldr	r3, [pc, #48]	@ (8100668 <HAL_Init+0xb4>)
 8100638:	681b      	ldr	r3, [r3, #0]
 810063a:	4a0c      	ldr	r2, [pc, #48]	@ (810066c <HAL_Init+0xb8>)
 810063c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810063e:	200f      	movs	r0, #15
 8100640:	f000 f81e 	bl	8100680 <HAL_InitTick>
 8100644:	4603      	mov	r3, r0
 8100646:	2b00      	cmp	r3, #0
 8100648:	d001      	beq.n	810064e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810064a:	2301      	movs	r3, #1
 810064c:	e002      	b.n	8100654 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810064e:	f000 f80f 	bl	8100670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100652:	2300      	movs	r3, #0
}
 8100654:	4618      	mov	r0, r3
 8100656:	3708      	adds	r7, #8
 8100658:	46bd      	mov	sp, r7
 810065a:	bd80      	pop	{r7, pc}
 810065c:	58024400 	.word	0x58024400
 8100660:	40024400 	.word	0x40024400
 8100664:	08103690 	.word	0x08103690
 8100668:	10000014 	.word	0x10000014
 810066c:	10000010 	.word	0x10000010

08100670 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8100670:	b480      	push	{r7}
 8100672:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8100674:	bf00      	nop
 8100676:	46bd      	mov	sp, r7
 8100678:	f85d 7b04 	ldr.w	r7, [sp], #4
 810067c:	4770      	bx	lr
	...

08100680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100680:	b580      	push	{r7, lr}
 8100682:	b082      	sub	sp, #8
 8100684:	af00      	add	r7, sp, #0
 8100686:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100688:	4b15      	ldr	r3, [pc, #84]	@ (81006e0 <HAL_InitTick+0x60>)
 810068a:	781b      	ldrb	r3, [r3, #0]
 810068c:	2b00      	cmp	r3, #0
 810068e:	d101      	bne.n	8100694 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100690:	2301      	movs	r3, #1
 8100692:	e021      	b.n	81006d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100694:	4b13      	ldr	r3, [pc, #76]	@ (81006e4 <HAL_InitTick+0x64>)
 8100696:	681a      	ldr	r2, [r3, #0]
 8100698:	4b11      	ldr	r3, [pc, #68]	@ (81006e0 <HAL_InitTick+0x60>)
 810069a:	781b      	ldrb	r3, [r3, #0]
 810069c:	4619      	mov	r1, r3
 810069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 81006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 81006aa:	4618      	mov	r0, r3
 81006ac:	f000 f935 	bl	810091a <HAL_SYSTICK_Config>
 81006b0:	4603      	mov	r3, r0
 81006b2:	2b00      	cmp	r3, #0
 81006b4:	d001      	beq.n	81006ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81006b6:	2301      	movs	r3, #1
 81006b8:	e00e      	b.n	81006d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81006ba:	687b      	ldr	r3, [r7, #4]
 81006bc:	2b0f      	cmp	r3, #15
 81006be:	d80a      	bhi.n	81006d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81006c0:	2200      	movs	r2, #0
 81006c2:	6879      	ldr	r1, [r7, #4]
 81006c4:	f04f 30ff 	mov.w	r0, #4294967295
 81006c8:	f000 f8ff 	bl	81008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81006cc:	4a06      	ldr	r2, [pc, #24]	@ (81006e8 <HAL_InitTick+0x68>)
 81006ce:	687b      	ldr	r3, [r7, #4]
 81006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81006d2:	2300      	movs	r3, #0
 81006d4:	e000      	b.n	81006d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81006d6:	2301      	movs	r3, #1
}
 81006d8:	4618      	mov	r0, r3
 81006da:	3708      	adds	r7, #8
 81006dc:	46bd      	mov	sp, r7
 81006de:	bd80      	pop	{r7, pc}
 81006e0:	1000001c 	.word	0x1000001c
 81006e4:	10000010 	.word	0x10000010
 81006e8:	10000018 	.word	0x10000018

081006ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81006ec:	b480      	push	{r7}
 81006ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81006f0:	4b06      	ldr	r3, [pc, #24]	@ (810070c <HAL_IncTick+0x20>)
 81006f2:	781b      	ldrb	r3, [r3, #0]
 81006f4:	461a      	mov	r2, r3
 81006f6:	4b06      	ldr	r3, [pc, #24]	@ (8100710 <HAL_IncTick+0x24>)
 81006f8:	681b      	ldr	r3, [r3, #0]
 81006fa:	4413      	add	r3, r2
 81006fc:	4a04      	ldr	r2, [pc, #16]	@ (8100710 <HAL_IncTick+0x24>)
 81006fe:	6013      	str	r3, [r2, #0]
}
 8100700:	bf00      	nop
 8100702:	46bd      	mov	sp, r7
 8100704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100708:	4770      	bx	lr
 810070a:	bf00      	nop
 810070c:	1000001c 	.word	0x1000001c
 8100710:	10000044 	.word	0x10000044

08100714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100714:	b480      	push	{r7}
 8100716:	b085      	sub	sp, #20
 8100718:	af00      	add	r7, sp, #0
 810071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810071c:	687b      	ldr	r3, [r7, #4]
 810071e:	f003 0307 	and.w	r3, r3, #7
 8100722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100724:	4b0c      	ldr	r3, [pc, #48]	@ (8100758 <__NVIC_SetPriorityGrouping+0x44>)
 8100726:	68db      	ldr	r3, [r3, #12]
 8100728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810072a:	68ba      	ldr	r2, [r7, #8]
 810072c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100730:	4013      	ands	r3, r2
 8100732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100734:	68fb      	ldr	r3, [r7, #12]
 8100736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100738:	68bb      	ldr	r3, [r7, #8]
 810073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810073c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100746:	4a04      	ldr	r2, [pc, #16]	@ (8100758 <__NVIC_SetPriorityGrouping+0x44>)
 8100748:	68bb      	ldr	r3, [r7, #8]
 810074a:	60d3      	str	r3, [r2, #12]
}
 810074c:	bf00      	nop
 810074e:	3714      	adds	r7, #20
 8100750:	46bd      	mov	sp, r7
 8100752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100756:	4770      	bx	lr
 8100758:	e000ed00 	.word	0xe000ed00

0810075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810075c:	b480      	push	{r7}
 810075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100760:	4b04      	ldr	r3, [pc, #16]	@ (8100774 <__NVIC_GetPriorityGrouping+0x18>)
 8100762:	68db      	ldr	r3, [r3, #12]
 8100764:	0a1b      	lsrs	r3, r3, #8
 8100766:	f003 0307 	and.w	r3, r3, #7
}
 810076a:	4618      	mov	r0, r3
 810076c:	46bd      	mov	sp, r7
 810076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100772:	4770      	bx	lr
 8100774:	e000ed00 	.word	0xe000ed00

08100778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100778:	b480      	push	{r7}
 810077a:	b083      	sub	sp, #12
 810077c:	af00      	add	r7, sp, #0
 810077e:	4603      	mov	r3, r0
 8100780:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100786:	2b00      	cmp	r3, #0
 8100788:	db0b      	blt.n	81007a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810078a:	88fb      	ldrh	r3, [r7, #6]
 810078c:	f003 021f 	and.w	r2, r3, #31
 8100790:	4907      	ldr	r1, [pc, #28]	@ (81007b0 <__NVIC_EnableIRQ+0x38>)
 8100792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100796:	095b      	lsrs	r3, r3, #5
 8100798:	2001      	movs	r0, #1
 810079a:	fa00 f202 	lsl.w	r2, r0, r2
 810079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81007a2:	bf00      	nop
 81007a4:	370c      	adds	r7, #12
 81007a6:	46bd      	mov	sp, r7
 81007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007ac:	4770      	bx	lr
 81007ae:	bf00      	nop
 81007b0:	e000e100 	.word	0xe000e100

081007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81007b4:	b480      	push	{r7}
 81007b6:	b083      	sub	sp, #12
 81007b8:	af00      	add	r7, sp, #0
 81007ba:	4603      	mov	r3, r0
 81007bc:	6039      	str	r1, [r7, #0]
 81007be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81007c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007c4:	2b00      	cmp	r3, #0
 81007c6:	db0a      	blt.n	81007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007c8:	683b      	ldr	r3, [r7, #0]
 81007ca:	b2da      	uxtb	r2, r3
 81007cc:	490c      	ldr	r1, [pc, #48]	@ (8100800 <__NVIC_SetPriority+0x4c>)
 81007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007d2:	0112      	lsls	r2, r2, #4
 81007d4:	b2d2      	uxtb	r2, r2
 81007d6:	440b      	add	r3, r1
 81007d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81007dc:	e00a      	b.n	81007f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007de:	683b      	ldr	r3, [r7, #0]
 81007e0:	b2da      	uxtb	r2, r3
 81007e2:	4908      	ldr	r1, [pc, #32]	@ (8100804 <__NVIC_SetPriority+0x50>)
 81007e4:	88fb      	ldrh	r3, [r7, #6]
 81007e6:	f003 030f 	and.w	r3, r3, #15
 81007ea:	3b04      	subs	r3, #4
 81007ec:	0112      	lsls	r2, r2, #4
 81007ee:	b2d2      	uxtb	r2, r2
 81007f0:	440b      	add	r3, r1
 81007f2:	761a      	strb	r2, [r3, #24]
}
 81007f4:	bf00      	nop
 81007f6:	370c      	adds	r7, #12
 81007f8:	46bd      	mov	sp, r7
 81007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007fe:	4770      	bx	lr
 8100800:	e000e100 	.word	0xe000e100
 8100804:	e000ed00 	.word	0xe000ed00

08100808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100808:	b480      	push	{r7}
 810080a:	b089      	sub	sp, #36	@ 0x24
 810080c:	af00      	add	r7, sp, #0
 810080e:	60f8      	str	r0, [r7, #12]
 8100810:	60b9      	str	r1, [r7, #8]
 8100812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100814:	68fb      	ldr	r3, [r7, #12]
 8100816:	f003 0307 	and.w	r3, r3, #7
 810081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810081c:	69fb      	ldr	r3, [r7, #28]
 810081e:	f1c3 0307 	rsb	r3, r3, #7
 8100822:	2b04      	cmp	r3, #4
 8100824:	bf28      	it	cs
 8100826:	2304      	movcs	r3, #4
 8100828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810082a:	69fb      	ldr	r3, [r7, #28]
 810082c:	3304      	adds	r3, #4
 810082e:	2b06      	cmp	r3, #6
 8100830:	d902      	bls.n	8100838 <NVIC_EncodePriority+0x30>
 8100832:	69fb      	ldr	r3, [r7, #28]
 8100834:	3b03      	subs	r3, #3
 8100836:	e000      	b.n	810083a <NVIC_EncodePriority+0x32>
 8100838:	2300      	movs	r3, #0
 810083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810083c:	f04f 32ff 	mov.w	r2, #4294967295
 8100840:	69bb      	ldr	r3, [r7, #24]
 8100842:	fa02 f303 	lsl.w	r3, r2, r3
 8100846:	43da      	mvns	r2, r3
 8100848:	68bb      	ldr	r3, [r7, #8]
 810084a:	401a      	ands	r2, r3
 810084c:	697b      	ldr	r3, [r7, #20]
 810084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100850:	f04f 31ff 	mov.w	r1, #4294967295
 8100854:	697b      	ldr	r3, [r7, #20]
 8100856:	fa01 f303 	lsl.w	r3, r1, r3
 810085a:	43d9      	mvns	r1, r3
 810085c:	687b      	ldr	r3, [r7, #4]
 810085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100860:	4313      	orrs	r3, r2
         );
}
 8100862:	4618      	mov	r0, r3
 8100864:	3724      	adds	r7, #36	@ 0x24
 8100866:	46bd      	mov	sp, r7
 8100868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810086c:	4770      	bx	lr
	...

08100870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100870:	b580      	push	{r7, lr}
 8100872:	b082      	sub	sp, #8
 8100874:	af00      	add	r7, sp, #0
 8100876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100878:	687b      	ldr	r3, [r7, #4]
 810087a:	3b01      	subs	r3, #1
 810087c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100880:	d301      	bcc.n	8100886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100882:	2301      	movs	r3, #1
 8100884:	e00f      	b.n	81008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100886:	4a0a      	ldr	r2, [pc, #40]	@ (81008b0 <SysTick_Config+0x40>)
 8100888:	687b      	ldr	r3, [r7, #4]
 810088a:	3b01      	subs	r3, #1
 810088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810088e:	210f      	movs	r1, #15
 8100890:	f04f 30ff 	mov.w	r0, #4294967295
 8100894:	f7ff ff8e 	bl	81007b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100898:	4b05      	ldr	r3, [pc, #20]	@ (81008b0 <SysTick_Config+0x40>)
 810089a:	2200      	movs	r2, #0
 810089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810089e:	4b04      	ldr	r3, [pc, #16]	@ (81008b0 <SysTick_Config+0x40>)
 81008a0:	2207      	movs	r2, #7
 81008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81008a4:	2300      	movs	r3, #0
}
 81008a6:	4618      	mov	r0, r3
 81008a8:	3708      	adds	r7, #8
 81008aa:	46bd      	mov	sp, r7
 81008ac:	bd80      	pop	{r7, pc}
 81008ae:	bf00      	nop
 81008b0:	e000e010 	.word	0xe000e010

081008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81008b4:	b580      	push	{r7, lr}
 81008b6:	b082      	sub	sp, #8
 81008b8:	af00      	add	r7, sp, #0
 81008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81008bc:	6878      	ldr	r0, [r7, #4]
 81008be:	f7ff ff29 	bl	8100714 <__NVIC_SetPriorityGrouping>
}
 81008c2:	bf00      	nop
 81008c4:	3708      	adds	r7, #8
 81008c6:	46bd      	mov	sp, r7
 81008c8:	bd80      	pop	{r7, pc}

081008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81008ca:	b580      	push	{r7, lr}
 81008cc:	b086      	sub	sp, #24
 81008ce:	af00      	add	r7, sp, #0
 81008d0:	4603      	mov	r3, r0
 81008d2:	60b9      	str	r1, [r7, #8]
 81008d4:	607a      	str	r2, [r7, #4]
 81008d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81008d8:	f7ff ff40 	bl	810075c <__NVIC_GetPriorityGrouping>
 81008dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81008de:	687a      	ldr	r2, [r7, #4]
 81008e0:	68b9      	ldr	r1, [r7, #8]
 81008e2:	6978      	ldr	r0, [r7, #20]
 81008e4:	f7ff ff90 	bl	8100808 <NVIC_EncodePriority>
 81008e8:	4602      	mov	r2, r0
 81008ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81008ee:	4611      	mov	r1, r2
 81008f0:	4618      	mov	r0, r3
 81008f2:	f7ff ff5f 	bl	81007b4 <__NVIC_SetPriority>
}
 81008f6:	bf00      	nop
 81008f8:	3718      	adds	r7, #24
 81008fa:	46bd      	mov	sp, r7
 81008fc:	bd80      	pop	{r7, pc}

081008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81008fe:	b580      	push	{r7, lr}
 8100900:	b082      	sub	sp, #8
 8100902:	af00      	add	r7, sp, #0
 8100904:	4603      	mov	r3, r0
 8100906:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810090c:	4618      	mov	r0, r3
 810090e:	f7ff ff33 	bl	8100778 <__NVIC_EnableIRQ>
}
 8100912:	bf00      	nop
 8100914:	3708      	adds	r7, #8
 8100916:	46bd      	mov	sp, r7
 8100918:	bd80      	pop	{r7, pc}

0810091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810091a:	b580      	push	{r7, lr}
 810091c:	b082      	sub	sp, #8
 810091e:	af00      	add	r7, sp, #0
 8100920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100922:	6878      	ldr	r0, [r7, #4]
 8100924:	f7ff ffa4 	bl	8100870 <SysTick_Config>
 8100928:	4603      	mov	r3, r0
}
 810092a:	4618      	mov	r0, r3
 810092c:	3708      	adds	r7, #8
 810092e:	46bd      	mov	sp, r7
 8100930:	bd80      	pop	{r7, pc}
	...

08100934 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100934:	b480      	push	{r7}
 8100936:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100938:	4b07      	ldr	r3, [pc, #28]	@ (8100958 <HAL_GetCurrentCPUID+0x24>)
 810093a:	681b      	ldr	r3, [r3, #0]
 810093c:	091b      	lsrs	r3, r3, #4
 810093e:	f003 030f 	and.w	r3, r3, #15
 8100942:	2b07      	cmp	r3, #7
 8100944:	d101      	bne.n	810094a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100946:	2303      	movs	r3, #3
 8100948:	e000      	b.n	810094c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810094a:	2301      	movs	r3, #1
  }
}
 810094c:	4618      	mov	r0, r3
 810094e:	46bd      	mov	sp, r7
 8100950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100954:	4770      	bx	lr
 8100956:	bf00      	nop
 8100958:	e000ed00 	.word	0xe000ed00

0810095c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810095c:	b480      	push	{r7}
 810095e:	b089      	sub	sp, #36	@ 0x24
 8100960:	af00      	add	r7, sp, #0
 8100962:	6078      	str	r0, [r7, #4]
 8100964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100966:	2300      	movs	r3, #0
 8100968:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810096a:	4b89      	ldr	r3, [pc, #548]	@ (8100b90 <HAL_GPIO_Init+0x234>)
 810096c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810096e:	e194      	b.n	8100c9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100970:	683b      	ldr	r3, [r7, #0]
 8100972:	681a      	ldr	r2, [r3, #0]
 8100974:	2101      	movs	r1, #1
 8100976:	69fb      	ldr	r3, [r7, #28]
 8100978:	fa01 f303 	lsl.w	r3, r1, r3
 810097c:	4013      	ands	r3, r2
 810097e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100980:	693b      	ldr	r3, [r7, #16]
 8100982:	2b00      	cmp	r3, #0
 8100984:	f000 8186 	beq.w	8100c94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100988:	683b      	ldr	r3, [r7, #0]
 810098a:	685b      	ldr	r3, [r3, #4]
 810098c:	f003 0303 	and.w	r3, r3, #3
 8100990:	2b01      	cmp	r3, #1
 8100992:	d005      	beq.n	81009a0 <HAL_GPIO_Init+0x44>
 8100994:	683b      	ldr	r3, [r7, #0]
 8100996:	685b      	ldr	r3, [r3, #4]
 8100998:	f003 0303 	and.w	r3, r3, #3
 810099c:	2b02      	cmp	r3, #2
 810099e:	d130      	bne.n	8100a02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81009a0:	687b      	ldr	r3, [r7, #4]
 81009a2:	689b      	ldr	r3, [r3, #8]
 81009a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81009a6:	69fb      	ldr	r3, [r7, #28]
 81009a8:	005b      	lsls	r3, r3, #1
 81009aa:	2203      	movs	r2, #3
 81009ac:	fa02 f303 	lsl.w	r3, r2, r3
 81009b0:	43db      	mvns	r3, r3
 81009b2:	69ba      	ldr	r2, [r7, #24]
 81009b4:	4013      	ands	r3, r2
 81009b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81009b8:	683b      	ldr	r3, [r7, #0]
 81009ba:	68da      	ldr	r2, [r3, #12]
 81009bc:	69fb      	ldr	r3, [r7, #28]
 81009be:	005b      	lsls	r3, r3, #1
 81009c0:	fa02 f303 	lsl.w	r3, r2, r3
 81009c4:	69ba      	ldr	r2, [r7, #24]
 81009c6:	4313      	orrs	r3, r2
 81009c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81009ca:	687b      	ldr	r3, [r7, #4]
 81009cc:	69ba      	ldr	r2, [r7, #24]
 81009ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81009d0:	687b      	ldr	r3, [r7, #4]
 81009d2:	685b      	ldr	r3, [r3, #4]
 81009d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81009d6:	2201      	movs	r2, #1
 81009d8:	69fb      	ldr	r3, [r7, #28]
 81009da:	fa02 f303 	lsl.w	r3, r2, r3
 81009de:	43db      	mvns	r3, r3
 81009e0:	69ba      	ldr	r2, [r7, #24]
 81009e2:	4013      	ands	r3, r2
 81009e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81009e6:	683b      	ldr	r3, [r7, #0]
 81009e8:	685b      	ldr	r3, [r3, #4]
 81009ea:	091b      	lsrs	r3, r3, #4
 81009ec:	f003 0201 	and.w	r2, r3, #1
 81009f0:	69fb      	ldr	r3, [r7, #28]
 81009f2:	fa02 f303 	lsl.w	r3, r2, r3
 81009f6:	69ba      	ldr	r2, [r7, #24]
 81009f8:	4313      	orrs	r3, r2
 81009fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81009fc:	687b      	ldr	r3, [r7, #4]
 81009fe:	69ba      	ldr	r2, [r7, #24]
 8100a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100a02:	683b      	ldr	r3, [r7, #0]
 8100a04:	685b      	ldr	r3, [r3, #4]
 8100a06:	f003 0303 	and.w	r3, r3, #3
 8100a0a:	2b03      	cmp	r3, #3
 8100a0c:	d017      	beq.n	8100a3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100a0e:	687b      	ldr	r3, [r7, #4]
 8100a10:	68db      	ldr	r3, [r3, #12]
 8100a12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100a14:	69fb      	ldr	r3, [r7, #28]
 8100a16:	005b      	lsls	r3, r3, #1
 8100a18:	2203      	movs	r2, #3
 8100a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a1e:	43db      	mvns	r3, r3
 8100a20:	69ba      	ldr	r2, [r7, #24]
 8100a22:	4013      	ands	r3, r2
 8100a24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100a26:	683b      	ldr	r3, [r7, #0]
 8100a28:	689a      	ldr	r2, [r3, #8]
 8100a2a:	69fb      	ldr	r3, [r7, #28]
 8100a2c:	005b      	lsls	r3, r3, #1
 8100a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a32:	69ba      	ldr	r2, [r7, #24]
 8100a34:	4313      	orrs	r3, r2
 8100a36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100a38:	687b      	ldr	r3, [r7, #4]
 8100a3a:	69ba      	ldr	r2, [r7, #24]
 8100a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100a3e:	683b      	ldr	r3, [r7, #0]
 8100a40:	685b      	ldr	r3, [r3, #4]
 8100a42:	f003 0303 	and.w	r3, r3, #3
 8100a46:	2b02      	cmp	r3, #2
 8100a48:	d123      	bne.n	8100a92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100a4a:	69fb      	ldr	r3, [r7, #28]
 8100a4c:	08da      	lsrs	r2, r3, #3
 8100a4e:	687b      	ldr	r3, [r7, #4]
 8100a50:	3208      	adds	r2, #8
 8100a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100a58:	69fb      	ldr	r3, [r7, #28]
 8100a5a:	f003 0307 	and.w	r3, r3, #7
 8100a5e:	009b      	lsls	r3, r3, #2
 8100a60:	220f      	movs	r2, #15
 8100a62:	fa02 f303 	lsl.w	r3, r2, r3
 8100a66:	43db      	mvns	r3, r3
 8100a68:	69ba      	ldr	r2, [r7, #24]
 8100a6a:	4013      	ands	r3, r2
 8100a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100a6e:	683b      	ldr	r3, [r7, #0]
 8100a70:	691a      	ldr	r2, [r3, #16]
 8100a72:	69fb      	ldr	r3, [r7, #28]
 8100a74:	f003 0307 	and.w	r3, r3, #7
 8100a78:	009b      	lsls	r3, r3, #2
 8100a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a7e:	69ba      	ldr	r2, [r7, #24]
 8100a80:	4313      	orrs	r3, r2
 8100a82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100a84:	69fb      	ldr	r3, [r7, #28]
 8100a86:	08da      	lsrs	r2, r3, #3
 8100a88:	687b      	ldr	r3, [r7, #4]
 8100a8a:	3208      	adds	r2, #8
 8100a8c:	69b9      	ldr	r1, [r7, #24]
 8100a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100a92:	687b      	ldr	r3, [r7, #4]
 8100a94:	681b      	ldr	r3, [r3, #0]
 8100a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100a98:	69fb      	ldr	r3, [r7, #28]
 8100a9a:	005b      	lsls	r3, r3, #1
 8100a9c:	2203      	movs	r2, #3
 8100a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8100aa2:	43db      	mvns	r3, r3
 8100aa4:	69ba      	ldr	r2, [r7, #24]
 8100aa6:	4013      	ands	r3, r2
 8100aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100aaa:	683b      	ldr	r3, [r7, #0]
 8100aac:	685b      	ldr	r3, [r3, #4]
 8100aae:	f003 0203 	and.w	r2, r3, #3
 8100ab2:	69fb      	ldr	r3, [r7, #28]
 8100ab4:	005b      	lsls	r3, r3, #1
 8100ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8100aba:	69ba      	ldr	r2, [r7, #24]
 8100abc:	4313      	orrs	r3, r2
 8100abe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100ac0:	687b      	ldr	r3, [r7, #4]
 8100ac2:	69ba      	ldr	r2, [r7, #24]
 8100ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100ac6:	683b      	ldr	r3, [r7, #0]
 8100ac8:	685b      	ldr	r3, [r3, #4]
 8100aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100ace:	2b00      	cmp	r3, #0
 8100ad0:	f000 80e0 	beq.w	8100c94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8100b94 <HAL_GPIO_Init+0x238>)
 8100ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100ada:	4a2e      	ldr	r2, [pc, #184]	@ (8100b94 <HAL_GPIO_Init+0x238>)
 8100adc:	f043 0302 	orr.w	r3, r3, #2
 8100ae0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8100b94 <HAL_GPIO_Init+0x238>)
 8100ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100aea:	f003 0302 	and.w	r3, r3, #2
 8100aee:	60fb      	str	r3, [r7, #12]
 8100af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100af2:	4a29      	ldr	r2, [pc, #164]	@ (8100b98 <HAL_GPIO_Init+0x23c>)
 8100af4:	69fb      	ldr	r3, [r7, #28]
 8100af6:	089b      	lsrs	r3, r3, #2
 8100af8:	3302      	adds	r3, #2
 8100afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100b00:	69fb      	ldr	r3, [r7, #28]
 8100b02:	f003 0303 	and.w	r3, r3, #3
 8100b06:	009b      	lsls	r3, r3, #2
 8100b08:	220f      	movs	r2, #15
 8100b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100b0e:	43db      	mvns	r3, r3
 8100b10:	69ba      	ldr	r2, [r7, #24]
 8100b12:	4013      	ands	r3, r2
 8100b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100b16:	687b      	ldr	r3, [r7, #4]
 8100b18:	4a20      	ldr	r2, [pc, #128]	@ (8100b9c <HAL_GPIO_Init+0x240>)
 8100b1a:	4293      	cmp	r3, r2
 8100b1c:	d052      	beq.n	8100bc4 <HAL_GPIO_Init+0x268>
 8100b1e:	687b      	ldr	r3, [r7, #4]
 8100b20:	4a1f      	ldr	r2, [pc, #124]	@ (8100ba0 <HAL_GPIO_Init+0x244>)
 8100b22:	4293      	cmp	r3, r2
 8100b24:	d031      	beq.n	8100b8a <HAL_GPIO_Init+0x22e>
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	4a1e      	ldr	r2, [pc, #120]	@ (8100ba4 <HAL_GPIO_Init+0x248>)
 8100b2a:	4293      	cmp	r3, r2
 8100b2c:	d02b      	beq.n	8100b86 <HAL_GPIO_Init+0x22a>
 8100b2e:	687b      	ldr	r3, [r7, #4]
 8100b30:	4a1d      	ldr	r2, [pc, #116]	@ (8100ba8 <HAL_GPIO_Init+0x24c>)
 8100b32:	4293      	cmp	r3, r2
 8100b34:	d025      	beq.n	8100b82 <HAL_GPIO_Init+0x226>
 8100b36:	687b      	ldr	r3, [r7, #4]
 8100b38:	4a1c      	ldr	r2, [pc, #112]	@ (8100bac <HAL_GPIO_Init+0x250>)
 8100b3a:	4293      	cmp	r3, r2
 8100b3c:	d01f      	beq.n	8100b7e <HAL_GPIO_Init+0x222>
 8100b3e:	687b      	ldr	r3, [r7, #4]
 8100b40:	4a1b      	ldr	r2, [pc, #108]	@ (8100bb0 <HAL_GPIO_Init+0x254>)
 8100b42:	4293      	cmp	r3, r2
 8100b44:	d019      	beq.n	8100b7a <HAL_GPIO_Init+0x21e>
 8100b46:	687b      	ldr	r3, [r7, #4]
 8100b48:	4a1a      	ldr	r2, [pc, #104]	@ (8100bb4 <HAL_GPIO_Init+0x258>)
 8100b4a:	4293      	cmp	r3, r2
 8100b4c:	d013      	beq.n	8100b76 <HAL_GPIO_Init+0x21a>
 8100b4e:	687b      	ldr	r3, [r7, #4]
 8100b50:	4a19      	ldr	r2, [pc, #100]	@ (8100bb8 <HAL_GPIO_Init+0x25c>)
 8100b52:	4293      	cmp	r3, r2
 8100b54:	d00d      	beq.n	8100b72 <HAL_GPIO_Init+0x216>
 8100b56:	687b      	ldr	r3, [r7, #4]
 8100b58:	4a18      	ldr	r2, [pc, #96]	@ (8100bbc <HAL_GPIO_Init+0x260>)
 8100b5a:	4293      	cmp	r3, r2
 8100b5c:	d007      	beq.n	8100b6e <HAL_GPIO_Init+0x212>
 8100b5e:	687b      	ldr	r3, [r7, #4]
 8100b60:	4a17      	ldr	r2, [pc, #92]	@ (8100bc0 <HAL_GPIO_Init+0x264>)
 8100b62:	4293      	cmp	r3, r2
 8100b64:	d101      	bne.n	8100b6a <HAL_GPIO_Init+0x20e>
 8100b66:	2309      	movs	r3, #9
 8100b68:	e02d      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b6a:	230a      	movs	r3, #10
 8100b6c:	e02b      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b6e:	2308      	movs	r3, #8
 8100b70:	e029      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b72:	2307      	movs	r3, #7
 8100b74:	e027      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b76:	2306      	movs	r3, #6
 8100b78:	e025      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b7a:	2305      	movs	r3, #5
 8100b7c:	e023      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b7e:	2304      	movs	r3, #4
 8100b80:	e021      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b82:	2303      	movs	r3, #3
 8100b84:	e01f      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b86:	2302      	movs	r3, #2
 8100b88:	e01d      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b8a:	2301      	movs	r3, #1
 8100b8c:	e01b      	b.n	8100bc6 <HAL_GPIO_Init+0x26a>
 8100b8e:	bf00      	nop
 8100b90:	580000c0 	.word	0x580000c0
 8100b94:	58024400 	.word	0x58024400
 8100b98:	58000400 	.word	0x58000400
 8100b9c:	58020000 	.word	0x58020000
 8100ba0:	58020400 	.word	0x58020400
 8100ba4:	58020800 	.word	0x58020800
 8100ba8:	58020c00 	.word	0x58020c00
 8100bac:	58021000 	.word	0x58021000
 8100bb0:	58021400 	.word	0x58021400
 8100bb4:	58021800 	.word	0x58021800
 8100bb8:	58021c00 	.word	0x58021c00
 8100bbc:	58022000 	.word	0x58022000
 8100bc0:	58022400 	.word	0x58022400
 8100bc4:	2300      	movs	r3, #0
 8100bc6:	69fa      	ldr	r2, [r7, #28]
 8100bc8:	f002 0203 	and.w	r2, r2, #3
 8100bcc:	0092      	lsls	r2, r2, #2
 8100bce:	4093      	lsls	r3, r2
 8100bd0:	69ba      	ldr	r2, [r7, #24]
 8100bd2:	4313      	orrs	r3, r2
 8100bd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100bd6:	4938      	ldr	r1, [pc, #224]	@ (8100cb8 <HAL_GPIO_Init+0x35c>)
 8100bd8:	69fb      	ldr	r3, [r7, #28]
 8100bda:	089b      	lsrs	r3, r3, #2
 8100bdc:	3302      	adds	r3, #2
 8100bde:	69ba      	ldr	r2, [r7, #24]
 8100be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100be8:	681b      	ldr	r3, [r3, #0]
 8100bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bec:	693b      	ldr	r3, [r7, #16]
 8100bee:	43db      	mvns	r3, r3
 8100bf0:	69ba      	ldr	r2, [r7, #24]
 8100bf2:	4013      	ands	r3, r2
 8100bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100bf6:	683b      	ldr	r3, [r7, #0]
 8100bf8:	685b      	ldr	r3, [r3, #4]
 8100bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100bfe:	2b00      	cmp	r3, #0
 8100c00:	d003      	beq.n	8100c0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100c02:	69ba      	ldr	r2, [r7, #24]
 8100c04:	693b      	ldr	r3, [r7, #16]
 8100c06:	4313      	orrs	r3, r2
 8100c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100c0e:	69bb      	ldr	r3, [r7, #24]
 8100c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100c16:	685b      	ldr	r3, [r3, #4]
 8100c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c1a:	693b      	ldr	r3, [r7, #16]
 8100c1c:	43db      	mvns	r3, r3
 8100c1e:	69ba      	ldr	r2, [r7, #24]
 8100c20:	4013      	ands	r3, r2
 8100c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100c24:	683b      	ldr	r3, [r7, #0]
 8100c26:	685b      	ldr	r3, [r3, #4]
 8100c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100c2c:	2b00      	cmp	r3, #0
 8100c2e:	d003      	beq.n	8100c38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100c30:	69ba      	ldr	r2, [r7, #24]
 8100c32:	693b      	ldr	r3, [r7, #16]
 8100c34:	4313      	orrs	r3, r2
 8100c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100c3c:	69bb      	ldr	r3, [r7, #24]
 8100c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100c40:	697b      	ldr	r3, [r7, #20]
 8100c42:	685b      	ldr	r3, [r3, #4]
 8100c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c46:	693b      	ldr	r3, [r7, #16]
 8100c48:	43db      	mvns	r3, r3
 8100c4a:	69ba      	ldr	r2, [r7, #24]
 8100c4c:	4013      	ands	r3, r2
 8100c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100c50:	683b      	ldr	r3, [r7, #0]
 8100c52:	685b      	ldr	r3, [r3, #4]
 8100c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100c58:	2b00      	cmp	r3, #0
 8100c5a:	d003      	beq.n	8100c64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100c5c:	69ba      	ldr	r2, [r7, #24]
 8100c5e:	693b      	ldr	r3, [r7, #16]
 8100c60:	4313      	orrs	r3, r2
 8100c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100c64:	697b      	ldr	r3, [r7, #20]
 8100c66:	69ba      	ldr	r2, [r7, #24]
 8100c68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100c6a:	697b      	ldr	r3, [r7, #20]
 8100c6c:	681b      	ldr	r3, [r3, #0]
 8100c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c70:	693b      	ldr	r3, [r7, #16]
 8100c72:	43db      	mvns	r3, r3
 8100c74:	69ba      	ldr	r2, [r7, #24]
 8100c76:	4013      	ands	r3, r2
 8100c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100c7a:	683b      	ldr	r3, [r7, #0]
 8100c7c:	685b      	ldr	r3, [r3, #4]
 8100c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100c82:	2b00      	cmp	r3, #0
 8100c84:	d003      	beq.n	8100c8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100c86:	69ba      	ldr	r2, [r7, #24]
 8100c88:	693b      	ldr	r3, [r7, #16]
 8100c8a:	4313      	orrs	r3, r2
 8100c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100c8e:	697b      	ldr	r3, [r7, #20]
 8100c90:	69ba      	ldr	r2, [r7, #24]
 8100c92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100c94:	69fb      	ldr	r3, [r7, #28]
 8100c96:	3301      	adds	r3, #1
 8100c98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100c9a:	683b      	ldr	r3, [r7, #0]
 8100c9c:	681a      	ldr	r2, [r3, #0]
 8100c9e:	69fb      	ldr	r3, [r7, #28]
 8100ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8100ca4:	2b00      	cmp	r3, #0
 8100ca6:	f47f ae63 	bne.w	8100970 <HAL_GPIO_Init+0x14>
  }
}
 8100caa:	bf00      	nop
 8100cac:	bf00      	nop
 8100cae:	3724      	adds	r7, #36	@ 0x24
 8100cb0:	46bd      	mov	sp, r7
 8100cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cb6:	4770      	bx	lr
 8100cb8:	58000400 	.word	0x58000400

08100cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100cbc:	b480      	push	{r7}
 8100cbe:	b083      	sub	sp, #12
 8100cc0:	af00      	add	r7, sp, #0
 8100cc2:	6078      	str	r0, [r7, #4]
 8100cc4:	460b      	mov	r3, r1
 8100cc6:	807b      	strh	r3, [r7, #2]
 8100cc8:	4613      	mov	r3, r2
 8100cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100ccc:	787b      	ldrb	r3, [r7, #1]
 8100cce:	2b00      	cmp	r3, #0
 8100cd0:	d003      	beq.n	8100cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100cd2:	887a      	ldrh	r2, [r7, #2]
 8100cd4:	687b      	ldr	r3, [r7, #4]
 8100cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100cd8:	e003      	b.n	8100ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100cda:	887b      	ldrh	r3, [r7, #2]
 8100cdc:	041a      	lsls	r2, r3, #16
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	619a      	str	r2, [r3, #24]
}
 8100ce2:	bf00      	nop
 8100ce4:	370c      	adds	r7, #12
 8100ce6:	46bd      	mov	sp, r7
 8100ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cec:	4770      	bx	lr

08100cee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100cee:	b480      	push	{r7}
 8100cf0:	b085      	sub	sp, #20
 8100cf2:	af00      	add	r7, sp, #0
 8100cf4:	6078      	str	r0, [r7, #4]
 8100cf6:	460b      	mov	r3, r1
 8100cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100cfa:	687b      	ldr	r3, [r7, #4]
 8100cfc:	695b      	ldr	r3, [r3, #20]
 8100cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100d00:	887a      	ldrh	r2, [r7, #2]
 8100d02:	68fb      	ldr	r3, [r7, #12]
 8100d04:	4013      	ands	r3, r2
 8100d06:	041a      	lsls	r2, r3, #16
 8100d08:	68fb      	ldr	r3, [r7, #12]
 8100d0a:	43d9      	mvns	r1, r3
 8100d0c:	887b      	ldrh	r3, [r7, #2]
 8100d0e:	400b      	ands	r3, r1
 8100d10:	431a      	orrs	r2, r3
 8100d12:	687b      	ldr	r3, [r7, #4]
 8100d14:	619a      	str	r2, [r3, #24]
}
 8100d16:	bf00      	nop
 8100d18:	3714      	adds	r7, #20
 8100d1a:	46bd      	mov	sp, r7
 8100d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d20:	4770      	bx	lr
	...

08100d24 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100d24:	b480      	push	{r7}
 8100d26:	b083      	sub	sp, #12
 8100d28:	af00      	add	r7, sp, #0
 8100d2a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100d2c:	4b05      	ldr	r3, [pc, #20]	@ (8100d44 <HAL_HSEM_ActivateNotification+0x20>)
 8100d2e:	681a      	ldr	r2, [r3, #0]
 8100d30:	4904      	ldr	r1, [pc, #16]	@ (8100d44 <HAL_HSEM_ActivateNotification+0x20>)
 8100d32:	687b      	ldr	r3, [r7, #4]
 8100d34:	4313      	orrs	r3, r2
 8100d36:	600b      	str	r3, [r1, #0]
#endif
}
 8100d38:	bf00      	nop
 8100d3a:	370c      	adds	r7, #12
 8100d3c:	46bd      	mov	sp, r7
 8100d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d42:	4770      	bx	lr
 8100d44:	58026510 	.word	0x58026510

08100d48 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8100d48:	b580      	push	{r7, lr}
 8100d4a:	b082      	sub	sp, #8
 8100d4c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8100d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8100d78 <HAL_HSEM_IRQHandler+0x30>)
 8100d50:	68db      	ldr	r3, [r3, #12]
 8100d52:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8100d54:	4b08      	ldr	r3, [pc, #32]	@ (8100d78 <HAL_HSEM_IRQHandler+0x30>)
 8100d56:	681a      	ldr	r2, [r3, #0]
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	43db      	mvns	r3, r3
 8100d5c:	4906      	ldr	r1, [pc, #24]	@ (8100d78 <HAL_HSEM_IRQHandler+0x30>)
 8100d5e:	4013      	ands	r3, r2
 8100d60:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8100d62:	4a05      	ldr	r2, [pc, #20]	@ (8100d78 <HAL_HSEM_IRQHandler+0x30>)
 8100d64:	687b      	ldr	r3, [r7, #4]
 8100d66:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8100d68:	6878      	ldr	r0, [r7, #4]
 8100d6a:	f7ff fb3d 	bl	81003e8 <HAL_HSEM_FreeCallback>
}
 8100d6e:	bf00      	nop
 8100d70:	3708      	adds	r7, #8
 8100d72:	46bd      	mov	sp, r7
 8100d74:	bd80      	pop	{r7, pc}
 8100d76:	bf00      	nop
 8100d78:	58026510 	.word	0x58026510

08100d7c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100d7c:	b580      	push	{r7, lr}
 8100d7e:	b084      	sub	sp, #16
 8100d80:	af00      	add	r7, sp, #0
 8100d82:	60f8      	str	r0, [r7, #12]
 8100d84:	460b      	mov	r3, r1
 8100d86:	607a      	str	r2, [r7, #4]
 8100d88:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100d8a:	4b37      	ldr	r3, [pc, #220]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d8c:	681b      	ldr	r3, [r3, #0]
 8100d8e:	f023 0201 	bic.w	r2, r3, #1
 8100d92:	4935      	ldr	r1, [pc, #212]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d94:	68fb      	ldr	r3, [r7, #12]
 8100d96:	4313      	orrs	r3, r2
 8100d98:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	2b00      	cmp	r3, #0
 8100d9e:	d123      	bne.n	8100de8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100da0:	f7ff fdc8 	bl	8100934 <HAL_GetCurrentCPUID>
 8100da4:	4603      	mov	r3, r0
 8100da6:	2b03      	cmp	r3, #3
 8100da8:	d158      	bne.n	8100e5c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100daa:	4b2f      	ldr	r3, [pc, #188]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dac:	691b      	ldr	r3, [r3, #16]
 8100dae:	4a2e      	ldr	r2, [pc, #184]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100db0:	f023 0301 	bic.w	r3, r3, #1
 8100db4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100db6:	4b2d      	ldr	r3, [pc, #180]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100db8:	691b      	ldr	r3, [r3, #16]
 8100dba:	4a2c      	ldr	r2, [pc, #176]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100dbc:	f043 0304 	orr.w	r3, r3, #4
 8100dc0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100dc2:	f3bf 8f4f 	dsb	sy
}
 8100dc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100dc8:	f3bf 8f6f 	isb	sy
}
 8100dcc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100dce:	7afb      	ldrb	r3, [r7, #11]
 8100dd0:	2b01      	cmp	r3, #1
 8100dd2:	d101      	bne.n	8100dd8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100dd4:	bf30      	wfi
 8100dd6:	e000      	b.n	8100dda <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100dd8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100dda:	4b24      	ldr	r3, [pc, #144]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ddc:	691b      	ldr	r3, [r3, #16]
 8100dde:	4a23      	ldr	r2, [pc, #140]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100de0:	f023 0304 	bic.w	r3, r3, #4
 8100de4:	6113      	str	r3, [r2, #16]
 8100de6:	e03c      	b.n	8100e62 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100de8:	687b      	ldr	r3, [r7, #4]
 8100dea:	2b01      	cmp	r3, #1
 8100dec:	d123      	bne.n	8100e36 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100dee:	f7ff fda1 	bl	8100934 <HAL_GetCurrentCPUID>
 8100df2:	4603      	mov	r3, r0
 8100df4:	2b01      	cmp	r3, #1
 8100df6:	d133      	bne.n	8100e60 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100df8:	4b1b      	ldr	r3, [pc, #108]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dfa:	695b      	ldr	r3, [r3, #20]
 8100dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dfe:	f023 0302 	bic.w	r3, r3, #2
 8100e02:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e04:	4b19      	ldr	r3, [pc, #100]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e06:	691b      	ldr	r3, [r3, #16]
 8100e08:	4a18      	ldr	r2, [pc, #96]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e0a:	f043 0304 	orr.w	r3, r3, #4
 8100e0e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100e10:	f3bf 8f4f 	dsb	sy
}
 8100e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100e16:	f3bf 8f6f 	isb	sy
}
 8100e1a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100e1c:	7afb      	ldrb	r3, [r7, #11]
 8100e1e:	2b01      	cmp	r3, #1
 8100e20:	d101      	bne.n	8100e26 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100e22:	bf30      	wfi
 8100e24:	e000      	b.n	8100e28 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100e26:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e28:	4b10      	ldr	r3, [pc, #64]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e2a:	691b      	ldr	r3, [r3, #16]
 8100e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8100e6c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e2e:	f023 0304 	bic.w	r3, r3, #4
 8100e32:	6113      	str	r3, [r2, #16]
 8100e34:	e015      	b.n	8100e62 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100e36:	f7ff fd7d 	bl	8100934 <HAL_GetCurrentCPUID>
 8100e3a:	4603      	mov	r3, r0
 8100e3c:	2b03      	cmp	r3, #3
 8100e3e:	d106      	bne.n	8100e4e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100e40:	4b09      	ldr	r3, [pc, #36]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e42:	691b      	ldr	r3, [r3, #16]
 8100e44:	4a08      	ldr	r2, [pc, #32]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e46:	f023 0304 	bic.w	r3, r3, #4
 8100e4a:	6113      	str	r3, [r2, #16]
 8100e4c:	e009      	b.n	8100e62 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100e4e:	4b06      	ldr	r3, [pc, #24]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e50:	695b      	ldr	r3, [r3, #20]
 8100e52:	4a05      	ldr	r2, [pc, #20]	@ (8100e68 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e54:	f023 0304 	bic.w	r3, r3, #4
 8100e58:	6153      	str	r3, [r2, #20]
 8100e5a:	e002      	b.n	8100e62 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100e5c:	bf00      	nop
 8100e5e:	e000      	b.n	8100e62 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100e60:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100e62:	3710      	adds	r7, #16
 8100e64:	46bd      	mov	sp, r7
 8100e66:	bd80      	pop	{r7, pc}
 8100e68:	58024800 	.word	0x58024800
 8100e6c:	e000ed00 	.word	0xe000ed00

08100e70 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100e70:	b580      	push	{r7, lr}
 8100e72:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100e74:	f7ff fd5e 	bl	8100934 <HAL_GetCurrentCPUID>
 8100e78:	4603      	mov	r3, r0
 8100e7a:	2b03      	cmp	r3, #3
 8100e7c:	d101      	bne.n	8100e82 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100e7e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100e80:	e001      	b.n	8100e86 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100e82:	bf40      	sev
    __WFE ();
 8100e84:	bf20      	wfe
}
 8100e86:	bf00      	nop
 8100e88:	bd80      	pop	{r7, pc}
	...

08100e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100e8c:	b480      	push	{r7}
 8100e8e:	b089      	sub	sp, #36	@ 0x24
 8100e90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100e92:	4bb3      	ldr	r3, [pc, #716]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e94:	691b      	ldr	r3, [r3, #16]
 8100e96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8100e9a:	2b18      	cmp	r3, #24
 8100e9c:	f200 8155 	bhi.w	810114a <HAL_RCC_GetSysClockFreq+0x2be>
 8100ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8100ea8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100ea6:	bf00      	nop
 8100ea8:	08100f0d 	.word	0x08100f0d
 8100eac:	0810114b 	.word	0x0810114b
 8100eb0:	0810114b 	.word	0x0810114b
 8100eb4:	0810114b 	.word	0x0810114b
 8100eb8:	0810114b 	.word	0x0810114b
 8100ebc:	0810114b 	.word	0x0810114b
 8100ec0:	0810114b 	.word	0x0810114b
 8100ec4:	0810114b 	.word	0x0810114b
 8100ec8:	08100f33 	.word	0x08100f33
 8100ecc:	0810114b 	.word	0x0810114b
 8100ed0:	0810114b 	.word	0x0810114b
 8100ed4:	0810114b 	.word	0x0810114b
 8100ed8:	0810114b 	.word	0x0810114b
 8100edc:	0810114b 	.word	0x0810114b
 8100ee0:	0810114b 	.word	0x0810114b
 8100ee4:	0810114b 	.word	0x0810114b
 8100ee8:	08100f39 	.word	0x08100f39
 8100eec:	0810114b 	.word	0x0810114b
 8100ef0:	0810114b 	.word	0x0810114b
 8100ef4:	0810114b 	.word	0x0810114b
 8100ef8:	0810114b 	.word	0x0810114b
 8100efc:	0810114b 	.word	0x0810114b
 8100f00:	0810114b 	.word	0x0810114b
 8100f04:	0810114b 	.word	0x0810114b
 8100f08:	08100f3f 	.word	0x08100f3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100f0c:	4b94      	ldr	r3, [pc, #592]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f0e:	681b      	ldr	r3, [r3, #0]
 8100f10:	f003 0320 	and.w	r3, r3, #32
 8100f14:	2b00      	cmp	r3, #0
 8100f16:	d009      	beq.n	8100f2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100f18:	4b91      	ldr	r3, [pc, #580]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f1a:	681b      	ldr	r3, [r3, #0]
 8100f1c:	08db      	lsrs	r3, r3, #3
 8100f1e:	f003 0303 	and.w	r3, r3, #3
 8100f22:	4a90      	ldr	r2, [pc, #576]	@ (8101164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100f24:	fa22 f303 	lsr.w	r3, r2, r3
 8100f28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100f2a:	e111      	b.n	8101150 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8101164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100f2e:	61bb      	str	r3, [r7, #24]
      break;
 8100f30:	e10e      	b.n	8101150 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100f32:	4b8d      	ldr	r3, [pc, #564]	@ (8101168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100f34:	61bb      	str	r3, [r7, #24]
      break;
 8100f36:	e10b      	b.n	8101150 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100f38:	4b8c      	ldr	r3, [pc, #560]	@ (810116c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100f3a:	61bb      	str	r3, [r7, #24]
      break;
 8100f3c:	e108      	b.n	8101150 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100f3e:	4b88      	ldr	r3, [pc, #544]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100f42:	f003 0303 	and.w	r3, r3, #3
 8100f46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100f48:	4b85      	ldr	r3, [pc, #532]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100f4c:	091b      	lsrs	r3, r3, #4
 8100f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100f52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100f54:	4b82      	ldr	r3, [pc, #520]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100f58:	f003 0301 	and.w	r3, r3, #1
 8100f5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100f5e:	4b80      	ldr	r3, [pc, #512]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100f62:	08db      	lsrs	r3, r3, #3
 8100f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100f68:	68fa      	ldr	r2, [r7, #12]
 8100f6a:	fb02 f303 	mul.w	r3, r2, r3
 8100f6e:	ee07 3a90 	vmov	s15, r3
 8100f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100f7a:	693b      	ldr	r3, [r7, #16]
 8100f7c:	2b00      	cmp	r3, #0
 8100f7e:	f000 80e1 	beq.w	8101144 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100f82:	697b      	ldr	r3, [r7, #20]
 8100f84:	2b02      	cmp	r3, #2
 8100f86:	f000 8083 	beq.w	8101090 <HAL_RCC_GetSysClockFreq+0x204>
 8100f8a:	697b      	ldr	r3, [r7, #20]
 8100f8c:	2b02      	cmp	r3, #2
 8100f8e:	f200 80a1 	bhi.w	81010d4 <HAL_RCC_GetSysClockFreq+0x248>
 8100f92:	697b      	ldr	r3, [r7, #20]
 8100f94:	2b00      	cmp	r3, #0
 8100f96:	d003      	beq.n	8100fa0 <HAL_RCC_GetSysClockFreq+0x114>
 8100f98:	697b      	ldr	r3, [r7, #20]
 8100f9a:	2b01      	cmp	r3, #1
 8100f9c:	d056      	beq.n	810104c <HAL_RCC_GetSysClockFreq+0x1c0>
 8100f9e:	e099      	b.n	81010d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fa2:	681b      	ldr	r3, [r3, #0]
 8100fa4:	f003 0320 	and.w	r3, r3, #32
 8100fa8:	2b00      	cmp	r3, #0
 8100faa:	d02d      	beq.n	8101008 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100fac:	4b6c      	ldr	r3, [pc, #432]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fae:	681b      	ldr	r3, [r3, #0]
 8100fb0:	08db      	lsrs	r3, r3, #3
 8100fb2:	f003 0303 	and.w	r3, r3, #3
 8100fb6:	4a6b      	ldr	r2, [pc, #428]	@ (8101164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8100fbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100fbe:	687b      	ldr	r3, [r7, #4]
 8100fc0:	ee07 3a90 	vmov	s15, r3
 8100fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fc8:	693b      	ldr	r3, [r7, #16]
 8100fca:	ee07 3a90 	vmov	s15, r3
 8100fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fd6:	4b62      	ldr	r3, [pc, #392]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fde:	ee07 3a90 	vmov	s15, r3
 8100fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101002:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101006:	e087      	b.n	8101118 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101008:	693b      	ldr	r3, [r7, #16]
 810100a:	ee07 3a90 	vmov	s15, r3
 810100e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101012:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101174 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810101a:	4b51      	ldr	r3, [pc, #324]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810101e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101022:	ee07 3a90 	vmov	s15, r3
 8101026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810102a:	ed97 6a02 	vldr	s12, [r7, #8]
 810102e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810103a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810103e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810104a:	e065      	b.n	8101118 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810104c:	693b      	ldr	r3, [r7, #16]
 810104e:	ee07 3a90 	vmov	s15, r3
 8101052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101056:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101178 <HAL_RCC_GetSysClockFreq+0x2ec>
 810105a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810105e:	4b40      	ldr	r3, [pc, #256]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101066:	ee07 3a90 	vmov	s15, r3
 810106a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810106e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101072:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810107a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810107e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101086:	ee67 7a27 	vmul.f32	s15, s14, s15
 810108a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810108e:	e043      	b.n	8101118 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101090:	693b      	ldr	r3, [r7, #16]
 8101092:	ee07 3a90 	vmov	s15, r3
 8101096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810109a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810117c <HAL_RCC_GetSysClockFreq+0x2f0>
 810109e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010a2:	4b2f      	ldr	r3, [pc, #188]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81010a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010aa:	ee07 3a90 	vmov	s15, r3
 81010ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81010b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101170 <HAL_RCC_GetSysClockFreq+0x2e4>
 81010ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81010be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81010c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81010c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81010ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81010ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81010d2:	e021      	b.n	8101118 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81010d4:	693b      	ldr	r3, [r7, #16]
 81010d6:	ee07 3a90 	vmov	s15, r3
 81010da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101178 <HAL_RCC_GetSysClockFreq+0x2ec>
 81010e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010e6:	4b1e      	ldr	r3, [pc, #120]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81010ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010ee:	ee07 3a90 	vmov	s15, r3
 81010f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81010fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101170 <HAL_RCC_GetSysClockFreq+0x2e4>
 81010fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810110a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810110e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101116:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101118:	4b11      	ldr	r3, [pc, #68]	@ (8101160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810111c:	0a5b      	lsrs	r3, r3, #9
 810111e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101122:	3301      	adds	r3, #1
 8101124:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101126:	683b      	ldr	r3, [r7, #0]
 8101128:	ee07 3a90 	vmov	s15, r3
 810112c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101130:	edd7 6a07 	vldr	s13, [r7, #28]
 8101134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810113c:	ee17 3a90 	vmov	r3, s15
 8101140:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101142:	e005      	b.n	8101150 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101144:	2300      	movs	r3, #0
 8101146:	61bb      	str	r3, [r7, #24]
      break;
 8101148:	e002      	b.n	8101150 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810114a:	4b07      	ldr	r3, [pc, #28]	@ (8101168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810114c:	61bb      	str	r3, [r7, #24]
      break;
 810114e:	bf00      	nop
  }

  return sysclockfreq;
 8101150:	69bb      	ldr	r3, [r7, #24]
}
 8101152:	4618      	mov	r0, r3
 8101154:	3724      	adds	r7, #36	@ 0x24
 8101156:	46bd      	mov	sp, r7
 8101158:	f85d 7b04 	ldr.w	r7, [sp], #4
 810115c:	4770      	bx	lr
 810115e:	bf00      	nop
 8101160:	58024400 	.word	0x58024400
 8101164:	03d09000 	.word	0x03d09000
 8101168:	003d0900 	.word	0x003d0900
 810116c:	017d7840 	.word	0x017d7840
 8101170:	46000000 	.word	0x46000000
 8101174:	4c742400 	.word	0x4c742400
 8101178:	4a742400 	.word	0x4a742400
 810117c:	4bbebc20 	.word	0x4bbebc20

08101180 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8101180:	b480      	push	{r7}
 8101182:	b085      	sub	sp, #20
 8101184:	af00      	add	r7, sp, #0
 8101186:	4603      	mov	r3, r0
 8101188:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 810118a:	2300      	movs	r3, #0
 810118c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 810118e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101192:	2b84      	cmp	r3, #132	@ 0x84
 8101194:	d005      	beq.n	81011a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8101196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810119a:	68fb      	ldr	r3, [r7, #12]
 810119c:	4413      	add	r3, r2
 810119e:	3303      	adds	r3, #3
 81011a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 81011a2:	68fb      	ldr	r3, [r7, #12]
}
 81011a4:	4618      	mov	r0, r3
 81011a6:	3714      	adds	r7, #20
 81011a8:	46bd      	mov	sp, r7
 81011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ae:	4770      	bx	lr

081011b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 81011b0:	b480      	push	{r7}
 81011b2:	b083      	sub	sp, #12
 81011b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81011b6:	f3ef 8305 	mrs	r3, IPSR
 81011ba:	607b      	str	r3, [r7, #4]
  return(result);
 81011bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 81011be:	2b00      	cmp	r3, #0
 81011c0:	bf14      	ite	ne
 81011c2:	2301      	movne	r3, #1
 81011c4:	2300      	moveq	r3, #0
 81011c6:	b2db      	uxtb	r3, r3
}
 81011c8:	4618      	mov	r0, r3
 81011ca:	370c      	adds	r7, #12
 81011cc:	46bd      	mov	sp, r7
 81011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d2:	4770      	bx	lr

081011d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 81011d4:	b580      	push	{r7, lr}
 81011d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 81011d8:	f001 f80c 	bl	81021f4 <vTaskStartScheduler>
  
  return osOK;
 81011dc:	2300      	movs	r3, #0
}
 81011de:	4618      	mov	r0, r3
 81011e0:	bd80      	pop	{r7, pc}

081011e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 81011e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 81011e4:	b087      	sub	sp, #28
 81011e6:	af02      	add	r7, sp, #8
 81011e8:	6078      	str	r0, [r7, #4]
 81011ea:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	685c      	ldr	r4, [r3, #4]
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81011f8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 81011fa:	687b      	ldr	r3, [r7, #4]
 81011fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8101200:	4618      	mov	r0, r3
 8101202:	f7ff ffbd 	bl	8101180 <makeFreeRtosPriority>
 8101206:	4602      	mov	r2, r0
 8101208:	f107 030c 	add.w	r3, r7, #12
 810120c:	9301      	str	r3, [sp, #4]
 810120e:	9200      	str	r2, [sp, #0]
 8101210:	683b      	ldr	r3, [r7, #0]
 8101212:	4632      	mov	r2, r6
 8101214:	4629      	mov	r1, r5
 8101216:	4620      	mov	r0, r4
 8101218:	f000 feac 	bl	8101f74 <xTaskCreate>
 810121c:	4603      	mov	r3, r0
 810121e:	2b01      	cmp	r3, #1
 8101220:	d001      	beq.n	8101226 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8101222:	2300      	movs	r3, #0
 8101224:	e000      	b.n	8101228 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8101226:	68fb      	ldr	r3, [r7, #12]
}
 8101228:	4618      	mov	r0, r3
 810122a:	3714      	adds	r7, #20
 810122c:	46bd      	mov	sp, r7
 810122e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08101230 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8101230:	b580      	push	{r7, lr}
 8101232:	b084      	sub	sp, #16
 8101234:	af00      	add	r7, sp, #0
 8101236:	6078      	str	r0, [r7, #4]
 8101238:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 810123a:	683b      	ldr	r3, [r7, #0]
 810123c:	2b01      	cmp	r3, #1
 810123e:	d110      	bne.n	8101262 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8101240:	2203      	movs	r2, #3
 8101242:	2100      	movs	r1, #0
 8101244:	2001      	movs	r0, #1
 8101246:	f000 f9b9 	bl	81015bc <xQueueGenericCreate>
 810124a:	60f8      	str	r0, [r7, #12]
 810124c:	68fb      	ldr	r3, [r7, #12]
 810124e:	2b00      	cmp	r3, #0
 8101250:	d005      	beq.n	810125e <osSemaphoreCreate+0x2e>
 8101252:	2300      	movs	r3, #0
 8101254:	2200      	movs	r2, #0
 8101256:	2100      	movs	r1, #0
 8101258:	68f8      	ldr	r0, [r7, #12]
 810125a:	f000 fa3f 	bl	81016dc <xQueueGenericSend>
    return sema;
 810125e:	68fb      	ldr	r3, [r7, #12]
 8101260:	e006      	b.n	8101270 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8101262:	683b      	ldr	r3, [r7, #0]
 8101264:	683a      	ldr	r2, [r7, #0]
 8101266:	4611      	mov	r1, r2
 8101268:	4618      	mov	r0, r3
 810126a:	f000 fa01 	bl	8101670 <xQueueCreateCountingSemaphore>
 810126e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8101270:	4618      	mov	r0, r3
 8101272:	3710      	adds	r7, #16
 8101274:	46bd      	mov	sp, r7
 8101276:	bd80      	pop	{r7, pc}

08101278 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8101278:	b580      	push	{r7, lr}
 810127a:	b084      	sub	sp, #16
 810127c:	af00      	add	r7, sp, #0
 810127e:	6078      	str	r0, [r7, #4]
 8101280:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8101282:	2300      	movs	r3, #0
 8101284:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8101286:	687b      	ldr	r3, [r7, #4]
 8101288:	2b00      	cmp	r3, #0
 810128a:	d101      	bne.n	8101290 <osSemaphoreWait+0x18>
    return osErrorParameter;
 810128c:	2380      	movs	r3, #128	@ 0x80
 810128e:	e03a      	b.n	8101306 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8101290:	2300      	movs	r3, #0
 8101292:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8101294:	683b      	ldr	r3, [r7, #0]
 8101296:	f1b3 3fff 	cmp.w	r3, #4294967295
 810129a:	d103      	bne.n	81012a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 810129c:	f04f 33ff 	mov.w	r3, #4294967295
 81012a0:	60fb      	str	r3, [r7, #12]
 81012a2:	e009      	b.n	81012b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 81012a4:	683b      	ldr	r3, [r7, #0]
 81012a6:	2b00      	cmp	r3, #0
 81012a8:	d006      	beq.n	81012b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 81012aa:	683b      	ldr	r3, [r7, #0]
 81012ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 81012ae:	68fb      	ldr	r3, [r7, #12]
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d101      	bne.n	81012b8 <osSemaphoreWait+0x40>
      ticks = 1;
 81012b4:	2301      	movs	r3, #1
 81012b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 81012b8:	f7ff ff7a 	bl	81011b0 <inHandlerMode>
 81012bc:	4603      	mov	r3, r0
 81012be:	2b00      	cmp	r3, #0
 81012c0:	d017      	beq.n	81012f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 81012c2:	f107 0308 	add.w	r3, r7, #8
 81012c6:	461a      	mov	r2, r3
 81012c8:	2100      	movs	r1, #0
 81012ca:	6878      	ldr	r0, [r7, #4]
 81012cc:	f000 fca8 	bl	8101c20 <xQueueReceiveFromISR>
 81012d0:	4603      	mov	r3, r0
 81012d2:	2b01      	cmp	r3, #1
 81012d4:	d001      	beq.n	81012da <osSemaphoreWait+0x62>
      return osErrorOS;
 81012d6:	23ff      	movs	r3, #255	@ 0xff
 81012d8:	e015      	b.n	8101306 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 81012da:	68bb      	ldr	r3, [r7, #8]
 81012dc:	2b00      	cmp	r3, #0
 81012de:	d011      	beq.n	8101304 <osSemaphoreWait+0x8c>
 81012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8101310 <osSemaphoreWait+0x98>)
 81012e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81012e6:	601a      	str	r2, [r3, #0]
 81012e8:	f3bf 8f4f 	dsb	sy
 81012ec:	f3bf 8f6f 	isb	sy
 81012f0:	e008      	b.n	8101304 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 81012f2:	68f9      	ldr	r1, [r7, #12]
 81012f4:	6878      	ldr	r0, [r7, #4]
 81012f6:	f000 fb83 	bl	8101a00 <xQueueSemaphoreTake>
 81012fa:	4603      	mov	r3, r0
 81012fc:	2b01      	cmp	r3, #1
 81012fe:	d001      	beq.n	8101304 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8101300:	23ff      	movs	r3, #255	@ 0xff
 8101302:	e000      	b.n	8101306 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8101304:	2300      	movs	r3, #0
}
 8101306:	4618      	mov	r0, r3
 8101308:	3710      	adds	r7, #16
 810130a:	46bd      	mov	sp, r7
 810130c:	bd80      	pop	{r7, pc}
 810130e:	bf00      	nop
 8101310:	e000ed04 	.word	0xe000ed04

08101314 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8101314:	b580      	push	{r7, lr}
 8101316:	b084      	sub	sp, #16
 8101318:	af00      	add	r7, sp, #0
 810131a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 810131c:	2300      	movs	r3, #0
 810131e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8101320:	2300      	movs	r3, #0
 8101322:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8101324:	f7ff ff44 	bl	81011b0 <inHandlerMode>
 8101328:	4603      	mov	r3, r0
 810132a:	2b00      	cmp	r3, #0
 810132c:	d016      	beq.n	810135c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 810132e:	f107 0308 	add.w	r3, r7, #8
 8101332:	4619      	mov	r1, r3
 8101334:	6878      	ldr	r0, [r7, #4]
 8101336:	f000 fad3 	bl	81018e0 <xQueueGiveFromISR>
 810133a:	4603      	mov	r3, r0
 810133c:	2b01      	cmp	r3, #1
 810133e:	d001      	beq.n	8101344 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8101340:	23ff      	movs	r3, #255	@ 0xff
 8101342:	e017      	b.n	8101374 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8101344:	68bb      	ldr	r3, [r7, #8]
 8101346:	2b00      	cmp	r3, #0
 8101348:	d013      	beq.n	8101372 <osSemaphoreRelease+0x5e>
 810134a:	4b0c      	ldr	r3, [pc, #48]	@ (810137c <osSemaphoreRelease+0x68>)
 810134c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101350:	601a      	str	r2, [r3, #0]
 8101352:	f3bf 8f4f 	dsb	sy
 8101356:	f3bf 8f6f 	isb	sy
 810135a:	e00a      	b.n	8101372 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 810135c:	2300      	movs	r3, #0
 810135e:	2200      	movs	r2, #0
 8101360:	2100      	movs	r1, #0
 8101362:	6878      	ldr	r0, [r7, #4]
 8101364:	f000 f9ba 	bl	81016dc <xQueueGenericSend>
 8101368:	4603      	mov	r3, r0
 810136a:	2b01      	cmp	r3, #1
 810136c:	d001      	beq.n	8101372 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 810136e:	23ff      	movs	r3, #255	@ 0xff
 8101370:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8101372:	68fb      	ldr	r3, [r7, #12]
}
 8101374:	4618      	mov	r0, r3
 8101376:	3710      	adds	r7, #16
 8101378:	46bd      	mov	sp, r7
 810137a:	bd80      	pop	{r7, pc}
 810137c:	e000ed04 	.word	0xe000ed04

08101380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101380:	b480      	push	{r7}
 8101382:	b083      	sub	sp, #12
 8101384:	af00      	add	r7, sp, #0
 8101386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101388:	687b      	ldr	r3, [r7, #4]
 810138a:	f103 0208 	add.w	r2, r3, #8
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	f04f 32ff 	mov.w	r2, #4294967295
 8101398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	f103 0208 	add.w	r2, r3, #8
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	f103 0208 	add.w	r2, r3, #8
 81013aa:	687b      	ldr	r3, [r7, #4]
 81013ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81013ae:	687b      	ldr	r3, [r7, #4]
 81013b0:	2200      	movs	r2, #0
 81013b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81013b4:	bf00      	nop
 81013b6:	370c      	adds	r7, #12
 81013b8:	46bd      	mov	sp, r7
 81013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013be:	4770      	bx	lr

081013c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81013c0:	b480      	push	{r7}
 81013c2:	b083      	sub	sp, #12
 81013c4:	af00      	add	r7, sp, #0
 81013c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	2200      	movs	r2, #0
 81013cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81013ce:	bf00      	nop
 81013d0:	370c      	adds	r7, #12
 81013d2:	46bd      	mov	sp, r7
 81013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013d8:	4770      	bx	lr

081013da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81013da:	b480      	push	{r7}
 81013dc:	b085      	sub	sp, #20
 81013de:	af00      	add	r7, sp, #0
 81013e0:	6078      	str	r0, [r7, #4]
 81013e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	685b      	ldr	r3, [r3, #4]
 81013e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81013ea:	683b      	ldr	r3, [r7, #0]
 81013ec:	68fa      	ldr	r2, [r7, #12]
 81013ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81013f0:	68fb      	ldr	r3, [r7, #12]
 81013f2:	689a      	ldr	r2, [r3, #8]
 81013f4:	683b      	ldr	r3, [r7, #0]
 81013f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81013f8:	68fb      	ldr	r3, [r7, #12]
 81013fa:	689b      	ldr	r3, [r3, #8]
 81013fc:	683a      	ldr	r2, [r7, #0]
 81013fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	683a      	ldr	r2, [r7, #0]
 8101404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8101406:	683b      	ldr	r3, [r7, #0]
 8101408:	687a      	ldr	r2, [r7, #4]
 810140a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	681b      	ldr	r3, [r3, #0]
 8101410:	1c5a      	adds	r2, r3, #1
 8101412:	687b      	ldr	r3, [r7, #4]
 8101414:	601a      	str	r2, [r3, #0]
}
 8101416:	bf00      	nop
 8101418:	3714      	adds	r7, #20
 810141a:	46bd      	mov	sp, r7
 810141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101420:	4770      	bx	lr

08101422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101422:	b480      	push	{r7}
 8101424:	b085      	sub	sp, #20
 8101426:	af00      	add	r7, sp, #0
 8101428:	6078      	str	r0, [r7, #4]
 810142a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810142c:	683b      	ldr	r3, [r7, #0]
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101432:	68bb      	ldr	r3, [r7, #8]
 8101434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101438:	d103      	bne.n	8101442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	691b      	ldr	r3, [r3, #16]
 810143e:	60fb      	str	r3, [r7, #12]
 8101440:	e00c      	b.n	810145c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101442:	687b      	ldr	r3, [r7, #4]
 8101444:	3308      	adds	r3, #8
 8101446:	60fb      	str	r3, [r7, #12]
 8101448:	e002      	b.n	8101450 <vListInsert+0x2e>
 810144a:	68fb      	ldr	r3, [r7, #12]
 810144c:	685b      	ldr	r3, [r3, #4]
 810144e:	60fb      	str	r3, [r7, #12]
 8101450:	68fb      	ldr	r3, [r7, #12]
 8101452:	685b      	ldr	r3, [r3, #4]
 8101454:	681b      	ldr	r3, [r3, #0]
 8101456:	68ba      	ldr	r2, [r7, #8]
 8101458:	429a      	cmp	r2, r3
 810145a:	d2f6      	bcs.n	810144a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810145c:	68fb      	ldr	r3, [r7, #12]
 810145e:	685a      	ldr	r2, [r3, #4]
 8101460:	683b      	ldr	r3, [r7, #0]
 8101462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101464:	683b      	ldr	r3, [r7, #0]
 8101466:	685b      	ldr	r3, [r3, #4]
 8101468:	683a      	ldr	r2, [r7, #0]
 810146a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810146c:	683b      	ldr	r3, [r7, #0]
 810146e:	68fa      	ldr	r2, [r7, #12]
 8101470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101472:	68fb      	ldr	r3, [r7, #12]
 8101474:	683a      	ldr	r2, [r7, #0]
 8101476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101478:	683b      	ldr	r3, [r7, #0]
 810147a:	687a      	ldr	r2, [r7, #4]
 810147c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810147e:	687b      	ldr	r3, [r7, #4]
 8101480:	681b      	ldr	r3, [r3, #0]
 8101482:	1c5a      	adds	r2, r3, #1
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	601a      	str	r2, [r3, #0]
}
 8101488:	bf00      	nop
 810148a:	3714      	adds	r7, #20
 810148c:	46bd      	mov	sp, r7
 810148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101492:	4770      	bx	lr

08101494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101494:	b480      	push	{r7}
 8101496:	b085      	sub	sp, #20
 8101498:	af00      	add	r7, sp, #0
 810149a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810149c:	687b      	ldr	r3, [r7, #4]
 810149e:	691b      	ldr	r3, [r3, #16]
 81014a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	685b      	ldr	r3, [r3, #4]
 81014a6:	687a      	ldr	r2, [r7, #4]
 81014a8:	6892      	ldr	r2, [r2, #8]
 81014aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	689b      	ldr	r3, [r3, #8]
 81014b0:	687a      	ldr	r2, [r7, #4]
 81014b2:	6852      	ldr	r2, [r2, #4]
 81014b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81014b6:	68fb      	ldr	r3, [r7, #12]
 81014b8:	685b      	ldr	r3, [r3, #4]
 81014ba:	687a      	ldr	r2, [r7, #4]
 81014bc:	429a      	cmp	r2, r3
 81014be:	d103      	bne.n	81014c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	689a      	ldr	r2, [r3, #8]
 81014c4:	68fb      	ldr	r3, [r7, #12]
 81014c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81014c8:	687b      	ldr	r3, [r7, #4]
 81014ca:	2200      	movs	r2, #0
 81014cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81014ce:	68fb      	ldr	r3, [r7, #12]
 81014d0:	681b      	ldr	r3, [r3, #0]
 81014d2:	1e5a      	subs	r2, r3, #1
 81014d4:	68fb      	ldr	r3, [r7, #12]
 81014d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81014d8:	68fb      	ldr	r3, [r7, #12]
 81014da:	681b      	ldr	r3, [r3, #0]
}
 81014dc:	4618      	mov	r0, r3
 81014de:	3714      	adds	r7, #20
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr

081014e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b084      	sub	sp, #16
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
 81014f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81014f6:	68fb      	ldr	r3, [r7, #12]
 81014f8:	2b00      	cmp	r3, #0
 81014fa:	d10b      	bne.n	8101514 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81014fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101500:	f383 8811 	msr	BASEPRI, r3
 8101504:	f3bf 8f6f 	isb	sy
 8101508:	f3bf 8f4f 	dsb	sy
 810150c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810150e:	bf00      	nop
 8101510:	bf00      	nop
 8101512:	e7fd      	b.n	8101510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8101514:	f001 ff58 	bl	81033c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8101518:	68fb      	ldr	r3, [r7, #12]
 810151a:	681a      	ldr	r2, [r3, #0]
 810151c:	68fb      	ldr	r3, [r7, #12]
 810151e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101520:	68f9      	ldr	r1, [r7, #12]
 8101522:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8101524:	fb01 f303 	mul.w	r3, r1, r3
 8101528:	441a      	add	r2, r3
 810152a:	68fb      	ldr	r3, [r7, #12]
 810152c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810152e:	68fb      	ldr	r3, [r7, #12]
 8101530:	2200      	movs	r2, #0
 8101532:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8101534:	68fb      	ldr	r3, [r7, #12]
 8101536:	681a      	ldr	r2, [r3, #0]
 8101538:	68fb      	ldr	r3, [r7, #12]
 810153a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810153c:	68fb      	ldr	r3, [r7, #12]
 810153e:	681a      	ldr	r2, [r3, #0]
 8101540:	68fb      	ldr	r3, [r7, #12]
 8101542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101544:	3b01      	subs	r3, #1
 8101546:	68f9      	ldr	r1, [r7, #12]
 8101548:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810154a:	fb01 f303 	mul.w	r3, r1, r3
 810154e:	441a      	add	r2, r3
 8101550:	68fb      	ldr	r3, [r7, #12]
 8101552:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8101554:	68fb      	ldr	r3, [r7, #12]
 8101556:	22ff      	movs	r2, #255	@ 0xff
 8101558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810155c:	68fb      	ldr	r3, [r7, #12]
 810155e:	22ff      	movs	r2, #255	@ 0xff
 8101560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8101564:	683b      	ldr	r3, [r7, #0]
 8101566:	2b00      	cmp	r3, #0
 8101568:	d114      	bne.n	8101594 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810156a:	68fb      	ldr	r3, [r7, #12]
 810156c:	691b      	ldr	r3, [r3, #16]
 810156e:	2b00      	cmp	r3, #0
 8101570:	d01a      	beq.n	81015a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101572:	68fb      	ldr	r3, [r7, #12]
 8101574:	3310      	adds	r3, #16
 8101576:	4618      	mov	r0, r3
 8101578:	f001 f86c 	bl	8102654 <xTaskRemoveFromEventList>
 810157c:	4603      	mov	r3, r0
 810157e:	2b00      	cmp	r3, #0
 8101580:	d012      	beq.n	81015a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8101582:	4b0d      	ldr	r3, [pc, #52]	@ (81015b8 <xQueueGenericReset+0xd0>)
 8101584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101588:	601a      	str	r2, [r3, #0]
 810158a:	f3bf 8f4f 	dsb	sy
 810158e:	f3bf 8f6f 	isb	sy
 8101592:	e009      	b.n	81015a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8101594:	68fb      	ldr	r3, [r7, #12]
 8101596:	3310      	adds	r3, #16
 8101598:	4618      	mov	r0, r3
 810159a:	f7ff fef1 	bl	8101380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810159e:	68fb      	ldr	r3, [r7, #12]
 81015a0:	3324      	adds	r3, #36	@ 0x24
 81015a2:	4618      	mov	r0, r3
 81015a4:	f7ff feec 	bl	8101380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 81015a8:	f001 ff40 	bl	810342c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 81015ac:	2301      	movs	r3, #1
}
 81015ae:	4618      	mov	r0, r3
 81015b0:	3710      	adds	r7, #16
 81015b2:	46bd      	mov	sp, r7
 81015b4:	bd80      	pop	{r7, pc}
 81015b6:	bf00      	nop
 81015b8:	e000ed04 	.word	0xe000ed04

081015bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 81015bc:	b580      	push	{r7, lr}
 81015be:	b08a      	sub	sp, #40	@ 0x28
 81015c0:	af02      	add	r7, sp, #8
 81015c2:	60f8      	str	r0, [r7, #12]
 81015c4:	60b9      	str	r1, [r7, #8]
 81015c6:	4613      	mov	r3, r2
 81015c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81015ca:	68fb      	ldr	r3, [r7, #12]
 81015cc:	2b00      	cmp	r3, #0
 81015ce:	d10b      	bne.n	81015e8 <xQueueGenericCreate+0x2c>
	__asm volatile
 81015d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81015d4:	f383 8811 	msr	BASEPRI, r3
 81015d8:	f3bf 8f6f 	isb	sy
 81015dc:	f3bf 8f4f 	dsb	sy
 81015e0:	613b      	str	r3, [r7, #16]
}
 81015e2:	bf00      	nop
 81015e4:	bf00      	nop
 81015e6:	e7fd      	b.n	81015e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81015e8:	68fb      	ldr	r3, [r7, #12]
 81015ea:	68ba      	ldr	r2, [r7, #8]
 81015ec:	fb02 f303 	mul.w	r3, r2, r3
 81015f0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 81015f2:	69fb      	ldr	r3, [r7, #28]
 81015f4:	3350      	adds	r3, #80	@ 0x50
 81015f6:	4618      	mov	r0, r3
 81015f8:	f001 fbf2 	bl	8102de0 <pvPortMalloc>
 81015fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 81015fe:	69bb      	ldr	r3, [r7, #24]
 8101600:	2b00      	cmp	r3, #0
 8101602:	d00d      	beq.n	8101620 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8101604:	69bb      	ldr	r3, [r7, #24]
 8101606:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8101608:	697b      	ldr	r3, [r7, #20]
 810160a:	3350      	adds	r3, #80	@ 0x50
 810160c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810160e:	79fa      	ldrb	r2, [r7, #7]
 8101610:	69bb      	ldr	r3, [r7, #24]
 8101612:	9300      	str	r3, [sp, #0]
 8101614:	4613      	mov	r3, r2
 8101616:	697a      	ldr	r2, [r7, #20]
 8101618:	68b9      	ldr	r1, [r7, #8]
 810161a:	68f8      	ldr	r0, [r7, #12]
 810161c:	f000 f805 	bl	810162a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8101620:	69bb      	ldr	r3, [r7, #24]
	}
 8101622:	4618      	mov	r0, r3
 8101624:	3720      	adds	r7, #32
 8101626:	46bd      	mov	sp, r7
 8101628:	bd80      	pop	{r7, pc}

0810162a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810162a:	b580      	push	{r7, lr}
 810162c:	b084      	sub	sp, #16
 810162e:	af00      	add	r7, sp, #0
 8101630:	60f8      	str	r0, [r7, #12]
 8101632:	60b9      	str	r1, [r7, #8]
 8101634:	607a      	str	r2, [r7, #4]
 8101636:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8101638:	68bb      	ldr	r3, [r7, #8]
 810163a:	2b00      	cmp	r3, #0
 810163c:	d103      	bne.n	8101646 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810163e:	69bb      	ldr	r3, [r7, #24]
 8101640:	69ba      	ldr	r2, [r7, #24]
 8101642:	601a      	str	r2, [r3, #0]
 8101644:	e002      	b.n	810164c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8101646:	69bb      	ldr	r3, [r7, #24]
 8101648:	687a      	ldr	r2, [r7, #4]
 810164a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810164c:	69bb      	ldr	r3, [r7, #24]
 810164e:	68fa      	ldr	r2, [r7, #12]
 8101650:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8101652:	69bb      	ldr	r3, [r7, #24]
 8101654:	68ba      	ldr	r2, [r7, #8]
 8101656:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8101658:	2101      	movs	r1, #1
 810165a:	69b8      	ldr	r0, [r7, #24]
 810165c:	f7ff ff44 	bl	81014e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8101660:	69bb      	ldr	r3, [r7, #24]
 8101662:	78fa      	ldrb	r2, [r7, #3]
 8101664:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8101668:	bf00      	nop
 810166a:	3710      	adds	r7, #16
 810166c:	46bd      	mov	sp, r7
 810166e:	bd80      	pop	{r7, pc}

08101670 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8101670:	b580      	push	{r7, lr}
 8101672:	b086      	sub	sp, #24
 8101674:	af00      	add	r7, sp, #0
 8101676:	6078      	str	r0, [r7, #4]
 8101678:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	2b00      	cmp	r3, #0
 810167e:	d10b      	bne.n	8101698 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8101680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101684:	f383 8811 	msr	BASEPRI, r3
 8101688:	f3bf 8f6f 	isb	sy
 810168c:	f3bf 8f4f 	dsb	sy
 8101690:	613b      	str	r3, [r7, #16]
}
 8101692:	bf00      	nop
 8101694:	bf00      	nop
 8101696:	e7fd      	b.n	8101694 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8101698:	683a      	ldr	r2, [r7, #0]
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	429a      	cmp	r2, r3
 810169e:	d90b      	bls.n	81016b8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 81016a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81016a4:	f383 8811 	msr	BASEPRI, r3
 81016a8:	f3bf 8f6f 	isb	sy
 81016ac:	f3bf 8f4f 	dsb	sy
 81016b0:	60fb      	str	r3, [r7, #12]
}
 81016b2:	bf00      	nop
 81016b4:	bf00      	nop
 81016b6:	e7fd      	b.n	81016b4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81016b8:	2202      	movs	r2, #2
 81016ba:	2100      	movs	r1, #0
 81016bc:	6878      	ldr	r0, [r7, #4]
 81016be:	f7ff ff7d 	bl	81015bc <xQueueGenericCreate>
 81016c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 81016c4:	697b      	ldr	r3, [r7, #20]
 81016c6:	2b00      	cmp	r3, #0
 81016c8:	d002      	beq.n	81016d0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 81016ca:	697b      	ldr	r3, [r7, #20]
 81016cc:	683a      	ldr	r2, [r7, #0]
 81016ce:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 81016d0:	697b      	ldr	r3, [r7, #20]
	}
 81016d2:	4618      	mov	r0, r3
 81016d4:	3718      	adds	r7, #24
 81016d6:	46bd      	mov	sp, r7
 81016d8:	bd80      	pop	{r7, pc}
	...

081016dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81016dc:	b580      	push	{r7, lr}
 81016de:	b08e      	sub	sp, #56	@ 0x38
 81016e0:	af00      	add	r7, sp, #0
 81016e2:	60f8      	str	r0, [r7, #12]
 81016e4:	60b9      	str	r1, [r7, #8]
 81016e6:	607a      	str	r2, [r7, #4]
 81016e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 81016ea:	2300      	movs	r3, #0
 81016ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81016ee:	68fb      	ldr	r3, [r7, #12]
 81016f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 81016f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81016f4:	2b00      	cmp	r3, #0
 81016f6:	d10b      	bne.n	8101710 <xQueueGenericSend+0x34>
	__asm volatile
 81016f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81016fc:	f383 8811 	msr	BASEPRI, r3
 8101700:	f3bf 8f6f 	isb	sy
 8101704:	f3bf 8f4f 	dsb	sy
 8101708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810170a:	bf00      	nop
 810170c:	bf00      	nop
 810170e:	e7fd      	b.n	810170c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8101710:	68bb      	ldr	r3, [r7, #8]
 8101712:	2b00      	cmp	r3, #0
 8101714:	d103      	bne.n	810171e <xQueueGenericSend+0x42>
 8101716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810171a:	2b00      	cmp	r3, #0
 810171c:	d101      	bne.n	8101722 <xQueueGenericSend+0x46>
 810171e:	2301      	movs	r3, #1
 8101720:	e000      	b.n	8101724 <xQueueGenericSend+0x48>
 8101722:	2300      	movs	r3, #0
 8101724:	2b00      	cmp	r3, #0
 8101726:	d10b      	bne.n	8101740 <xQueueGenericSend+0x64>
	__asm volatile
 8101728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810172c:	f383 8811 	msr	BASEPRI, r3
 8101730:	f3bf 8f6f 	isb	sy
 8101734:	f3bf 8f4f 	dsb	sy
 8101738:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810173a:	bf00      	nop
 810173c:	bf00      	nop
 810173e:	e7fd      	b.n	810173c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8101740:	683b      	ldr	r3, [r7, #0]
 8101742:	2b02      	cmp	r3, #2
 8101744:	d103      	bne.n	810174e <xQueueGenericSend+0x72>
 8101746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810174a:	2b01      	cmp	r3, #1
 810174c:	d101      	bne.n	8101752 <xQueueGenericSend+0x76>
 810174e:	2301      	movs	r3, #1
 8101750:	e000      	b.n	8101754 <xQueueGenericSend+0x78>
 8101752:	2300      	movs	r3, #0
 8101754:	2b00      	cmp	r3, #0
 8101756:	d10b      	bne.n	8101770 <xQueueGenericSend+0x94>
	__asm volatile
 8101758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810175c:	f383 8811 	msr	BASEPRI, r3
 8101760:	f3bf 8f6f 	isb	sy
 8101764:	f3bf 8f4f 	dsb	sy
 8101768:	623b      	str	r3, [r7, #32]
}
 810176a:	bf00      	nop
 810176c:	bf00      	nop
 810176e:	e7fd      	b.n	810176c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8101770:	f001 f910 	bl	8102994 <xTaskGetSchedulerState>
 8101774:	4603      	mov	r3, r0
 8101776:	2b00      	cmp	r3, #0
 8101778:	d102      	bne.n	8101780 <xQueueGenericSend+0xa4>
 810177a:	687b      	ldr	r3, [r7, #4]
 810177c:	2b00      	cmp	r3, #0
 810177e:	d101      	bne.n	8101784 <xQueueGenericSend+0xa8>
 8101780:	2301      	movs	r3, #1
 8101782:	e000      	b.n	8101786 <xQueueGenericSend+0xaa>
 8101784:	2300      	movs	r3, #0
 8101786:	2b00      	cmp	r3, #0
 8101788:	d10b      	bne.n	81017a2 <xQueueGenericSend+0xc6>
	__asm volatile
 810178a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810178e:	f383 8811 	msr	BASEPRI, r3
 8101792:	f3bf 8f6f 	isb	sy
 8101796:	f3bf 8f4f 	dsb	sy
 810179a:	61fb      	str	r3, [r7, #28]
}
 810179c:	bf00      	nop
 810179e:	bf00      	nop
 81017a0:	e7fd      	b.n	810179e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81017a2:	f001 fe11 	bl	81033c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81017a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81017a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81017aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81017ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81017ae:	429a      	cmp	r2, r3
 81017b0:	d302      	bcc.n	81017b8 <xQueueGenericSend+0xdc>
 81017b2:	683b      	ldr	r3, [r7, #0]
 81017b4:	2b02      	cmp	r3, #2
 81017b6:	d129      	bne.n	810180c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81017b8:	683a      	ldr	r2, [r7, #0]
 81017ba:	68b9      	ldr	r1, [r7, #8]
 81017bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81017be:	f000 fac9 	bl	8101d54 <prvCopyDataToQueue>
 81017c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81017c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81017c8:	2b00      	cmp	r3, #0
 81017ca:	d010      	beq.n	81017ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81017cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81017ce:	3324      	adds	r3, #36	@ 0x24
 81017d0:	4618      	mov	r0, r3
 81017d2:	f000 ff3f 	bl	8102654 <xTaskRemoveFromEventList>
 81017d6:	4603      	mov	r3, r0
 81017d8:	2b00      	cmp	r3, #0
 81017da:	d013      	beq.n	8101804 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81017dc:	4b3f      	ldr	r3, [pc, #252]	@ (81018dc <xQueueGenericSend+0x200>)
 81017de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81017e2:	601a      	str	r2, [r3, #0]
 81017e4:	f3bf 8f4f 	dsb	sy
 81017e8:	f3bf 8f6f 	isb	sy
 81017ec:	e00a      	b.n	8101804 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81017ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81017f0:	2b00      	cmp	r3, #0
 81017f2:	d007      	beq.n	8101804 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 81017f4:	4b39      	ldr	r3, [pc, #228]	@ (81018dc <xQueueGenericSend+0x200>)
 81017f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81017fa:	601a      	str	r2, [r3, #0]
 81017fc:	f3bf 8f4f 	dsb	sy
 8101800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8101804:	f001 fe12 	bl	810342c <vPortExitCritical>
				return pdPASS;
 8101808:	2301      	movs	r3, #1
 810180a:	e063      	b.n	81018d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	2b00      	cmp	r3, #0
 8101810:	d103      	bne.n	810181a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8101812:	f001 fe0b 	bl	810342c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8101816:	2300      	movs	r3, #0
 8101818:	e05c      	b.n	81018d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810181a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810181c:	2b00      	cmp	r3, #0
 810181e:	d106      	bne.n	810182e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8101820:	f107 0314 	add.w	r3, r7, #20
 8101824:	4618      	mov	r0, r3
 8101826:	f000 ff79 	bl	810271c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810182a:	2301      	movs	r3, #1
 810182c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810182e:	f001 fdfd 	bl	810342c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8101832:	f000 fd27 	bl	8102284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8101836:	f001 fdc7 	bl	81033c8 <vPortEnterCritical>
 810183a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810183c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8101840:	b25b      	sxtb	r3, r3
 8101842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101846:	d103      	bne.n	8101850 <xQueueGenericSend+0x174>
 8101848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810184a:	2200      	movs	r2, #0
 810184c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8101850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8101856:	b25b      	sxtb	r3, r3
 8101858:	f1b3 3fff 	cmp.w	r3, #4294967295
 810185c:	d103      	bne.n	8101866 <xQueueGenericSend+0x18a>
 810185e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101860:	2200      	movs	r2, #0
 8101862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8101866:	f001 fde1 	bl	810342c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810186a:	1d3a      	adds	r2, r7, #4
 810186c:	f107 0314 	add.w	r3, r7, #20
 8101870:	4611      	mov	r1, r2
 8101872:	4618      	mov	r0, r3
 8101874:	f000 ff68 	bl	8102748 <xTaskCheckForTimeOut>
 8101878:	4603      	mov	r3, r0
 810187a:	2b00      	cmp	r3, #0
 810187c:	d124      	bne.n	81018c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810187e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101880:	f000 fb60 	bl	8101f44 <prvIsQueueFull>
 8101884:	4603      	mov	r3, r0
 8101886:	2b00      	cmp	r3, #0
 8101888:	d018      	beq.n	81018bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810188a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810188c:	3310      	adds	r3, #16
 810188e:	687a      	ldr	r2, [r7, #4]
 8101890:	4611      	mov	r1, r2
 8101892:	4618      	mov	r0, r3
 8101894:	f000 feb8 	bl	8102608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8101898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810189a:	f000 faeb 	bl	8101e74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810189e:	f000 fcff 	bl	81022a0 <xTaskResumeAll>
 81018a2:	4603      	mov	r3, r0
 81018a4:	2b00      	cmp	r3, #0
 81018a6:	f47f af7c 	bne.w	81017a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 81018aa:	4b0c      	ldr	r3, [pc, #48]	@ (81018dc <xQueueGenericSend+0x200>)
 81018ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81018b0:	601a      	str	r2, [r3, #0]
 81018b2:	f3bf 8f4f 	dsb	sy
 81018b6:	f3bf 8f6f 	isb	sy
 81018ba:	e772      	b.n	81017a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81018bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81018be:	f000 fad9 	bl	8101e74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81018c2:	f000 fced 	bl	81022a0 <xTaskResumeAll>
 81018c6:	e76c      	b.n	81017a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81018c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81018ca:	f000 fad3 	bl	8101e74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81018ce:	f000 fce7 	bl	81022a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81018d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81018d4:	4618      	mov	r0, r3
 81018d6:	3738      	adds	r7, #56	@ 0x38
 81018d8:	46bd      	mov	sp, r7
 81018da:	bd80      	pop	{r7, pc}
 81018dc:	e000ed04 	.word	0xe000ed04

081018e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 81018e0:	b580      	push	{r7, lr}
 81018e2:	b08e      	sub	sp, #56	@ 0x38
 81018e4:	af00      	add	r7, sp, #0
 81018e6:	6078      	str	r0, [r7, #4]
 81018e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 81018ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81018f0:	2b00      	cmp	r3, #0
 81018f2:	d10b      	bne.n	810190c <xQueueGiveFromISR+0x2c>
	__asm volatile
 81018f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81018f8:	f383 8811 	msr	BASEPRI, r3
 81018fc:	f3bf 8f6f 	isb	sy
 8101900:	f3bf 8f4f 	dsb	sy
 8101904:	623b      	str	r3, [r7, #32]
}
 8101906:	bf00      	nop
 8101908:	bf00      	nop
 810190a:	e7fd      	b.n	8101908 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810190c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101910:	2b00      	cmp	r3, #0
 8101912:	d00b      	beq.n	810192c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8101914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101918:	f383 8811 	msr	BASEPRI, r3
 810191c:	f3bf 8f6f 	isb	sy
 8101920:	f3bf 8f4f 	dsb	sy
 8101924:	61fb      	str	r3, [r7, #28]
}
 8101926:	bf00      	nop
 8101928:	bf00      	nop
 810192a:	e7fd      	b.n	8101928 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810192c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	2b00      	cmp	r3, #0
 8101932:	d103      	bne.n	810193c <xQueueGiveFromISR+0x5c>
 8101934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101936:	689b      	ldr	r3, [r3, #8]
 8101938:	2b00      	cmp	r3, #0
 810193a:	d101      	bne.n	8101940 <xQueueGiveFromISR+0x60>
 810193c:	2301      	movs	r3, #1
 810193e:	e000      	b.n	8101942 <xQueueGiveFromISR+0x62>
 8101940:	2300      	movs	r3, #0
 8101942:	2b00      	cmp	r3, #0
 8101944:	d10b      	bne.n	810195e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8101946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810194a:	f383 8811 	msr	BASEPRI, r3
 810194e:	f3bf 8f6f 	isb	sy
 8101952:	f3bf 8f4f 	dsb	sy
 8101956:	61bb      	str	r3, [r7, #24]
}
 8101958:	bf00      	nop
 810195a:	bf00      	nop
 810195c:	e7fd      	b.n	810195a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810195e:	f001 fdf1 	bl	8103544 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8101962:	f3ef 8211 	mrs	r2, BASEPRI
 8101966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810196a:	f383 8811 	msr	BASEPRI, r3
 810196e:	f3bf 8f6f 	isb	sy
 8101972:	f3bf 8f4f 	dsb	sy
 8101976:	617a      	str	r2, [r7, #20]
 8101978:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 810197a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810197e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101982:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8101984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810198a:	429a      	cmp	r2, r3
 810198c:	d22b      	bcs.n	81019e6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101990:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8101994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8101998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810199a:	1c5a      	adds	r2, r3, #1
 810199c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810199e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81019a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81019a8:	d112      	bne.n	81019d0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81019aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81019ae:	2b00      	cmp	r3, #0
 81019b0:	d016      	beq.n	81019e0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81019b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81019b4:	3324      	adds	r3, #36	@ 0x24
 81019b6:	4618      	mov	r0, r3
 81019b8:	f000 fe4c 	bl	8102654 <xTaskRemoveFromEventList>
 81019bc:	4603      	mov	r3, r0
 81019be:	2b00      	cmp	r3, #0
 81019c0:	d00e      	beq.n	81019e0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81019c2:	683b      	ldr	r3, [r7, #0]
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	d00b      	beq.n	81019e0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81019c8:	683b      	ldr	r3, [r7, #0]
 81019ca:	2201      	movs	r2, #1
 81019cc:	601a      	str	r2, [r3, #0]
 81019ce:	e007      	b.n	81019e0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81019d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81019d4:	3301      	adds	r3, #1
 81019d6:	b2db      	uxtb	r3, r3
 81019d8:	b25a      	sxtb	r2, r3
 81019da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81019dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 81019e0:	2301      	movs	r3, #1
 81019e2:	637b      	str	r3, [r7, #52]	@ 0x34
 81019e4:	e001      	b.n	81019ea <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81019e6:	2300      	movs	r3, #0
 81019e8:	637b      	str	r3, [r7, #52]	@ 0x34
 81019ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81019ec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81019ee:	68fb      	ldr	r3, [r7, #12]
 81019f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81019f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81019f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81019f8:	4618      	mov	r0, r3
 81019fa:	3738      	adds	r7, #56	@ 0x38
 81019fc:	46bd      	mov	sp, r7
 81019fe:	bd80      	pop	{r7, pc}

08101a00 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8101a00:	b580      	push	{r7, lr}
 8101a02:	b08e      	sub	sp, #56	@ 0x38
 8101a04:	af00      	add	r7, sp, #0
 8101a06:	6078      	str	r0, [r7, #4]
 8101a08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8101a12:	2300      	movs	r3, #0
 8101a14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8101a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101a18:	2b00      	cmp	r3, #0
 8101a1a:	d10b      	bne.n	8101a34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8101a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101a20:	f383 8811 	msr	BASEPRI, r3
 8101a24:	f3bf 8f6f 	isb	sy
 8101a28:	f3bf 8f4f 	dsb	sy
 8101a2c:	623b      	str	r3, [r7, #32]
}
 8101a2e:	bf00      	nop
 8101a30:	bf00      	nop
 8101a32:	e7fd      	b.n	8101a30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8101a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101a38:	2b00      	cmp	r3, #0
 8101a3a:	d00b      	beq.n	8101a54 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8101a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101a40:	f383 8811 	msr	BASEPRI, r3
 8101a44:	f3bf 8f6f 	isb	sy
 8101a48:	f3bf 8f4f 	dsb	sy
 8101a4c:	61fb      	str	r3, [r7, #28]
}
 8101a4e:	bf00      	nop
 8101a50:	bf00      	nop
 8101a52:	e7fd      	b.n	8101a50 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8101a54:	f000 ff9e 	bl	8102994 <xTaskGetSchedulerState>
 8101a58:	4603      	mov	r3, r0
 8101a5a:	2b00      	cmp	r3, #0
 8101a5c:	d102      	bne.n	8101a64 <xQueueSemaphoreTake+0x64>
 8101a5e:	683b      	ldr	r3, [r7, #0]
 8101a60:	2b00      	cmp	r3, #0
 8101a62:	d101      	bne.n	8101a68 <xQueueSemaphoreTake+0x68>
 8101a64:	2301      	movs	r3, #1
 8101a66:	e000      	b.n	8101a6a <xQueueSemaphoreTake+0x6a>
 8101a68:	2300      	movs	r3, #0
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d10b      	bne.n	8101a86 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8101a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101a72:	f383 8811 	msr	BASEPRI, r3
 8101a76:	f3bf 8f6f 	isb	sy
 8101a7a:	f3bf 8f4f 	dsb	sy
 8101a7e:	61bb      	str	r3, [r7, #24]
}
 8101a80:	bf00      	nop
 8101a82:	bf00      	nop
 8101a84:	e7fd      	b.n	8101a82 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8101a86:	f001 fc9f 	bl	81033c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8101a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101a8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8101a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a92:	2b00      	cmp	r3, #0
 8101a94:	d024      	beq.n	8101ae0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8101a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a98:	1e5a      	subs	r2, r3, #1
 8101a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101a9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8101a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101aa0:	681b      	ldr	r3, [r3, #0]
 8101aa2:	2b00      	cmp	r3, #0
 8101aa4:	d104      	bne.n	8101ab0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8101aa6:	f001 f921 	bl	8102cec <pvTaskIncrementMutexHeldCount>
 8101aaa:	4602      	mov	r2, r0
 8101aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101aae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8101ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101ab2:	691b      	ldr	r3, [r3, #16]
 8101ab4:	2b00      	cmp	r3, #0
 8101ab6:	d00f      	beq.n	8101ad8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101aba:	3310      	adds	r3, #16
 8101abc:	4618      	mov	r0, r3
 8101abe:	f000 fdc9 	bl	8102654 <xTaskRemoveFromEventList>
 8101ac2:	4603      	mov	r3, r0
 8101ac4:	2b00      	cmp	r3, #0
 8101ac6:	d007      	beq.n	8101ad8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8101ac8:	4b54      	ldr	r3, [pc, #336]	@ (8101c1c <xQueueSemaphoreTake+0x21c>)
 8101aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101ace:	601a      	str	r2, [r3, #0]
 8101ad0:	f3bf 8f4f 	dsb	sy
 8101ad4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8101ad8:	f001 fca8 	bl	810342c <vPortExitCritical>
				return pdPASS;
 8101adc:	2301      	movs	r3, #1
 8101ade:	e098      	b.n	8101c12 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8101ae0:	683b      	ldr	r3, [r7, #0]
 8101ae2:	2b00      	cmp	r3, #0
 8101ae4:	d112      	bne.n	8101b0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8101ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101ae8:	2b00      	cmp	r3, #0
 8101aea:	d00b      	beq.n	8101b04 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8101aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101af0:	f383 8811 	msr	BASEPRI, r3
 8101af4:	f3bf 8f6f 	isb	sy
 8101af8:	f3bf 8f4f 	dsb	sy
 8101afc:	617b      	str	r3, [r7, #20]
}
 8101afe:	bf00      	nop
 8101b00:	bf00      	nop
 8101b02:	e7fd      	b.n	8101b00 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8101b04:	f001 fc92 	bl	810342c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8101b08:	2300      	movs	r3, #0
 8101b0a:	e082      	b.n	8101c12 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8101b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101b0e:	2b00      	cmp	r3, #0
 8101b10:	d106      	bne.n	8101b20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8101b12:	f107 030c 	add.w	r3, r7, #12
 8101b16:	4618      	mov	r0, r3
 8101b18:	f000 fe00 	bl	810271c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8101b1c:	2301      	movs	r3, #1
 8101b1e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8101b20:	f001 fc84 	bl	810342c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8101b24:	f000 fbae 	bl	8102284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8101b28:	f001 fc4e 	bl	81033c8 <vPortEnterCritical>
 8101b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8101b32:	b25b      	sxtb	r3, r3
 8101b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101b38:	d103      	bne.n	8101b42 <xQueueSemaphoreTake+0x142>
 8101b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b3c:	2200      	movs	r2, #0
 8101b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8101b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8101b48:	b25b      	sxtb	r3, r3
 8101b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101b4e:	d103      	bne.n	8101b58 <xQueueSemaphoreTake+0x158>
 8101b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b52:	2200      	movs	r2, #0
 8101b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8101b58:	f001 fc68 	bl	810342c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8101b5c:	463a      	mov	r2, r7
 8101b5e:	f107 030c 	add.w	r3, r7, #12
 8101b62:	4611      	mov	r1, r2
 8101b64:	4618      	mov	r0, r3
 8101b66:	f000 fdef 	bl	8102748 <xTaskCheckForTimeOut>
 8101b6a:	4603      	mov	r3, r0
 8101b6c:	2b00      	cmp	r3, #0
 8101b6e:	d132      	bne.n	8101bd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8101b70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101b72:	f000 f9d1 	bl	8101f18 <prvIsQueueEmpty>
 8101b76:	4603      	mov	r3, r0
 8101b78:	2b00      	cmp	r3, #0
 8101b7a:	d026      	beq.n	8101bca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8101b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b7e:	681b      	ldr	r3, [r3, #0]
 8101b80:	2b00      	cmp	r3, #0
 8101b82:	d109      	bne.n	8101b98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8101b84:	f001 fc20 	bl	81033c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8101b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b8a:	689b      	ldr	r3, [r3, #8]
 8101b8c:	4618      	mov	r0, r3
 8101b8e:	f000 ff1f 	bl	81029d0 <xTaskPriorityInherit>
 8101b92:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8101b94:	f001 fc4a 	bl	810342c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8101b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b9a:	3324      	adds	r3, #36	@ 0x24
 8101b9c:	683a      	ldr	r2, [r7, #0]
 8101b9e:	4611      	mov	r1, r2
 8101ba0:	4618      	mov	r0, r3
 8101ba2:	f000 fd31 	bl	8102608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8101ba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101ba8:	f000 f964 	bl	8101e74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8101bac:	f000 fb78 	bl	81022a0 <xTaskResumeAll>
 8101bb0:	4603      	mov	r3, r0
 8101bb2:	2b00      	cmp	r3, #0
 8101bb4:	f47f af67 	bne.w	8101a86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8101bb8:	4b18      	ldr	r3, [pc, #96]	@ (8101c1c <xQueueSemaphoreTake+0x21c>)
 8101bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101bbe:	601a      	str	r2, [r3, #0]
 8101bc0:	f3bf 8f4f 	dsb	sy
 8101bc4:	f3bf 8f6f 	isb	sy
 8101bc8:	e75d      	b.n	8101a86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8101bca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101bcc:	f000 f952 	bl	8101e74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8101bd0:	f000 fb66 	bl	81022a0 <xTaskResumeAll>
 8101bd4:	e757      	b.n	8101a86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8101bd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101bd8:	f000 f94c 	bl	8101e74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8101bdc:	f000 fb60 	bl	81022a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8101be0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101be2:	f000 f999 	bl	8101f18 <prvIsQueueEmpty>
 8101be6:	4603      	mov	r3, r0
 8101be8:	2b00      	cmp	r3, #0
 8101bea:	f43f af4c 	beq.w	8101a86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8101bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101bf0:	2b00      	cmp	r3, #0
 8101bf2:	d00d      	beq.n	8101c10 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8101bf4:	f001 fbe8 	bl	81033c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8101bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101bfa:	f000 f893 	bl	8101d24 <prvGetDisinheritPriorityAfterTimeout>
 8101bfe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8101c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101c02:	689b      	ldr	r3, [r3, #8]
 8101c04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101c06:	4618      	mov	r0, r3
 8101c08:	f000 ffe0 	bl	8102bcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8101c0c:	f001 fc0e 	bl	810342c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8101c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8101c12:	4618      	mov	r0, r3
 8101c14:	3738      	adds	r7, #56	@ 0x38
 8101c16:	46bd      	mov	sp, r7
 8101c18:	bd80      	pop	{r7, pc}
 8101c1a:	bf00      	nop
 8101c1c:	e000ed04 	.word	0xe000ed04

08101c20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8101c20:	b580      	push	{r7, lr}
 8101c22:	b08e      	sub	sp, #56	@ 0x38
 8101c24:	af00      	add	r7, sp, #0
 8101c26:	60f8      	str	r0, [r7, #12]
 8101c28:	60b9      	str	r1, [r7, #8]
 8101c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8101c2c:	68fb      	ldr	r3, [r7, #12]
 8101c2e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8101c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101c32:	2b00      	cmp	r3, #0
 8101c34:	d10b      	bne.n	8101c4e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8101c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c3a:	f383 8811 	msr	BASEPRI, r3
 8101c3e:	f3bf 8f6f 	isb	sy
 8101c42:	f3bf 8f4f 	dsb	sy
 8101c46:	623b      	str	r3, [r7, #32]
}
 8101c48:	bf00      	nop
 8101c4a:	bf00      	nop
 8101c4c:	e7fd      	b.n	8101c4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8101c4e:	68bb      	ldr	r3, [r7, #8]
 8101c50:	2b00      	cmp	r3, #0
 8101c52:	d103      	bne.n	8101c5c <xQueueReceiveFromISR+0x3c>
 8101c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101c58:	2b00      	cmp	r3, #0
 8101c5a:	d101      	bne.n	8101c60 <xQueueReceiveFromISR+0x40>
 8101c5c:	2301      	movs	r3, #1
 8101c5e:	e000      	b.n	8101c62 <xQueueReceiveFromISR+0x42>
 8101c60:	2300      	movs	r3, #0
 8101c62:	2b00      	cmp	r3, #0
 8101c64:	d10b      	bne.n	8101c7e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8101c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c6a:	f383 8811 	msr	BASEPRI, r3
 8101c6e:	f3bf 8f6f 	isb	sy
 8101c72:	f3bf 8f4f 	dsb	sy
 8101c76:	61fb      	str	r3, [r7, #28]
}
 8101c78:	bf00      	nop
 8101c7a:	bf00      	nop
 8101c7c:	e7fd      	b.n	8101c7a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8101c7e:	f001 fc61 	bl	8103544 <vPortValidateInterruptPriority>
	__asm volatile
 8101c82:	f3ef 8211 	mrs	r2, BASEPRI
 8101c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c8a:	f383 8811 	msr	BASEPRI, r3
 8101c8e:	f3bf 8f6f 	isb	sy
 8101c92:	f3bf 8f4f 	dsb	sy
 8101c96:	61ba      	str	r2, [r7, #24]
 8101c98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8101c9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8101c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8101c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8101ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101ca6:	2b00      	cmp	r3, #0
 8101ca8:	d02f      	beq.n	8101d0a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8101caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8101cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8101cb4:	68b9      	ldr	r1, [r7, #8]
 8101cb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101cb8:	f000 f8b6 	bl	8101e28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8101cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101cbe:	1e5a      	subs	r2, r3, #1
 8101cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101cc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8101cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8101cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ccc:	d112      	bne.n	8101cf4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8101cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101cd0:	691b      	ldr	r3, [r3, #16]
 8101cd2:	2b00      	cmp	r3, #0
 8101cd4:	d016      	beq.n	8101d04 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101cd8:	3310      	adds	r3, #16
 8101cda:	4618      	mov	r0, r3
 8101cdc:	f000 fcba 	bl	8102654 <xTaskRemoveFromEventList>
 8101ce0:	4603      	mov	r3, r0
 8101ce2:	2b00      	cmp	r3, #0
 8101ce4:	d00e      	beq.n	8101d04 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	2b00      	cmp	r3, #0
 8101cea:	d00b      	beq.n	8101d04 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	2201      	movs	r2, #1
 8101cf0:	601a      	str	r2, [r3, #0]
 8101cf2:	e007      	b.n	8101d04 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8101cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101cf8:	3301      	adds	r3, #1
 8101cfa:	b2db      	uxtb	r3, r3
 8101cfc:	b25a      	sxtb	r2, r3
 8101cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8101d04:	2301      	movs	r3, #1
 8101d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8101d08:	e001      	b.n	8101d0e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8101d0a:	2300      	movs	r3, #0
 8101d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8101d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101d10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8101d12:	693b      	ldr	r3, [r7, #16]
 8101d14:	f383 8811 	msr	BASEPRI, r3
}
 8101d18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8101d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	3738      	adds	r7, #56	@ 0x38
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}

08101d24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8101d24:	b480      	push	{r7}
 8101d26:	b085      	sub	sp, #20
 8101d28:	af00      	add	r7, sp, #0
 8101d2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101d30:	2b00      	cmp	r3, #0
 8101d32:	d006      	beq.n	8101d42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	f1c3 0307 	rsb	r3, r3, #7
 8101d3e:	60fb      	str	r3, [r7, #12]
 8101d40:	e001      	b.n	8101d46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8101d42:	2300      	movs	r3, #0
 8101d44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8101d46:	68fb      	ldr	r3, [r7, #12]
	}
 8101d48:	4618      	mov	r0, r3
 8101d4a:	3714      	adds	r7, #20
 8101d4c:	46bd      	mov	sp, r7
 8101d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d52:	4770      	bx	lr

08101d54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8101d54:	b580      	push	{r7, lr}
 8101d56:	b086      	sub	sp, #24
 8101d58:	af00      	add	r7, sp, #0
 8101d5a:	60f8      	str	r0, [r7, #12]
 8101d5c:	60b9      	str	r1, [r7, #8]
 8101d5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8101d60:	2300      	movs	r3, #0
 8101d62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8101d64:	68fb      	ldr	r3, [r7, #12]
 8101d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101d68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8101d6a:	68fb      	ldr	r3, [r7, #12]
 8101d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101d6e:	2b00      	cmp	r3, #0
 8101d70:	d10d      	bne.n	8101d8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8101d72:	68fb      	ldr	r3, [r7, #12]
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	2b00      	cmp	r3, #0
 8101d78:	d14d      	bne.n	8101e16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8101d7a:	68fb      	ldr	r3, [r7, #12]
 8101d7c:	689b      	ldr	r3, [r3, #8]
 8101d7e:	4618      	mov	r0, r3
 8101d80:	f000 fe9c 	bl	8102abc <xTaskPriorityDisinherit>
 8101d84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8101d86:	68fb      	ldr	r3, [r7, #12]
 8101d88:	2200      	movs	r2, #0
 8101d8a:	609a      	str	r2, [r3, #8]
 8101d8c:	e043      	b.n	8101e16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8101d8e:	687b      	ldr	r3, [r7, #4]
 8101d90:	2b00      	cmp	r3, #0
 8101d92:	d119      	bne.n	8101dc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8101d94:	68fb      	ldr	r3, [r7, #12]
 8101d96:	6858      	ldr	r0, [r3, #4]
 8101d98:	68fb      	ldr	r3, [r7, #12]
 8101d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101d9c:	461a      	mov	r2, r3
 8101d9e:	68b9      	ldr	r1, [r7, #8]
 8101da0:	f001 fc3e 	bl	8103620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8101da4:	68fb      	ldr	r3, [r7, #12]
 8101da6:	685a      	ldr	r2, [r3, #4]
 8101da8:	68fb      	ldr	r3, [r7, #12]
 8101daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101dac:	441a      	add	r2, r3
 8101dae:	68fb      	ldr	r3, [r7, #12]
 8101db0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8101db2:	68fb      	ldr	r3, [r7, #12]
 8101db4:	685a      	ldr	r2, [r3, #4]
 8101db6:	68fb      	ldr	r3, [r7, #12]
 8101db8:	689b      	ldr	r3, [r3, #8]
 8101dba:	429a      	cmp	r2, r3
 8101dbc:	d32b      	bcc.n	8101e16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8101dbe:	68fb      	ldr	r3, [r7, #12]
 8101dc0:	681a      	ldr	r2, [r3, #0]
 8101dc2:	68fb      	ldr	r3, [r7, #12]
 8101dc4:	605a      	str	r2, [r3, #4]
 8101dc6:	e026      	b.n	8101e16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8101dc8:	68fb      	ldr	r3, [r7, #12]
 8101dca:	68d8      	ldr	r0, [r3, #12]
 8101dcc:	68fb      	ldr	r3, [r7, #12]
 8101dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101dd0:	461a      	mov	r2, r3
 8101dd2:	68b9      	ldr	r1, [r7, #8]
 8101dd4:	f001 fc24 	bl	8103620 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8101dd8:	68fb      	ldr	r3, [r7, #12]
 8101dda:	68da      	ldr	r2, [r3, #12]
 8101ddc:	68fb      	ldr	r3, [r7, #12]
 8101dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101de0:	425b      	negs	r3, r3
 8101de2:	441a      	add	r2, r3
 8101de4:	68fb      	ldr	r3, [r7, #12]
 8101de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8101de8:	68fb      	ldr	r3, [r7, #12]
 8101dea:	68da      	ldr	r2, [r3, #12]
 8101dec:	68fb      	ldr	r3, [r7, #12]
 8101dee:	681b      	ldr	r3, [r3, #0]
 8101df0:	429a      	cmp	r2, r3
 8101df2:	d207      	bcs.n	8101e04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8101df4:	68fb      	ldr	r3, [r7, #12]
 8101df6:	689a      	ldr	r2, [r3, #8]
 8101df8:	68fb      	ldr	r3, [r7, #12]
 8101dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101dfc:	425b      	negs	r3, r3
 8101dfe:	441a      	add	r2, r3
 8101e00:	68fb      	ldr	r3, [r7, #12]
 8101e02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	2b02      	cmp	r3, #2
 8101e08:	d105      	bne.n	8101e16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8101e0a:	693b      	ldr	r3, [r7, #16]
 8101e0c:	2b00      	cmp	r3, #0
 8101e0e:	d002      	beq.n	8101e16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8101e10:	693b      	ldr	r3, [r7, #16]
 8101e12:	3b01      	subs	r3, #1
 8101e14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8101e16:	693b      	ldr	r3, [r7, #16]
 8101e18:	1c5a      	adds	r2, r3, #1
 8101e1a:	68fb      	ldr	r3, [r7, #12]
 8101e1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8101e1e:	697b      	ldr	r3, [r7, #20]
}
 8101e20:	4618      	mov	r0, r3
 8101e22:	3718      	adds	r7, #24
 8101e24:	46bd      	mov	sp, r7
 8101e26:	bd80      	pop	{r7, pc}

08101e28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8101e28:	b580      	push	{r7, lr}
 8101e2a:	b082      	sub	sp, #8
 8101e2c:	af00      	add	r7, sp, #0
 8101e2e:	6078      	str	r0, [r7, #4]
 8101e30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8101e32:	687b      	ldr	r3, [r7, #4]
 8101e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101e36:	2b00      	cmp	r3, #0
 8101e38:	d018      	beq.n	8101e6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	68da      	ldr	r2, [r3, #12]
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101e42:	441a      	add	r2, r3
 8101e44:	687b      	ldr	r3, [r7, #4]
 8101e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	68da      	ldr	r2, [r3, #12]
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	689b      	ldr	r3, [r3, #8]
 8101e50:	429a      	cmp	r2, r3
 8101e52:	d303      	bcc.n	8101e5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	681a      	ldr	r2, [r3, #0]
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	68d9      	ldr	r1, [r3, #12]
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101e64:	461a      	mov	r2, r3
 8101e66:	6838      	ldr	r0, [r7, #0]
 8101e68:	f001 fbda 	bl	8103620 <memcpy>
	}
}
 8101e6c:	bf00      	nop
 8101e6e:	3708      	adds	r7, #8
 8101e70:	46bd      	mov	sp, r7
 8101e72:	bd80      	pop	{r7, pc}

08101e74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8101e74:	b580      	push	{r7, lr}
 8101e76:	b084      	sub	sp, #16
 8101e78:	af00      	add	r7, sp, #0
 8101e7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8101e7c:	f001 faa4 	bl	81033c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8101e86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8101e88:	e011      	b.n	8101eae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101e8e:	2b00      	cmp	r3, #0
 8101e90:	d012      	beq.n	8101eb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	3324      	adds	r3, #36	@ 0x24
 8101e96:	4618      	mov	r0, r3
 8101e98:	f000 fbdc 	bl	8102654 <xTaskRemoveFromEventList>
 8101e9c:	4603      	mov	r3, r0
 8101e9e:	2b00      	cmp	r3, #0
 8101ea0:	d001      	beq.n	8101ea6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8101ea2:	f000 fcb5 	bl	8102810 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8101ea6:	7bfb      	ldrb	r3, [r7, #15]
 8101ea8:	3b01      	subs	r3, #1
 8101eaa:	b2db      	uxtb	r3, r3
 8101eac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8101eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8101eb2:	2b00      	cmp	r3, #0
 8101eb4:	dce9      	bgt.n	8101e8a <prvUnlockQueue+0x16>
 8101eb6:	e000      	b.n	8101eba <prvUnlockQueue+0x46>
					break;
 8101eb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	22ff      	movs	r2, #255	@ 0xff
 8101ebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8101ec2:	f001 fab3 	bl	810342c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8101ec6:	f001 fa7f 	bl	81033c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8101ed0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8101ed2:	e011      	b.n	8101ef8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	691b      	ldr	r3, [r3, #16]
 8101ed8:	2b00      	cmp	r3, #0
 8101eda:	d012      	beq.n	8101f02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	3310      	adds	r3, #16
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	f000 fbb7 	bl	8102654 <xTaskRemoveFromEventList>
 8101ee6:	4603      	mov	r3, r0
 8101ee8:	2b00      	cmp	r3, #0
 8101eea:	d001      	beq.n	8101ef0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8101eec:	f000 fc90 	bl	8102810 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8101ef0:	7bbb      	ldrb	r3, [r7, #14]
 8101ef2:	3b01      	subs	r3, #1
 8101ef4:	b2db      	uxtb	r3, r3
 8101ef6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8101ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8101efc:	2b00      	cmp	r3, #0
 8101efe:	dce9      	bgt.n	8101ed4 <prvUnlockQueue+0x60>
 8101f00:	e000      	b.n	8101f04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8101f02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	22ff      	movs	r2, #255	@ 0xff
 8101f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8101f0c:	f001 fa8e 	bl	810342c <vPortExitCritical>
}
 8101f10:	bf00      	nop
 8101f12:	3710      	adds	r7, #16
 8101f14:	46bd      	mov	sp, r7
 8101f16:	bd80      	pop	{r7, pc}

08101f18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	b084      	sub	sp, #16
 8101f1c:	af00      	add	r7, sp, #0
 8101f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8101f20:	f001 fa52 	bl	81033c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101f28:	2b00      	cmp	r3, #0
 8101f2a:	d102      	bne.n	8101f32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8101f2c:	2301      	movs	r3, #1
 8101f2e:	60fb      	str	r3, [r7, #12]
 8101f30:	e001      	b.n	8101f36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8101f32:	2300      	movs	r3, #0
 8101f34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8101f36:	f001 fa79 	bl	810342c <vPortExitCritical>

	return xReturn;
 8101f3a:	68fb      	ldr	r3, [r7, #12]
}
 8101f3c:	4618      	mov	r0, r3
 8101f3e:	3710      	adds	r7, #16
 8101f40:	46bd      	mov	sp, r7
 8101f42:	bd80      	pop	{r7, pc}

08101f44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8101f44:	b580      	push	{r7, lr}
 8101f46:	b084      	sub	sp, #16
 8101f48:	af00      	add	r7, sp, #0
 8101f4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8101f4c:	f001 fa3c 	bl	81033c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101f58:	429a      	cmp	r2, r3
 8101f5a:	d102      	bne.n	8101f62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8101f5c:	2301      	movs	r3, #1
 8101f5e:	60fb      	str	r3, [r7, #12]
 8101f60:	e001      	b.n	8101f66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8101f62:	2300      	movs	r3, #0
 8101f64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8101f66:	f001 fa61 	bl	810342c <vPortExitCritical>

	return xReturn;
 8101f6a:	68fb      	ldr	r3, [r7, #12]
}
 8101f6c:	4618      	mov	r0, r3
 8101f6e:	3710      	adds	r7, #16
 8101f70:	46bd      	mov	sp, r7
 8101f72:	bd80      	pop	{r7, pc}

08101f74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8101f74:	b580      	push	{r7, lr}
 8101f76:	b08c      	sub	sp, #48	@ 0x30
 8101f78:	af04      	add	r7, sp, #16
 8101f7a:	60f8      	str	r0, [r7, #12]
 8101f7c:	60b9      	str	r1, [r7, #8]
 8101f7e:	603b      	str	r3, [r7, #0]
 8101f80:	4613      	mov	r3, r2
 8101f82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8101f84:	88fb      	ldrh	r3, [r7, #6]
 8101f86:	009b      	lsls	r3, r3, #2
 8101f88:	4618      	mov	r0, r3
 8101f8a:	f000 ff29 	bl	8102de0 <pvPortMalloc>
 8101f8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8101f90:	697b      	ldr	r3, [r7, #20]
 8101f92:	2b00      	cmp	r3, #0
 8101f94:	d00e      	beq.n	8101fb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8101f96:	205c      	movs	r0, #92	@ 0x5c
 8101f98:	f000 ff22 	bl	8102de0 <pvPortMalloc>
 8101f9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8101f9e:	69fb      	ldr	r3, [r7, #28]
 8101fa0:	2b00      	cmp	r3, #0
 8101fa2:	d003      	beq.n	8101fac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8101fa4:	69fb      	ldr	r3, [r7, #28]
 8101fa6:	697a      	ldr	r2, [r7, #20]
 8101fa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8101faa:	e005      	b.n	8101fb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8101fac:	6978      	ldr	r0, [r7, #20]
 8101fae:	f000 ffe5 	bl	8102f7c <vPortFree>
 8101fb2:	e001      	b.n	8101fb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8101fb4:	2300      	movs	r3, #0
 8101fb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8101fb8:	69fb      	ldr	r3, [r7, #28]
 8101fba:	2b00      	cmp	r3, #0
 8101fbc:	d013      	beq.n	8101fe6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8101fbe:	88fa      	ldrh	r2, [r7, #6]
 8101fc0:	2300      	movs	r3, #0
 8101fc2:	9303      	str	r3, [sp, #12]
 8101fc4:	69fb      	ldr	r3, [r7, #28]
 8101fc6:	9302      	str	r3, [sp, #8]
 8101fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101fca:	9301      	str	r3, [sp, #4]
 8101fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101fce:	9300      	str	r3, [sp, #0]
 8101fd0:	683b      	ldr	r3, [r7, #0]
 8101fd2:	68b9      	ldr	r1, [r7, #8]
 8101fd4:	68f8      	ldr	r0, [r7, #12]
 8101fd6:	f000 f80e 	bl	8101ff6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8101fda:	69f8      	ldr	r0, [r7, #28]
 8101fdc:	f000 f89c 	bl	8102118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8101fe0:	2301      	movs	r3, #1
 8101fe2:	61bb      	str	r3, [r7, #24]
 8101fe4:	e002      	b.n	8101fec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8101fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8101fea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8101fec:	69bb      	ldr	r3, [r7, #24]
	}
 8101fee:	4618      	mov	r0, r3
 8101ff0:	3720      	adds	r7, #32
 8101ff2:	46bd      	mov	sp, r7
 8101ff4:	bd80      	pop	{r7, pc}

08101ff6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8101ff6:	b580      	push	{r7, lr}
 8101ff8:	b088      	sub	sp, #32
 8101ffa:	af00      	add	r7, sp, #0
 8101ffc:	60f8      	str	r0, [r7, #12]
 8101ffe:	60b9      	str	r1, [r7, #8]
 8102000:	607a      	str	r2, [r7, #4]
 8102002:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8102004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102006:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	009b      	lsls	r3, r3, #2
 810200c:	461a      	mov	r2, r3
 810200e:	21a5      	movs	r1, #165	@ 0xa5
 8102010:	f001 fada 	bl	81035c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8102014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810201e:	3b01      	subs	r3, #1
 8102020:	009b      	lsls	r3, r3, #2
 8102022:	4413      	add	r3, r2
 8102024:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8102026:	69bb      	ldr	r3, [r7, #24]
 8102028:	f023 0307 	bic.w	r3, r3, #7
 810202c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810202e:	69bb      	ldr	r3, [r7, #24]
 8102030:	f003 0307 	and.w	r3, r3, #7
 8102034:	2b00      	cmp	r3, #0
 8102036:	d00b      	beq.n	8102050 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8102038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810203c:	f383 8811 	msr	BASEPRI, r3
 8102040:	f3bf 8f6f 	isb	sy
 8102044:	f3bf 8f4f 	dsb	sy
 8102048:	617b      	str	r3, [r7, #20]
}
 810204a:	bf00      	nop
 810204c:	bf00      	nop
 810204e:	e7fd      	b.n	810204c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8102050:	68bb      	ldr	r3, [r7, #8]
 8102052:	2b00      	cmp	r3, #0
 8102054:	d01f      	beq.n	8102096 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102056:	2300      	movs	r3, #0
 8102058:	61fb      	str	r3, [r7, #28]
 810205a:	e012      	b.n	8102082 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810205c:	68ba      	ldr	r2, [r7, #8]
 810205e:	69fb      	ldr	r3, [r7, #28]
 8102060:	4413      	add	r3, r2
 8102062:	7819      	ldrb	r1, [r3, #0]
 8102064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102066:	69fb      	ldr	r3, [r7, #28]
 8102068:	4413      	add	r3, r2
 810206a:	3334      	adds	r3, #52	@ 0x34
 810206c:	460a      	mov	r2, r1
 810206e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8102070:	68ba      	ldr	r2, [r7, #8]
 8102072:	69fb      	ldr	r3, [r7, #28]
 8102074:	4413      	add	r3, r2
 8102076:	781b      	ldrb	r3, [r3, #0]
 8102078:	2b00      	cmp	r3, #0
 810207a:	d006      	beq.n	810208a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810207c:	69fb      	ldr	r3, [r7, #28]
 810207e:	3301      	adds	r3, #1
 8102080:	61fb      	str	r3, [r7, #28]
 8102082:	69fb      	ldr	r3, [r7, #28]
 8102084:	2b0f      	cmp	r3, #15
 8102086:	d9e9      	bls.n	810205c <prvInitialiseNewTask+0x66>
 8102088:	e000      	b.n	810208c <prvInitialiseNewTask+0x96>
			{
				break;
 810208a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810208c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810208e:	2200      	movs	r2, #0
 8102090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8102094:	e003      	b.n	810209e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8102096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102098:	2200      	movs	r2, #0
 810209a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81020a0:	2b06      	cmp	r3, #6
 81020a2:	d901      	bls.n	81020a8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81020a4:	2306      	movs	r3, #6
 81020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81020ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81020b2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81020b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020b6:	2200      	movs	r2, #0
 81020b8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020bc:	3304      	adds	r3, #4
 81020be:	4618      	mov	r0, r3
 81020c0:	f7ff f97e 	bl	81013c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81020c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020c6:	3318      	adds	r3, #24
 81020c8:	4618      	mov	r0, r3
 81020ca:	f7ff f979 	bl	81013c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81020ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81020d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81020d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81020d6:	f1c3 0207 	rsb	r2, r3, #7
 81020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81020de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81020e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020e6:	2200      	movs	r2, #0
 81020e8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81020ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81020ec:	2200      	movs	r2, #0
 81020ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81020f2:	683a      	ldr	r2, [r7, #0]
 81020f4:	68f9      	ldr	r1, [r7, #12]
 81020f6:	69b8      	ldr	r0, [r7, #24]
 81020f8:	f001 f860 	bl	81031bc <pxPortInitialiseStack>
 81020fc:	4602      	mov	r2, r0
 81020fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102100:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8102102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102104:	2b00      	cmp	r3, #0
 8102106:	d002      	beq.n	810210e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8102108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810210a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810210c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810210e:	bf00      	nop
 8102110:	3720      	adds	r7, #32
 8102112:	46bd      	mov	sp, r7
 8102114:	bd80      	pop	{r7, pc}
	...

08102118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8102118:	b580      	push	{r7, lr}
 810211a:	b082      	sub	sp, #8
 810211c:	af00      	add	r7, sp, #0
 810211e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8102120:	f001 f952 	bl	81033c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8102124:	4b2c      	ldr	r3, [pc, #176]	@ (81021d8 <prvAddNewTaskToReadyList+0xc0>)
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	3301      	adds	r3, #1
 810212a:	4a2b      	ldr	r2, [pc, #172]	@ (81021d8 <prvAddNewTaskToReadyList+0xc0>)
 810212c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810212e:	4b2b      	ldr	r3, [pc, #172]	@ (81021dc <prvAddNewTaskToReadyList+0xc4>)
 8102130:	681b      	ldr	r3, [r3, #0]
 8102132:	2b00      	cmp	r3, #0
 8102134:	d109      	bne.n	810214a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8102136:	4a29      	ldr	r2, [pc, #164]	@ (81021dc <prvAddNewTaskToReadyList+0xc4>)
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810213c:	4b26      	ldr	r3, [pc, #152]	@ (81021d8 <prvAddNewTaskToReadyList+0xc0>)
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	2b01      	cmp	r3, #1
 8102142:	d110      	bne.n	8102166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8102144:	f000 fb88 	bl	8102858 <prvInitialiseTaskLists>
 8102148:	e00d      	b.n	8102166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810214a:	4b25      	ldr	r3, [pc, #148]	@ (81021e0 <prvAddNewTaskToReadyList+0xc8>)
 810214c:	681b      	ldr	r3, [r3, #0]
 810214e:	2b00      	cmp	r3, #0
 8102150:	d109      	bne.n	8102166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8102152:	4b22      	ldr	r3, [pc, #136]	@ (81021dc <prvAddNewTaskToReadyList+0xc4>)
 8102154:	681b      	ldr	r3, [r3, #0]
 8102156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810215c:	429a      	cmp	r2, r3
 810215e:	d802      	bhi.n	8102166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8102160:	4a1e      	ldr	r2, [pc, #120]	@ (81021dc <prvAddNewTaskToReadyList+0xc4>)
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8102166:	4b1f      	ldr	r3, [pc, #124]	@ (81021e4 <prvAddNewTaskToReadyList+0xcc>)
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	3301      	adds	r3, #1
 810216c:	4a1d      	ldr	r2, [pc, #116]	@ (81021e4 <prvAddNewTaskToReadyList+0xcc>)
 810216e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8102170:	4b1c      	ldr	r3, [pc, #112]	@ (81021e4 <prvAddNewTaskToReadyList+0xcc>)
 8102172:	681a      	ldr	r2, [r3, #0]
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810217c:	2201      	movs	r2, #1
 810217e:	409a      	lsls	r2, r3
 8102180:	4b19      	ldr	r3, [pc, #100]	@ (81021e8 <prvAddNewTaskToReadyList+0xd0>)
 8102182:	681b      	ldr	r3, [r3, #0]
 8102184:	4313      	orrs	r3, r2
 8102186:	4a18      	ldr	r2, [pc, #96]	@ (81021e8 <prvAddNewTaskToReadyList+0xd0>)
 8102188:	6013      	str	r3, [r2, #0]
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810218e:	4613      	mov	r3, r2
 8102190:	009b      	lsls	r3, r3, #2
 8102192:	4413      	add	r3, r2
 8102194:	009b      	lsls	r3, r3, #2
 8102196:	4a15      	ldr	r2, [pc, #84]	@ (81021ec <prvAddNewTaskToReadyList+0xd4>)
 8102198:	441a      	add	r2, r3
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	3304      	adds	r3, #4
 810219e:	4619      	mov	r1, r3
 81021a0:	4610      	mov	r0, r2
 81021a2:	f7ff f91a 	bl	81013da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81021a6:	f001 f941 	bl	810342c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81021aa:	4b0d      	ldr	r3, [pc, #52]	@ (81021e0 <prvAddNewTaskToReadyList+0xc8>)
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	2b00      	cmp	r3, #0
 81021b0:	d00e      	beq.n	81021d0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81021b2:	4b0a      	ldr	r3, [pc, #40]	@ (81021dc <prvAddNewTaskToReadyList+0xc4>)
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81021bc:	429a      	cmp	r2, r3
 81021be:	d207      	bcs.n	81021d0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81021c0:	4b0b      	ldr	r3, [pc, #44]	@ (81021f0 <prvAddNewTaskToReadyList+0xd8>)
 81021c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81021c6:	601a      	str	r2, [r3, #0]
 81021c8:	f3bf 8f4f 	dsb	sy
 81021cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81021d0:	bf00      	nop
 81021d2:	3708      	adds	r7, #8
 81021d4:	46bd      	mov	sp, r7
 81021d6:	bd80      	pop	{r7, pc}
 81021d8:	10000148 	.word	0x10000148
 81021dc:	10000048 	.word	0x10000048
 81021e0:	10000154 	.word	0x10000154
 81021e4:	10000164 	.word	0x10000164
 81021e8:	10000150 	.word	0x10000150
 81021ec:	1000004c 	.word	0x1000004c
 81021f0:	e000ed04 	.word	0xe000ed04

081021f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81021f4:	b580      	push	{r7, lr}
 81021f6:	b086      	sub	sp, #24
 81021f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 81021fa:	4b1c      	ldr	r3, [pc, #112]	@ (810226c <vTaskStartScheduler+0x78>)
 81021fc:	9301      	str	r3, [sp, #4]
 81021fe:	2300      	movs	r3, #0
 8102200:	9300      	str	r3, [sp, #0]
 8102202:	2300      	movs	r3, #0
 8102204:	2280      	movs	r2, #128	@ 0x80
 8102206:	491a      	ldr	r1, [pc, #104]	@ (8102270 <vTaskStartScheduler+0x7c>)
 8102208:	481a      	ldr	r0, [pc, #104]	@ (8102274 <vTaskStartScheduler+0x80>)
 810220a:	f7ff feb3 	bl	8101f74 <xTaskCreate>
 810220e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	2b01      	cmp	r3, #1
 8102214:	d116      	bne.n	8102244 <vTaskStartScheduler+0x50>
	__asm volatile
 8102216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810221a:	f383 8811 	msr	BASEPRI, r3
 810221e:	f3bf 8f6f 	isb	sy
 8102222:	f3bf 8f4f 	dsb	sy
 8102226:	60bb      	str	r3, [r7, #8]
}
 8102228:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810222a:	4b13      	ldr	r3, [pc, #76]	@ (8102278 <vTaskStartScheduler+0x84>)
 810222c:	f04f 32ff 	mov.w	r2, #4294967295
 8102230:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8102232:	4b12      	ldr	r3, [pc, #72]	@ (810227c <vTaskStartScheduler+0x88>)
 8102234:	2201      	movs	r2, #1
 8102236:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8102238:	4b11      	ldr	r3, [pc, #68]	@ (8102280 <vTaskStartScheduler+0x8c>)
 810223a:	2200      	movs	r2, #0
 810223c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810223e:	f001 f847 	bl	81032d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8102242:	e00f      	b.n	8102264 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8102244:	68fb      	ldr	r3, [r7, #12]
 8102246:	f1b3 3fff 	cmp.w	r3, #4294967295
 810224a:	d10b      	bne.n	8102264 <vTaskStartScheduler+0x70>
	__asm volatile
 810224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102250:	f383 8811 	msr	BASEPRI, r3
 8102254:	f3bf 8f6f 	isb	sy
 8102258:	f3bf 8f4f 	dsb	sy
 810225c:	607b      	str	r3, [r7, #4]
}
 810225e:	bf00      	nop
 8102260:	bf00      	nop
 8102262:	e7fd      	b.n	8102260 <vTaskStartScheduler+0x6c>
}
 8102264:	bf00      	nop
 8102266:	3710      	adds	r7, #16
 8102268:	46bd      	mov	sp, r7
 810226a:	bd80      	pop	{r7, pc}
 810226c:	1000016c 	.word	0x1000016c
 8102270:	08103678 	.word	0x08103678
 8102274:	08102829 	.word	0x08102829
 8102278:	10000168 	.word	0x10000168
 810227c:	10000154 	.word	0x10000154
 8102280:	1000014c 	.word	0x1000014c

08102284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8102284:	b480      	push	{r7}
 8102286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8102288:	4b04      	ldr	r3, [pc, #16]	@ (810229c <vTaskSuspendAll+0x18>)
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	3301      	adds	r3, #1
 810228e:	4a03      	ldr	r2, [pc, #12]	@ (810229c <vTaskSuspendAll+0x18>)
 8102290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8102292:	bf00      	nop
 8102294:	46bd      	mov	sp, r7
 8102296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810229a:	4770      	bx	lr
 810229c:	10000170 	.word	0x10000170

081022a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81022a0:	b580      	push	{r7, lr}
 81022a2:	b084      	sub	sp, #16
 81022a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81022a6:	2300      	movs	r3, #0
 81022a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81022aa:	2300      	movs	r3, #0
 81022ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81022ae:	4b42      	ldr	r3, [pc, #264]	@ (81023b8 <xTaskResumeAll+0x118>)
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	2b00      	cmp	r3, #0
 81022b4:	d10b      	bne.n	81022ce <xTaskResumeAll+0x2e>
	__asm volatile
 81022b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81022ba:	f383 8811 	msr	BASEPRI, r3
 81022be:	f3bf 8f6f 	isb	sy
 81022c2:	f3bf 8f4f 	dsb	sy
 81022c6:	603b      	str	r3, [r7, #0]
}
 81022c8:	bf00      	nop
 81022ca:	bf00      	nop
 81022cc:	e7fd      	b.n	81022ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81022ce:	f001 f87b 	bl	81033c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81022d2:	4b39      	ldr	r3, [pc, #228]	@ (81023b8 <xTaskResumeAll+0x118>)
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	3b01      	subs	r3, #1
 81022d8:	4a37      	ldr	r2, [pc, #220]	@ (81023b8 <xTaskResumeAll+0x118>)
 81022da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81022dc:	4b36      	ldr	r3, [pc, #216]	@ (81023b8 <xTaskResumeAll+0x118>)
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	2b00      	cmp	r3, #0
 81022e2:	d161      	bne.n	81023a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81022e4:	4b35      	ldr	r3, [pc, #212]	@ (81023bc <xTaskResumeAll+0x11c>)
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	d05d      	beq.n	81023a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81022ec:	e02e      	b.n	810234c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81022ee:	4b34      	ldr	r3, [pc, #208]	@ (81023c0 <xTaskResumeAll+0x120>)
 81022f0:	68db      	ldr	r3, [r3, #12]
 81022f2:	68db      	ldr	r3, [r3, #12]
 81022f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81022f6:	68fb      	ldr	r3, [r7, #12]
 81022f8:	3318      	adds	r3, #24
 81022fa:	4618      	mov	r0, r3
 81022fc:	f7ff f8ca 	bl	8101494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	3304      	adds	r3, #4
 8102304:	4618      	mov	r0, r3
 8102306:	f7ff f8c5 	bl	8101494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810230a:	68fb      	ldr	r3, [r7, #12]
 810230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810230e:	2201      	movs	r2, #1
 8102310:	409a      	lsls	r2, r3
 8102312:	4b2c      	ldr	r3, [pc, #176]	@ (81023c4 <xTaskResumeAll+0x124>)
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	4313      	orrs	r3, r2
 8102318:	4a2a      	ldr	r2, [pc, #168]	@ (81023c4 <xTaskResumeAll+0x124>)
 810231a:	6013      	str	r3, [r2, #0]
 810231c:	68fb      	ldr	r3, [r7, #12]
 810231e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102320:	4613      	mov	r3, r2
 8102322:	009b      	lsls	r3, r3, #2
 8102324:	4413      	add	r3, r2
 8102326:	009b      	lsls	r3, r3, #2
 8102328:	4a27      	ldr	r2, [pc, #156]	@ (81023c8 <xTaskResumeAll+0x128>)
 810232a:	441a      	add	r2, r3
 810232c:	68fb      	ldr	r3, [r7, #12]
 810232e:	3304      	adds	r3, #4
 8102330:	4619      	mov	r1, r3
 8102332:	4610      	mov	r0, r2
 8102334:	f7ff f851 	bl	81013da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8102338:	68fb      	ldr	r3, [r7, #12]
 810233a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810233c:	4b23      	ldr	r3, [pc, #140]	@ (81023cc <xTaskResumeAll+0x12c>)
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102342:	429a      	cmp	r2, r3
 8102344:	d302      	bcc.n	810234c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8102346:	4b22      	ldr	r3, [pc, #136]	@ (81023d0 <xTaskResumeAll+0x130>)
 8102348:	2201      	movs	r2, #1
 810234a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810234c:	4b1c      	ldr	r3, [pc, #112]	@ (81023c0 <xTaskResumeAll+0x120>)
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	2b00      	cmp	r3, #0
 8102352:	d1cc      	bne.n	81022ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8102354:	68fb      	ldr	r3, [r7, #12]
 8102356:	2b00      	cmp	r3, #0
 8102358:	d001      	beq.n	810235e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810235a:	f000 fafb 	bl	8102954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810235e:	4b1d      	ldr	r3, [pc, #116]	@ (81023d4 <xTaskResumeAll+0x134>)
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	2b00      	cmp	r3, #0
 8102368:	d010      	beq.n	810238c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810236a:	f000 f837 	bl	81023dc <xTaskIncrementTick>
 810236e:	4603      	mov	r3, r0
 8102370:	2b00      	cmp	r3, #0
 8102372:	d002      	beq.n	810237a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8102374:	4b16      	ldr	r3, [pc, #88]	@ (81023d0 <xTaskResumeAll+0x130>)
 8102376:	2201      	movs	r2, #1
 8102378:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	3b01      	subs	r3, #1
 810237e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	2b00      	cmp	r3, #0
 8102384:	d1f1      	bne.n	810236a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8102386:	4b13      	ldr	r3, [pc, #76]	@ (81023d4 <xTaskResumeAll+0x134>)
 8102388:	2200      	movs	r2, #0
 810238a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810238c:	4b10      	ldr	r3, [pc, #64]	@ (81023d0 <xTaskResumeAll+0x130>)
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	2b00      	cmp	r3, #0
 8102392:	d009      	beq.n	81023a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8102394:	2301      	movs	r3, #1
 8102396:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8102398:	4b0f      	ldr	r3, [pc, #60]	@ (81023d8 <xTaskResumeAll+0x138>)
 810239a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810239e:	601a      	str	r2, [r3, #0]
 81023a0:	f3bf 8f4f 	dsb	sy
 81023a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81023a8:	f001 f840 	bl	810342c <vPortExitCritical>

	return xAlreadyYielded;
 81023ac:	68bb      	ldr	r3, [r7, #8]
}
 81023ae:	4618      	mov	r0, r3
 81023b0:	3710      	adds	r7, #16
 81023b2:	46bd      	mov	sp, r7
 81023b4:	bd80      	pop	{r7, pc}
 81023b6:	bf00      	nop
 81023b8:	10000170 	.word	0x10000170
 81023bc:	10000148 	.word	0x10000148
 81023c0:	10000108 	.word	0x10000108
 81023c4:	10000150 	.word	0x10000150
 81023c8:	1000004c 	.word	0x1000004c
 81023cc:	10000048 	.word	0x10000048
 81023d0:	1000015c 	.word	0x1000015c
 81023d4:	10000158 	.word	0x10000158
 81023d8:	e000ed04 	.word	0xe000ed04

081023dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81023dc:	b580      	push	{r7, lr}
 81023de:	b086      	sub	sp, #24
 81023e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81023e2:	2300      	movs	r3, #0
 81023e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81023e6:	4b4f      	ldr	r3, [pc, #316]	@ (8102524 <xTaskIncrementTick+0x148>)
 81023e8:	681b      	ldr	r3, [r3, #0]
 81023ea:	2b00      	cmp	r3, #0
 81023ec:	f040 808f 	bne.w	810250e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81023f0:	4b4d      	ldr	r3, [pc, #308]	@ (8102528 <xTaskIncrementTick+0x14c>)
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	3301      	adds	r3, #1
 81023f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81023f8:	4a4b      	ldr	r2, [pc, #300]	@ (8102528 <xTaskIncrementTick+0x14c>)
 81023fa:	693b      	ldr	r3, [r7, #16]
 81023fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81023fe:	693b      	ldr	r3, [r7, #16]
 8102400:	2b00      	cmp	r3, #0
 8102402:	d121      	bne.n	8102448 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8102404:	4b49      	ldr	r3, [pc, #292]	@ (810252c <xTaskIncrementTick+0x150>)
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	2b00      	cmp	r3, #0
 810240c:	d00b      	beq.n	8102426 <xTaskIncrementTick+0x4a>
	__asm volatile
 810240e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102412:	f383 8811 	msr	BASEPRI, r3
 8102416:	f3bf 8f6f 	isb	sy
 810241a:	f3bf 8f4f 	dsb	sy
 810241e:	603b      	str	r3, [r7, #0]
}
 8102420:	bf00      	nop
 8102422:	bf00      	nop
 8102424:	e7fd      	b.n	8102422 <xTaskIncrementTick+0x46>
 8102426:	4b41      	ldr	r3, [pc, #260]	@ (810252c <xTaskIncrementTick+0x150>)
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	60fb      	str	r3, [r7, #12]
 810242c:	4b40      	ldr	r3, [pc, #256]	@ (8102530 <xTaskIncrementTick+0x154>)
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	4a3e      	ldr	r2, [pc, #248]	@ (810252c <xTaskIncrementTick+0x150>)
 8102432:	6013      	str	r3, [r2, #0]
 8102434:	4a3e      	ldr	r2, [pc, #248]	@ (8102530 <xTaskIncrementTick+0x154>)
 8102436:	68fb      	ldr	r3, [r7, #12]
 8102438:	6013      	str	r3, [r2, #0]
 810243a:	4b3e      	ldr	r3, [pc, #248]	@ (8102534 <xTaskIncrementTick+0x158>)
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	3301      	adds	r3, #1
 8102440:	4a3c      	ldr	r2, [pc, #240]	@ (8102534 <xTaskIncrementTick+0x158>)
 8102442:	6013      	str	r3, [r2, #0]
 8102444:	f000 fa86 	bl	8102954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8102448:	4b3b      	ldr	r3, [pc, #236]	@ (8102538 <xTaskIncrementTick+0x15c>)
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	693a      	ldr	r2, [r7, #16]
 810244e:	429a      	cmp	r2, r3
 8102450:	d348      	bcc.n	81024e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102452:	4b36      	ldr	r3, [pc, #216]	@ (810252c <xTaskIncrementTick+0x150>)
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	681b      	ldr	r3, [r3, #0]
 8102458:	2b00      	cmp	r3, #0
 810245a:	d104      	bne.n	8102466 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810245c:	4b36      	ldr	r3, [pc, #216]	@ (8102538 <xTaskIncrementTick+0x15c>)
 810245e:	f04f 32ff 	mov.w	r2, #4294967295
 8102462:	601a      	str	r2, [r3, #0]
					break;
 8102464:	e03e      	b.n	81024e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102466:	4b31      	ldr	r3, [pc, #196]	@ (810252c <xTaskIncrementTick+0x150>)
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	68db      	ldr	r3, [r3, #12]
 810246c:	68db      	ldr	r3, [r3, #12]
 810246e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8102470:	68bb      	ldr	r3, [r7, #8]
 8102472:	685b      	ldr	r3, [r3, #4]
 8102474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8102476:	693a      	ldr	r2, [r7, #16]
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	429a      	cmp	r2, r3
 810247c:	d203      	bcs.n	8102486 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810247e:	4a2e      	ldr	r2, [pc, #184]	@ (8102538 <xTaskIncrementTick+0x15c>)
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8102484:	e02e      	b.n	81024e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102486:	68bb      	ldr	r3, [r7, #8]
 8102488:	3304      	adds	r3, #4
 810248a:	4618      	mov	r0, r3
 810248c:	f7ff f802 	bl	8101494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8102490:	68bb      	ldr	r3, [r7, #8]
 8102492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102494:	2b00      	cmp	r3, #0
 8102496:	d004      	beq.n	81024a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8102498:	68bb      	ldr	r3, [r7, #8]
 810249a:	3318      	adds	r3, #24
 810249c:	4618      	mov	r0, r3
 810249e:	f7fe fff9 	bl	8101494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 81024a2:	68bb      	ldr	r3, [r7, #8]
 81024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024a6:	2201      	movs	r2, #1
 81024a8:	409a      	lsls	r2, r3
 81024aa:	4b24      	ldr	r3, [pc, #144]	@ (810253c <xTaskIncrementTick+0x160>)
 81024ac:	681b      	ldr	r3, [r3, #0]
 81024ae:	4313      	orrs	r3, r2
 81024b0:	4a22      	ldr	r2, [pc, #136]	@ (810253c <xTaskIncrementTick+0x160>)
 81024b2:	6013      	str	r3, [r2, #0]
 81024b4:	68bb      	ldr	r3, [r7, #8]
 81024b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024b8:	4613      	mov	r3, r2
 81024ba:	009b      	lsls	r3, r3, #2
 81024bc:	4413      	add	r3, r2
 81024be:	009b      	lsls	r3, r3, #2
 81024c0:	4a1f      	ldr	r2, [pc, #124]	@ (8102540 <xTaskIncrementTick+0x164>)
 81024c2:	441a      	add	r2, r3
 81024c4:	68bb      	ldr	r3, [r7, #8]
 81024c6:	3304      	adds	r3, #4
 81024c8:	4619      	mov	r1, r3
 81024ca:	4610      	mov	r0, r2
 81024cc:	f7fe ff85 	bl	81013da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81024d0:	68bb      	ldr	r3, [r7, #8]
 81024d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8102544 <xTaskIncrementTick+0x168>)
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024da:	429a      	cmp	r2, r3
 81024dc:	d3b9      	bcc.n	8102452 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81024de:	2301      	movs	r3, #1
 81024e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81024e2:	e7b6      	b.n	8102452 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81024e4:	4b17      	ldr	r3, [pc, #92]	@ (8102544 <xTaskIncrementTick+0x168>)
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024ea:	4915      	ldr	r1, [pc, #84]	@ (8102540 <xTaskIncrementTick+0x164>)
 81024ec:	4613      	mov	r3, r2
 81024ee:	009b      	lsls	r3, r3, #2
 81024f0:	4413      	add	r3, r2
 81024f2:	009b      	lsls	r3, r3, #2
 81024f4:	440b      	add	r3, r1
 81024f6:	681b      	ldr	r3, [r3, #0]
 81024f8:	2b01      	cmp	r3, #1
 81024fa:	d901      	bls.n	8102500 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 81024fc:	2301      	movs	r3, #1
 81024fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8102500:	4b11      	ldr	r3, [pc, #68]	@ (8102548 <xTaskIncrementTick+0x16c>)
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	2b00      	cmp	r3, #0
 8102506:	d007      	beq.n	8102518 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8102508:	2301      	movs	r3, #1
 810250a:	617b      	str	r3, [r7, #20]
 810250c:	e004      	b.n	8102518 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810250e:	4b0f      	ldr	r3, [pc, #60]	@ (810254c <xTaskIncrementTick+0x170>)
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	3301      	adds	r3, #1
 8102514:	4a0d      	ldr	r2, [pc, #52]	@ (810254c <xTaskIncrementTick+0x170>)
 8102516:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8102518:	697b      	ldr	r3, [r7, #20]
}
 810251a:	4618      	mov	r0, r3
 810251c:	3718      	adds	r7, #24
 810251e:	46bd      	mov	sp, r7
 8102520:	bd80      	pop	{r7, pc}
 8102522:	bf00      	nop
 8102524:	10000170 	.word	0x10000170
 8102528:	1000014c 	.word	0x1000014c
 810252c:	10000100 	.word	0x10000100
 8102530:	10000104 	.word	0x10000104
 8102534:	10000160 	.word	0x10000160
 8102538:	10000168 	.word	0x10000168
 810253c:	10000150 	.word	0x10000150
 8102540:	1000004c 	.word	0x1000004c
 8102544:	10000048 	.word	0x10000048
 8102548:	1000015c 	.word	0x1000015c
 810254c:	10000158 	.word	0x10000158

08102550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8102550:	b480      	push	{r7}
 8102552:	b087      	sub	sp, #28
 8102554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8102556:	4b27      	ldr	r3, [pc, #156]	@ (81025f4 <vTaskSwitchContext+0xa4>)
 8102558:	681b      	ldr	r3, [r3, #0]
 810255a:	2b00      	cmp	r3, #0
 810255c:	d003      	beq.n	8102566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810255e:	4b26      	ldr	r3, [pc, #152]	@ (81025f8 <vTaskSwitchContext+0xa8>)
 8102560:	2201      	movs	r2, #1
 8102562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8102564:	e040      	b.n	81025e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8102566:	4b24      	ldr	r3, [pc, #144]	@ (81025f8 <vTaskSwitchContext+0xa8>)
 8102568:	2200      	movs	r2, #0
 810256a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810256c:	4b23      	ldr	r3, [pc, #140]	@ (81025fc <vTaskSwitchContext+0xac>)
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8102572:	68fb      	ldr	r3, [r7, #12]
 8102574:	fab3 f383 	clz	r3, r3
 8102578:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810257a:	7afb      	ldrb	r3, [r7, #11]
 810257c:	f1c3 031f 	rsb	r3, r3, #31
 8102580:	617b      	str	r3, [r7, #20]
 8102582:	491f      	ldr	r1, [pc, #124]	@ (8102600 <vTaskSwitchContext+0xb0>)
 8102584:	697a      	ldr	r2, [r7, #20]
 8102586:	4613      	mov	r3, r2
 8102588:	009b      	lsls	r3, r3, #2
 810258a:	4413      	add	r3, r2
 810258c:	009b      	lsls	r3, r3, #2
 810258e:	440b      	add	r3, r1
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	2b00      	cmp	r3, #0
 8102594:	d10b      	bne.n	81025ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8102596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810259a:	f383 8811 	msr	BASEPRI, r3
 810259e:	f3bf 8f6f 	isb	sy
 81025a2:	f3bf 8f4f 	dsb	sy
 81025a6:	607b      	str	r3, [r7, #4]
}
 81025a8:	bf00      	nop
 81025aa:	bf00      	nop
 81025ac:	e7fd      	b.n	81025aa <vTaskSwitchContext+0x5a>
 81025ae:	697a      	ldr	r2, [r7, #20]
 81025b0:	4613      	mov	r3, r2
 81025b2:	009b      	lsls	r3, r3, #2
 81025b4:	4413      	add	r3, r2
 81025b6:	009b      	lsls	r3, r3, #2
 81025b8:	4a11      	ldr	r2, [pc, #68]	@ (8102600 <vTaskSwitchContext+0xb0>)
 81025ba:	4413      	add	r3, r2
 81025bc:	613b      	str	r3, [r7, #16]
 81025be:	693b      	ldr	r3, [r7, #16]
 81025c0:	685b      	ldr	r3, [r3, #4]
 81025c2:	685a      	ldr	r2, [r3, #4]
 81025c4:	693b      	ldr	r3, [r7, #16]
 81025c6:	605a      	str	r2, [r3, #4]
 81025c8:	693b      	ldr	r3, [r7, #16]
 81025ca:	685a      	ldr	r2, [r3, #4]
 81025cc:	693b      	ldr	r3, [r7, #16]
 81025ce:	3308      	adds	r3, #8
 81025d0:	429a      	cmp	r2, r3
 81025d2:	d104      	bne.n	81025de <vTaskSwitchContext+0x8e>
 81025d4:	693b      	ldr	r3, [r7, #16]
 81025d6:	685b      	ldr	r3, [r3, #4]
 81025d8:	685a      	ldr	r2, [r3, #4]
 81025da:	693b      	ldr	r3, [r7, #16]
 81025dc:	605a      	str	r2, [r3, #4]
 81025de:	693b      	ldr	r3, [r7, #16]
 81025e0:	685b      	ldr	r3, [r3, #4]
 81025e2:	68db      	ldr	r3, [r3, #12]
 81025e4:	4a07      	ldr	r2, [pc, #28]	@ (8102604 <vTaskSwitchContext+0xb4>)
 81025e6:	6013      	str	r3, [r2, #0]
}
 81025e8:	bf00      	nop
 81025ea:	371c      	adds	r7, #28
 81025ec:	46bd      	mov	sp, r7
 81025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025f2:	4770      	bx	lr
 81025f4:	10000170 	.word	0x10000170
 81025f8:	1000015c 	.word	0x1000015c
 81025fc:	10000150 	.word	0x10000150
 8102600:	1000004c 	.word	0x1000004c
 8102604:	10000048 	.word	0x10000048

08102608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8102608:	b580      	push	{r7, lr}
 810260a:	b084      	sub	sp, #16
 810260c:	af00      	add	r7, sp, #0
 810260e:	6078      	str	r0, [r7, #4]
 8102610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	2b00      	cmp	r3, #0
 8102616:	d10b      	bne.n	8102630 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8102618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810261c:	f383 8811 	msr	BASEPRI, r3
 8102620:	f3bf 8f6f 	isb	sy
 8102624:	f3bf 8f4f 	dsb	sy
 8102628:	60fb      	str	r3, [r7, #12]
}
 810262a:	bf00      	nop
 810262c:	bf00      	nop
 810262e:	e7fd      	b.n	810262c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8102630:	4b07      	ldr	r3, [pc, #28]	@ (8102650 <vTaskPlaceOnEventList+0x48>)
 8102632:	681b      	ldr	r3, [r3, #0]
 8102634:	3318      	adds	r3, #24
 8102636:	4619      	mov	r1, r3
 8102638:	6878      	ldr	r0, [r7, #4]
 810263a:	f7fe fef2 	bl	8101422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810263e:	2101      	movs	r1, #1
 8102640:	6838      	ldr	r0, [r7, #0]
 8102642:	f000 fb67 	bl	8102d14 <prvAddCurrentTaskToDelayedList>
}
 8102646:	bf00      	nop
 8102648:	3710      	adds	r7, #16
 810264a:	46bd      	mov	sp, r7
 810264c:	bd80      	pop	{r7, pc}
 810264e:	bf00      	nop
 8102650:	10000048 	.word	0x10000048

08102654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8102654:	b580      	push	{r7, lr}
 8102656:	b086      	sub	sp, #24
 8102658:	af00      	add	r7, sp, #0
 810265a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	68db      	ldr	r3, [r3, #12]
 8102660:	68db      	ldr	r3, [r3, #12]
 8102662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8102664:	693b      	ldr	r3, [r7, #16]
 8102666:	2b00      	cmp	r3, #0
 8102668:	d10b      	bne.n	8102682 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810266a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810266e:	f383 8811 	msr	BASEPRI, r3
 8102672:	f3bf 8f6f 	isb	sy
 8102676:	f3bf 8f4f 	dsb	sy
 810267a:	60fb      	str	r3, [r7, #12]
}
 810267c:	bf00      	nop
 810267e:	bf00      	nop
 8102680:	e7fd      	b.n	810267e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8102682:	693b      	ldr	r3, [r7, #16]
 8102684:	3318      	adds	r3, #24
 8102686:	4618      	mov	r0, r3
 8102688:	f7fe ff04 	bl	8101494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810268c:	4b1d      	ldr	r3, [pc, #116]	@ (8102704 <xTaskRemoveFromEventList+0xb0>)
 810268e:	681b      	ldr	r3, [r3, #0]
 8102690:	2b00      	cmp	r3, #0
 8102692:	d11c      	bne.n	81026ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8102694:	693b      	ldr	r3, [r7, #16]
 8102696:	3304      	adds	r3, #4
 8102698:	4618      	mov	r0, r3
 810269a:	f7fe fefb 	bl	8101494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810269e:	693b      	ldr	r3, [r7, #16]
 81026a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81026a2:	2201      	movs	r2, #1
 81026a4:	409a      	lsls	r2, r3
 81026a6:	4b18      	ldr	r3, [pc, #96]	@ (8102708 <xTaskRemoveFromEventList+0xb4>)
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4313      	orrs	r3, r2
 81026ac:	4a16      	ldr	r2, [pc, #88]	@ (8102708 <xTaskRemoveFromEventList+0xb4>)
 81026ae:	6013      	str	r3, [r2, #0]
 81026b0:	693b      	ldr	r3, [r7, #16]
 81026b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81026b4:	4613      	mov	r3, r2
 81026b6:	009b      	lsls	r3, r3, #2
 81026b8:	4413      	add	r3, r2
 81026ba:	009b      	lsls	r3, r3, #2
 81026bc:	4a13      	ldr	r2, [pc, #76]	@ (810270c <xTaskRemoveFromEventList+0xb8>)
 81026be:	441a      	add	r2, r3
 81026c0:	693b      	ldr	r3, [r7, #16]
 81026c2:	3304      	adds	r3, #4
 81026c4:	4619      	mov	r1, r3
 81026c6:	4610      	mov	r0, r2
 81026c8:	f7fe fe87 	bl	81013da <vListInsertEnd>
 81026cc:	e005      	b.n	81026da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81026ce:	693b      	ldr	r3, [r7, #16]
 81026d0:	3318      	adds	r3, #24
 81026d2:	4619      	mov	r1, r3
 81026d4:	480e      	ldr	r0, [pc, #56]	@ (8102710 <xTaskRemoveFromEventList+0xbc>)
 81026d6:	f7fe fe80 	bl	81013da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81026da:	693b      	ldr	r3, [r7, #16]
 81026dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81026de:	4b0d      	ldr	r3, [pc, #52]	@ (8102714 <xTaskRemoveFromEventList+0xc0>)
 81026e0:	681b      	ldr	r3, [r3, #0]
 81026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81026e4:	429a      	cmp	r2, r3
 81026e6:	d905      	bls.n	81026f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81026e8:	2301      	movs	r3, #1
 81026ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8102718 <xTaskRemoveFromEventList+0xc4>)
 81026ee:	2201      	movs	r2, #1
 81026f0:	601a      	str	r2, [r3, #0]
 81026f2:	e001      	b.n	81026f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 81026f4:	2300      	movs	r3, #0
 81026f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81026f8:	697b      	ldr	r3, [r7, #20]
}
 81026fa:	4618      	mov	r0, r3
 81026fc:	3718      	adds	r7, #24
 81026fe:	46bd      	mov	sp, r7
 8102700:	bd80      	pop	{r7, pc}
 8102702:	bf00      	nop
 8102704:	10000170 	.word	0x10000170
 8102708:	10000150 	.word	0x10000150
 810270c:	1000004c 	.word	0x1000004c
 8102710:	10000108 	.word	0x10000108
 8102714:	10000048 	.word	0x10000048
 8102718:	1000015c 	.word	0x1000015c

0810271c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810271c:	b480      	push	{r7}
 810271e:	b083      	sub	sp, #12
 8102720:	af00      	add	r7, sp, #0
 8102722:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8102724:	4b06      	ldr	r3, [pc, #24]	@ (8102740 <vTaskInternalSetTimeOutState+0x24>)
 8102726:	681a      	ldr	r2, [r3, #0]
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810272c:	4b05      	ldr	r3, [pc, #20]	@ (8102744 <vTaskInternalSetTimeOutState+0x28>)
 810272e:	681a      	ldr	r2, [r3, #0]
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	605a      	str	r2, [r3, #4]
}
 8102734:	bf00      	nop
 8102736:	370c      	adds	r7, #12
 8102738:	46bd      	mov	sp, r7
 810273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810273e:	4770      	bx	lr
 8102740:	10000160 	.word	0x10000160
 8102744:	1000014c 	.word	0x1000014c

08102748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8102748:	b580      	push	{r7, lr}
 810274a:	b088      	sub	sp, #32
 810274c:	af00      	add	r7, sp, #0
 810274e:	6078      	str	r0, [r7, #4]
 8102750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	2b00      	cmp	r3, #0
 8102756:	d10b      	bne.n	8102770 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8102758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810275c:	f383 8811 	msr	BASEPRI, r3
 8102760:	f3bf 8f6f 	isb	sy
 8102764:	f3bf 8f4f 	dsb	sy
 8102768:	613b      	str	r3, [r7, #16]
}
 810276a:	bf00      	nop
 810276c:	bf00      	nop
 810276e:	e7fd      	b.n	810276c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8102770:	683b      	ldr	r3, [r7, #0]
 8102772:	2b00      	cmp	r3, #0
 8102774:	d10b      	bne.n	810278e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8102776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810277a:	f383 8811 	msr	BASEPRI, r3
 810277e:	f3bf 8f6f 	isb	sy
 8102782:	f3bf 8f4f 	dsb	sy
 8102786:	60fb      	str	r3, [r7, #12]
}
 8102788:	bf00      	nop
 810278a:	bf00      	nop
 810278c:	e7fd      	b.n	810278a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810278e:	f000 fe1b 	bl	81033c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8102792:	4b1d      	ldr	r3, [pc, #116]	@ (8102808 <xTaskCheckForTimeOut+0xc0>)
 8102794:	681b      	ldr	r3, [r3, #0]
 8102796:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	685b      	ldr	r3, [r3, #4]
 810279c:	69ba      	ldr	r2, [r7, #24]
 810279e:	1ad3      	subs	r3, r2, r3
 81027a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 81027a2:	683b      	ldr	r3, [r7, #0]
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027aa:	d102      	bne.n	81027b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81027ac:	2300      	movs	r3, #0
 81027ae:	61fb      	str	r3, [r7, #28]
 81027b0:	e023      	b.n	81027fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	681a      	ldr	r2, [r3, #0]
 81027b6:	4b15      	ldr	r3, [pc, #84]	@ (810280c <xTaskCheckForTimeOut+0xc4>)
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	429a      	cmp	r2, r3
 81027bc:	d007      	beq.n	81027ce <xTaskCheckForTimeOut+0x86>
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	685b      	ldr	r3, [r3, #4]
 81027c2:	69ba      	ldr	r2, [r7, #24]
 81027c4:	429a      	cmp	r2, r3
 81027c6:	d302      	bcc.n	81027ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81027c8:	2301      	movs	r3, #1
 81027ca:	61fb      	str	r3, [r7, #28]
 81027cc:	e015      	b.n	81027fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81027ce:	683b      	ldr	r3, [r7, #0]
 81027d0:	681b      	ldr	r3, [r3, #0]
 81027d2:	697a      	ldr	r2, [r7, #20]
 81027d4:	429a      	cmp	r2, r3
 81027d6:	d20b      	bcs.n	81027f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81027d8:	683b      	ldr	r3, [r7, #0]
 81027da:	681a      	ldr	r2, [r3, #0]
 81027dc:	697b      	ldr	r3, [r7, #20]
 81027de:	1ad2      	subs	r2, r2, r3
 81027e0:	683b      	ldr	r3, [r7, #0]
 81027e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81027e4:	6878      	ldr	r0, [r7, #4]
 81027e6:	f7ff ff99 	bl	810271c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81027ea:	2300      	movs	r3, #0
 81027ec:	61fb      	str	r3, [r7, #28]
 81027ee:	e004      	b.n	81027fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 81027f0:	683b      	ldr	r3, [r7, #0]
 81027f2:	2200      	movs	r2, #0
 81027f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81027f6:	2301      	movs	r3, #1
 81027f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81027fa:	f000 fe17 	bl	810342c <vPortExitCritical>

	return xReturn;
 81027fe:	69fb      	ldr	r3, [r7, #28]
}
 8102800:	4618      	mov	r0, r3
 8102802:	3720      	adds	r7, #32
 8102804:	46bd      	mov	sp, r7
 8102806:	bd80      	pop	{r7, pc}
 8102808:	1000014c 	.word	0x1000014c
 810280c:	10000160 	.word	0x10000160

08102810 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8102810:	b480      	push	{r7}
 8102812:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8102814:	4b03      	ldr	r3, [pc, #12]	@ (8102824 <vTaskMissedYield+0x14>)
 8102816:	2201      	movs	r2, #1
 8102818:	601a      	str	r2, [r3, #0]
}
 810281a:	bf00      	nop
 810281c:	46bd      	mov	sp, r7
 810281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102822:	4770      	bx	lr
 8102824:	1000015c 	.word	0x1000015c

08102828 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8102828:	b580      	push	{r7, lr}
 810282a:	b082      	sub	sp, #8
 810282c:	af00      	add	r7, sp, #0
 810282e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8102830:	f000 f852 	bl	81028d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8102834:	4b06      	ldr	r3, [pc, #24]	@ (8102850 <prvIdleTask+0x28>)
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	2b01      	cmp	r3, #1
 810283a:	d9f9      	bls.n	8102830 <prvIdleTask+0x8>
			{
				taskYIELD();
 810283c:	4b05      	ldr	r3, [pc, #20]	@ (8102854 <prvIdleTask+0x2c>)
 810283e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102842:	601a      	str	r2, [r3, #0]
 8102844:	f3bf 8f4f 	dsb	sy
 8102848:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810284c:	e7f0      	b.n	8102830 <prvIdleTask+0x8>
 810284e:	bf00      	nop
 8102850:	1000004c 	.word	0x1000004c
 8102854:	e000ed04 	.word	0xe000ed04

08102858 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8102858:	b580      	push	{r7, lr}
 810285a:	b082      	sub	sp, #8
 810285c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810285e:	2300      	movs	r3, #0
 8102860:	607b      	str	r3, [r7, #4]
 8102862:	e00c      	b.n	810287e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8102864:	687a      	ldr	r2, [r7, #4]
 8102866:	4613      	mov	r3, r2
 8102868:	009b      	lsls	r3, r3, #2
 810286a:	4413      	add	r3, r2
 810286c:	009b      	lsls	r3, r3, #2
 810286e:	4a12      	ldr	r2, [pc, #72]	@ (81028b8 <prvInitialiseTaskLists+0x60>)
 8102870:	4413      	add	r3, r2
 8102872:	4618      	mov	r0, r3
 8102874:	f7fe fd84 	bl	8101380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	3301      	adds	r3, #1
 810287c:	607b      	str	r3, [r7, #4]
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	2b06      	cmp	r3, #6
 8102882:	d9ef      	bls.n	8102864 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8102884:	480d      	ldr	r0, [pc, #52]	@ (81028bc <prvInitialiseTaskLists+0x64>)
 8102886:	f7fe fd7b 	bl	8101380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810288a:	480d      	ldr	r0, [pc, #52]	@ (81028c0 <prvInitialiseTaskLists+0x68>)
 810288c:	f7fe fd78 	bl	8101380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8102890:	480c      	ldr	r0, [pc, #48]	@ (81028c4 <prvInitialiseTaskLists+0x6c>)
 8102892:	f7fe fd75 	bl	8101380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8102896:	480c      	ldr	r0, [pc, #48]	@ (81028c8 <prvInitialiseTaskLists+0x70>)
 8102898:	f7fe fd72 	bl	8101380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810289c:	480b      	ldr	r0, [pc, #44]	@ (81028cc <prvInitialiseTaskLists+0x74>)
 810289e:	f7fe fd6f 	bl	8101380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 81028a2:	4b0b      	ldr	r3, [pc, #44]	@ (81028d0 <prvInitialiseTaskLists+0x78>)
 81028a4:	4a05      	ldr	r2, [pc, #20]	@ (81028bc <prvInitialiseTaskLists+0x64>)
 81028a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 81028a8:	4b0a      	ldr	r3, [pc, #40]	@ (81028d4 <prvInitialiseTaskLists+0x7c>)
 81028aa:	4a05      	ldr	r2, [pc, #20]	@ (81028c0 <prvInitialiseTaskLists+0x68>)
 81028ac:	601a      	str	r2, [r3, #0]
}
 81028ae:	bf00      	nop
 81028b0:	3708      	adds	r7, #8
 81028b2:	46bd      	mov	sp, r7
 81028b4:	bd80      	pop	{r7, pc}
 81028b6:	bf00      	nop
 81028b8:	1000004c 	.word	0x1000004c
 81028bc:	100000d8 	.word	0x100000d8
 81028c0:	100000ec 	.word	0x100000ec
 81028c4:	10000108 	.word	0x10000108
 81028c8:	1000011c 	.word	0x1000011c
 81028cc:	10000134 	.word	0x10000134
 81028d0:	10000100 	.word	0x10000100
 81028d4:	10000104 	.word	0x10000104

081028d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b082      	sub	sp, #8
 81028dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81028de:	e019      	b.n	8102914 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81028e0:	f000 fd72 	bl	81033c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81028e4:	4b10      	ldr	r3, [pc, #64]	@ (8102928 <prvCheckTasksWaitingTermination+0x50>)
 81028e6:	68db      	ldr	r3, [r3, #12]
 81028e8:	68db      	ldr	r3, [r3, #12]
 81028ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	3304      	adds	r3, #4
 81028f0:	4618      	mov	r0, r3
 81028f2:	f7fe fdcf 	bl	8101494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81028f6:	4b0d      	ldr	r3, [pc, #52]	@ (810292c <prvCheckTasksWaitingTermination+0x54>)
 81028f8:	681b      	ldr	r3, [r3, #0]
 81028fa:	3b01      	subs	r3, #1
 81028fc:	4a0b      	ldr	r2, [pc, #44]	@ (810292c <prvCheckTasksWaitingTermination+0x54>)
 81028fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8102900:	4b0b      	ldr	r3, [pc, #44]	@ (8102930 <prvCheckTasksWaitingTermination+0x58>)
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	3b01      	subs	r3, #1
 8102906:	4a0a      	ldr	r2, [pc, #40]	@ (8102930 <prvCheckTasksWaitingTermination+0x58>)
 8102908:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810290a:	f000 fd8f 	bl	810342c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810290e:	6878      	ldr	r0, [r7, #4]
 8102910:	f000 f810 	bl	8102934 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8102914:	4b06      	ldr	r3, [pc, #24]	@ (8102930 <prvCheckTasksWaitingTermination+0x58>)
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	2b00      	cmp	r3, #0
 810291a:	d1e1      	bne.n	81028e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810291c:	bf00      	nop
 810291e:	bf00      	nop
 8102920:	3708      	adds	r7, #8
 8102922:	46bd      	mov	sp, r7
 8102924:	bd80      	pop	{r7, pc}
 8102926:	bf00      	nop
 8102928:	1000011c 	.word	0x1000011c
 810292c:	10000148 	.word	0x10000148
 8102930:	10000130 	.word	0x10000130

08102934 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8102934:	b580      	push	{r7, lr}
 8102936:	b082      	sub	sp, #8
 8102938:	af00      	add	r7, sp, #0
 810293a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102940:	4618      	mov	r0, r3
 8102942:	f000 fb1b 	bl	8102f7c <vPortFree>
			vPortFree( pxTCB );
 8102946:	6878      	ldr	r0, [r7, #4]
 8102948:	f000 fb18 	bl	8102f7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810294c:	bf00      	nop
 810294e:	3708      	adds	r7, #8
 8102950:	46bd      	mov	sp, r7
 8102952:	bd80      	pop	{r7, pc}

08102954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8102954:	b480      	push	{r7}
 8102956:	b083      	sub	sp, #12
 8102958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810295a:	4b0c      	ldr	r3, [pc, #48]	@ (810298c <prvResetNextTaskUnblockTime+0x38>)
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	2b00      	cmp	r3, #0
 8102962:	d104      	bne.n	810296e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8102964:	4b0a      	ldr	r3, [pc, #40]	@ (8102990 <prvResetNextTaskUnblockTime+0x3c>)
 8102966:	f04f 32ff 	mov.w	r2, #4294967295
 810296a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810296c:	e008      	b.n	8102980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810296e:	4b07      	ldr	r3, [pc, #28]	@ (810298c <prvResetNextTaskUnblockTime+0x38>)
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	68db      	ldr	r3, [r3, #12]
 8102974:	68db      	ldr	r3, [r3, #12]
 8102976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	685b      	ldr	r3, [r3, #4]
 810297c:	4a04      	ldr	r2, [pc, #16]	@ (8102990 <prvResetNextTaskUnblockTime+0x3c>)
 810297e:	6013      	str	r3, [r2, #0]
}
 8102980:	bf00      	nop
 8102982:	370c      	adds	r7, #12
 8102984:	46bd      	mov	sp, r7
 8102986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810298a:	4770      	bx	lr
 810298c:	10000100 	.word	0x10000100
 8102990:	10000168 	.word	0x10000168

08102994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8102994:	b480      	push	{r7}
 8102996:	b083      	sub	sp, #12
 8102998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810299a:	4b0b      	ldr	r3, [pc, #44]	@ (81029c8 <xTaskGetSchedulerState+0x34>)
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	2b00      	cmp	r3, #0
 81029a0:	d102      	bne.n	81029a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81029a2:	2301      	movs	r3, #1
 81029a4:	607b      	str	r3, [r7, #4]
 81029a6:	e008      	b.n	81029ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81029a8:	4b08      	ldr	r3, [pc, #32]	@ (81029cc <xTaskGetSchedulerState+0x38>)
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	2b00      	cmp	r3, #0
 81029ae:	d102      	bne.n	81029b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81029b0:	2302      	movs	r3, #2
 81029b2:	607b      	str	r3, [r7, #4]
 81029b4:	e001      	b.n	81029ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81029b6:	2300      	movs	r3, #0
 81029b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81029ba:	687b      	ldr	r3, [r7, #4]
	}
 81029bc:	4618      	mov	r0, r3
 81029be:	370c      	adds	r7, #12
 81029c0:	46bd      	mov	sp, r7
 81029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c6:	4770      	bx	lr
 81029c8:	10000154 	.word	0x10000154
 81029cc:	10000170 	.word	0x10000170

081029d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 81029d0:	b580      	push	{r7, lr}
 81029d2:	b084      	sub	sp, #16
 81029d4:	af00      	add	r7, sp, #0
 81029d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 81029dc:	2300      	movs	r3, #0
 81029de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 81029e0:	687b      	ldr	r3, [r7, #4]
 81029e2:	2b00      	cmp	r3, #0
 81029e4:	d05e      	beq.n	8102aa4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 81029e6:	68bb      	ldr	r3, [r7, #8]
 81029e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81029ea:	4b31      	ldr	r3, [pc, #196]	@ (8102ab0 <xTaskPriorityInherit+0xe0>)
 81029ec:	681b      	ldr	r3, [r3, #0]
 81029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81029f0:	429a      	cmp	r2, r3
 81029f2:	d24e      	bcs.n	8102a92 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 81029f4:	68bb      	ldr	r3, [r7, #8]
 81029f6:	699b      	ldr	r3, [r3, #24]
 81029f8:	2b00      	cmp	r3, #0
 81029fa:	db06      	blt.n	8102a0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81029fc:	4b2c      	ldr	r3, [pc, #176]	@ (8102ab0 <xTaskPriorityInherit+0xe0>)
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a02:	f1c3 0207 	rsb	r2, r3, #7
 8102a06:	68bb      	ldr	r3, [r7, #8]
 8102a08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8102a0a:	68bb      	ldr	r3, [r7, #8]
 8102a0c:	6959      	ldr	r1, [r3, #20]
 8102a0e:	68bb      	ldr	r3, [r7, #8]
 8102a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a12:	4613      	mov	r3, r2
 8102a14:	009b      	lsls	r3, r3, #2
 8102a16:	4413      	add	r3, r2
 8102a18:	009b      	lsls	r3, r3, #2
 8102a1a:	4a26      	ldr	r2, [pc, #152]	@ (8102ab4 <xTaskPriorityInherit+0xe4>)
 8102a1c:	4413      	add	r3, r2
 8102a1e:	4299      	cmp	r1, r3
 8102a20:	d12f      	bne.n	8102a82 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8102a22:	68bb      	ldr	r3, [r7, #8]
 8102a24:	3304      	adds	r3, #4
 8102a26:	4618      	mov	r0, r3
 8102a28:	f7fe fd34 	bl	8101494 <uxListRemove>
 8102a2c:	4603      	mov	r3, r0
 8102a2e:	2b00      	cmp	r3, #0
 8102a30:	d10a      	bne.n	8102a48 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8102a32:	68bb      	ldr	r3, [r7, #8]
 8102a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a36:	2201      	movs	r2, #1
 8102a38:	fa02 f303 	lsl.w	r3, r2, r3
 8102a3c:	43da      	mvns	r2, r3
 8102a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8102ab8 <xTaskPriorityInherit+0xe8>)
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	4013      	ands	r3, r2
 8102a44:	4a1c      	ldr	r2, [pc, #112]	@ (8102ab8 <xTaskPriorityInherit+0xe8>)
 8102a46:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8102a48:	4b19      	ldr	r3, [pc, #100]	@ (8102ab0 <xTaskPriorityInherit+0xe0>)
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a4e:	68bb      	ldr	r3, [r7, #8]
 8102a50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8102a52:	68bb      	ldr	r3, [r7, #8]
 8102a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a56:	2201      	movs	r2, #1
 8102a58:	409a      	lsls	r2, r3
 8102a5a:	4b17      	ldr	r3, [pc, #92]	@ (8102ab8 <xTaskPriorityInherit+0xe8>)
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	4313      	orrs	r3, r2
 8102a60:	4a15      	ldr	r2, [pc, #84]	@ (8102ab8 <xTaskPriorityInherit+0xe8>)
 8102a62:	6013      	str	r3, [r2, #0]
 8102a64:	68bb      	ldr	r3, [r7, #8]
 8102a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a68:	4613      	mov	r3, r2
 8102a6a:	009b      	lsls	r3, r3, #2
 8102a6c:	4413      	add	r3, r2
 8102a6e:	009b      	lsls	r3, r3, #2
 8102a70:	4a10      	ldr	r2, [pc, #64]	@ (8102ab4 <xTaskPriorityInherit+0xe4>)
 8102a72:	441a      	add	r2, r3
 8102a74:	68bb      	ldr	r3, [r7, #8]
 8102a76:	3304      	adds	r3, #4
 8102a78:	4619      	mov	r1, r3
 8102a7a:	4610      	mov	r0, r2
 8102a7c:	f7fe fcad 	bl	81013da <vListInsertEnd>
 8102a80:	e004      	b.n	8102a8c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8102a82:	4b0b      	ldr	r3, [pc, #44]	@ (8102ab0 <xTaskPriorityInherit+0xe0>)
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a88:	68bb      	ldr	r3, [r7, #8]
 8102a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8102a8c:	2301      	movs	r3, #1
 8102a8e:	60fb      	str	r3, [r7, #12]
 8102a90:	e008      	b.n	8102aa4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8102a92:	68bb      	ldr	r3, [r7, #8]
 8102a94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8102a96:	4b06      	ldr	r3, [pc, #24]	@ (8102ab0 <xTaskPriorityInherit+0xe0>)
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a9c:	429a      	cmp	r2, r3
 8102a9e:	d201      	bcs.n	8102aa4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8102aa0:	2301      	movs	r3, #1
 8102aa2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8102aa4:	68fb      	ldr	r3, [r7, #12]
	}
 8102aa6:	4618      	mov	r0, r3
 8102aa8:	3710      	adds	r7, #16
 8102aaa:	46bd      	mov	sp, r7
 8102aac:	bd80      	pop	{r7, pc}
 8102aae:	bf00      	nop
 8102ab0:	10000048 	.word	0x10000048
 8102ab4:	1000004c 	.word	0x1000004c
 8102ab8:	10000150 	.word	0x10000150

08102abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8102abc:	b580      	push	{r7, lr}
 8102abe:	b086      	sub	sp, #24
 8102ac0:	af00      	add	r7, sp, #0
 8102ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8102ac8:	2300      	movs	r3, #0
 8102aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	2b00      	cmp	r3, #0
 8102ad0:	d070      	beq.n	8102bb4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8102ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8102bc0 <xTaskPriorityDisinherit+0x104>)
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	693a      	ldr	r2, [r7, #16]
 8102ad8:	429a      	cmp	r2, r3
 8102ada:	d00b      	beq.n	8102af4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8102adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102ae0:	f383 8811 	msr	BASEPRI, r3
 8102ae4:	f3bf 8f6f 	isb	sy
 8102ae8:	f3bf 8f4f 	dsb	sy
 8102aec:	60fb      	str	r3, [r7, #12]
}
 8102aee:	bf00      	nop
 8102af0:	bf00      	nop
 8102af2:	e7fd      	b.n	8102af0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8102af4:	693b      	ldr	r3, [r7, #16]
 8102af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102af8:	2b00      	cmp	r3, #0
 8102afa:	d10b      	bne.n	8102b14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8102afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102b00:	f383 8811 	msr	BASEPRI, r3
 8102b04:	f3bf 8f6f 	isb	sy
 8102b08:	f3bf 8f4f 	dsb	sy
 8102b0c:	60bb      	str	r3, [r7, #8]
}
 8102b0e:	bf00      	nop
 8102b10:	bf00      	nop
 8102b12:	e7fd      	b.n	8102b10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8102b14:	693b      	ldr	r3, [r7, #16]
 8102b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b18:	1e5a      	subs	r2, r3, #1
 8102b1a:	693b      	ldr	r3, [r7, #16]
 8102b1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8102b1e:	693b      	ldr	r3, [r7, #16]
 8102b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102b22:	693b      	ldr	r3, [r7, #16]
 8102b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102b26:	429a      	cmp	r2, r3
 8102b28:	d044      	beq.n	8102bb4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8102b2a:	693b      	ldr	r3, [r7, #16]
 8102b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b2e:	2b00      	cmp	r3, #0
 8102b30:	d140      	bne.n	8102bb4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8102b32:	693b      	ldr	r3, [r7, #16]
 8102b34:	3304      	adds	r3, #4
 8102b36:	4618      	mov	r0, r3
 8102b38:	f7fe fcac 	bl	8101494 <uxListRemove>
 8102b3c:	4603      	mov	r3, r0
 8102b3e:	2b00      	cmp	r3, #0
 8102b40:	d115      	bne.n	8102b6e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8102b42:	693b      	ldr	r3, [r7, #16]
 8102b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102b46:	491f      	ldr	r1, [pc, #124]	@ (8102bc4 <xTaskPriorityDisinherit+0x108>)
 8102b48:	4613      	mov	r3, r2
 8102b4a:	009b      	lsls	r3, r3, #2
 8102b4c:	4413      	add	r3, r2
 8102b4e:	009b      	lsls	r3, r3, #2
 8102b50:	440b      	add	r3, r1
 8102b52:	681b      	ldr	r3, [r3, #0]
 8102b54:	2b00      	cmp	r3, #0
 8102b56:	d10a      	bne.n	8102b6e <xTaskPriorityDisinherit+0xb2>
 8102b58:	693b      	ldr	r3, [r7, #16]
 8102b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b5c:	2201      	movs	r2, #1
 8102b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8102b62:	43da      	mvns	r2, r3
 8102b64:	4b18      	ldr	r3, [pc, #96]	@ (8102bc8 <xTaskPriorityDisinherit+0x10c>)
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	4013      	ands	r3, r2
 8102b6a:	4a17      	ldr	r2, [pc, #92]	@ (8102bc8 <xTaskPriorityDisinherit+0x10c>)
 8102b6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8102b6e:	693b      	ldr	r3, [r7, #16]
 8102b70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8102b72:	693b      	ldr	r3, [r7, #16]
 8102b74:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102b76:	693b      	ldr	r3, [r7, #16]
 8102b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b7a:	f1c3 0207 	rsb	r2, r3, #7
 8102b7e:	693b      	ldr	r3, [r7, #16]
 8102b80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8102b82:	693b      	ldr	r3, [r7, #16]
 8102b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b86:	2201      	movs	r2, #1
 8102b88:	409a      	lsls	r2, r3
 8102b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8102bc8 <xTaskPriorityDisinherit+0x10c>)
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	4313      	orrs	r3, r2
 8102b90:	4a0d      	ldr	r2, [pc, #52]	@ (8102bc8 <xTaskPriorityDisinherit+0x10c>)
 8102b92:	6013      	str	r3, [r2, #0]
 8102b94:	693b      	ldr	r3, [r7, #16]
 8102b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102b98:	4613      	mov	r3, r2
 8102b9a:	009b      	lsls	r3, r3, #2
 8102b9c:	4413      	add	r3, r2
 8102b9e:	009b      	lsls	r3, r3, #2
 8102ba0:	4a08      	ldr	r2, [pc, #32]	@ (8102bc4 <xTaskPriorityDisinherit+0x108>)
 8102ba2:	441a      	add	r2, r3
 8102ba4:	693b      	ldr	r3, [r7, #16]
 8102ba6:	3304      	adds	r3, #4
 8102ba8:	4619      	mov	r1, r3
 8102baa:	4610      	mov	r0, r2
 8102bac:	f7fe fc15 	bl	81013da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8102bb0:	2301      	movs	r3, #1
 8102bb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8102bb4:	697b      	ldr	r3, [r7, #20]
	}
 8102bb6:	4618      	mov	r0, r3
 8102bb8:	3718      	adds	r7, #24
 8102bba:	46bd      	mov	sp, r7
 8102bbc:	bd80      	pop	{r7, pc}
 8102bbe:	bf00      	nop
 8102bc0:	10000048 	.word	0x10000048
 8102bc4:	1000004c 	.word	0x1000004c
 8102bc8:	10000150 	.word	0x10000150

08102bcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8102bcc:	b580      	push	{r7, lr}
 8102bce:	b088      	sub	sp, #32
 8102bd0:	af00      	add	r7, sp, #0
 8102bd2:	6078      	str	r0, [r7, #4]
 8102bd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8102bda:	2301      	movs	r3, #1
 8102bdc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	2b00      	cmp	r3, #0
 8102be2:	d079      	beq.n	8102cd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8102be4:	69bb      	ldr	r3, [r7, #24]
 8102be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	d10b      	bne.n	8102c04 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8102bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102bf0:	f383 8811 	msr	BASEPRI, r3
 8102bf4:	f3bf 8f6f 	isb	sy
 8102bf8:	f3bf 8f4f 	dsb	sy
 8102bfc:	60fb      	str	r3, [r7, #12]
}
 8102bfe:	bf00      	nop
 8102c00:	bf00      	nop
 8102c02:	e7fd      	b.n	8102c00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8102c04:	69bb      	ldr	r3, [r7, #24]
 8102c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102c08:	683a      	ldr	r2, [r7, #0]
 8102c0a:	429a      	cmp	r2, r3
 8102c0c:	d902      	bls.n	8102c14 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8102c0e:	683b      	ldr	r3, [r7, #0]
 8102c10:	61fb      	str	r3, [r7, #28]
 8102c12:	e002      	b.n	8102c1a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8102c14:	69bb      	ldr	r3, [r7, #24]
 8102c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102c18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8102c1a:	69bb      	ldr	r3, [r7, #24]
 8102c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c1e:	69fa      	ldr	r2, [r7, #28]
 8102c20:	429a      	cmp	r2, r3
 8102c22:	d059      	beq.n	8102cd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8102c24:	69bb      	ldr	r3, [r7, #24]
 8102c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102c28:	697a      	ldr	r2, [r7, #20]
 8102c2a:	429a      	cmp	r2, r3
 8102c2c:	d154      	bne.n	8102cd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8102c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8102ce0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8102c30:	681b      	ldr	r3, [r3, #0]
 8102c32:	69ba      	ldr	r2, [r7, #24]
 8102c34:	429a      	cmp	r2, r3
 8102c36:	d10b      	bne.n	8102c50 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8102c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102c3c:	f383 8811 	msr	BASEPRI, r3
 8102c40:	f3bf 8f6f 	isb	sy
 8102c44:	f3bf 8f4f 	dsb	sy
 8102c48:	60bb      	str	r3, [r7, #8]
}
 8102c4a:	bf00      	nop
 8102c4c:	bf00      	nop
 8102c4e:	e7fd      	b.n	8102c4c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8102c50:	69bb      	ldr	r3, [r7, #24]
 8102c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8102c56:	69bb      	ldr	r3, [r7, #24]
 8102c58:	69fa      	ldr	r2, [r7, #28]
 8102c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8102c5c:	69bb      	ldr	r3, [r7, #24]
 8102c5e:	699b      	ldr	r3, [r3, #24]
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	db04      	blt.n	8102c6e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102c64:	69fb      	ldr	r3, [r7, #28]
 8102c66:	f1c3 0207 	rsb	r2, r3, #7
 8102c6a:	69bb      	ldr	r3, [r7, #24]
 8102c6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8102c6e:	69bb      	ldr	r3, [r7, #24]
 8102c70:	6959      	ldr	r1, [r3, #20]
 8102c72:	693a      	ldr	r2, [r7, #16]
 8102c74:	4613      	mov	r3, r2
 8102c76:	009b      	lsls	r3, r3, #2
 8102c78:	4413      	add	r3, r2
 8102c7a:	009b      	lsls	r3, r3, #2
 8102c7c:	4a19      	ldr	r2, [pc, #100]	@ (8102ce4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8102c7e:	4413      	add	r3, r2
 8102c80:	4299      	cmp	r1, r3
 8102c82:	d129      	bne.n	8102cd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8102c84:	69bb      	ldr	r3, [r7, #24]
 8102c86:	3304      	adds	r3, #4
 8102c88:	4618      	mov	r0, r3
 8102c8a:	f7fe fc03 	bl	8101494 <uxListRemove>
 8102c8e:	4603      	mov	r3, r0
 8102c90:	2b00      	cmp	r3, #0
 8102c92:	d10a      	bne.n	8102caa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8102c94:	69bb      	ldr	r3, [r7, #24]
 8102c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c98:	2201      	movs	r2, #1
 8102c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8102c9e:	43da      	mvns	r2, r3
 8102ca0:	4b11      	ldr	r3, [pc, #68]	@ (8102ce8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	4013      	ands	r3, r2
 8102ca6:	4a10      	ldr	r2, [pc, #64]	@ (8102ce8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8102ca8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8102caa:	69bb      	ldr	r3, [r7, #24]
 8102cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cae:	2201      	movs	r2, #1
 8102cb0:	409a      	lsls	r2, r3
 8102cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8102ce8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	4313      	orrs	r3, r2
 8102cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8102ce8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8102cba:	6013      	str	r3, [r2, #0]
 8102cbc:	69bb      	ldr	r3, [r7, #24]
 8102cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102cc0:	4613      	mov	r3, r2
 8102cc2:	009b      	lsls	r3, r3, #2
 8102cc4:	4413      	add	r3, r2
 8102cc6:	009b      	lsls	r3, r3, #2
 8102cc8:	4a06      	ldr	r2, [pc, #24]	@ (8102ce4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8102cca:	441a      	add	r2, r3
 8102ccc:	69bb      	ldr	r3, [r7, #24]
 8102cce:	3304      	adds	r3, #4
 8102cd0:	4619      	mov	r1, r3
 8102cd2:	4610      	mov	r0, r2
 8102cd4:	f7fe fb81 	bl	81013da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8102cd8:	bf00      	nop
 8102cda:	3720      	adds	r7, #32
 8102cdc:	46bd      	mov	sp, r7
 8102cde:	bd80      	pop	{r7, pc}
 8102ce0:	10000048 	.word	0x10000048
 8102ce4:	1000004c 	.word	0x1000004c
 8102ce8:	10000150 	.word	0x10000150

08102cec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8102cec:	b480      	push	{r7}
 8102cee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8102cf0:	4b07      	ldr	r3, [pc, #28]	@ (8102d10 <pvTaskIncrementMutexHeldCount+0x24>)
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	2b00      	cmp	r3, #0
 8102cf6:	d004      	beq.n	8102d02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8102cf8:	4b05      	ldr	r3, [pc, #20]	@ (8102d10 <pvTaskIncrementMutexHeldCount+0x24>)
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8102cfe:	3201      	adds	r2, #1
 8102d00:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8102d02:	4b03      	ldr	r3, [pc, #12]	@ (8102d10 <pvTaskIncrementMutexHeldCount+0x24>)
 8102d04:	681b      	ldr	r3, [r3, #0]
	}
 8102d06:	4618      	mov	r0, r3
 8102d08:	46bd      	mov	sp, r7
 8102d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d0e:	4770      	bx	lr
 8102d10:	10000048 	.word	0x10000048

08102d14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8102d14:	b580      	push	{r7, lr}
 8102d16:	b084      	sub	sp, #16
 8102d18:	af00      	add	r7, sp, #0
 8102d1a:	6078      	str	r0, [r7, #4]
 8102d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8102d1e:	4b29      	ldr	r3, [pc, #164]	@ (8102dc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8102d24:	4b28      	ldr	r3, [pc, #160]	@ (8102dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102d26:	681b      	ldr	r3, [r3, #0]
 8102d28:	3304      	adds	r3, #4
 8102d2a:	4618      	mov	r0, r3
 8102d2c:	f7fe fbb2 	bl	8101494 <uxListRemove>
 8102d30:	4603      	mov	r3, r0
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	d10b      	bne.n	8102d4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8102d36:	4b24      	ldr	r3, [pc, #144]	@ (8102dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d3c:	2201      	movs	r2, #1
 8102d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8102d42:	43da      	mvns	r2, r3
 8102d44:	4b21      	ldr	r3, [pc, #132]	@ (8102dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	4013      	ands	r3, r2
 8102d4a:	4a20      	ldr	r2, [pc, #128]	@ (8102dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8102d4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d54:	d10a      	bne.n	8102d6c <prvAddCurrentTaskToDelayedList+0x58>
 8102d56:	683b      	ldr	r3, [r7, #0]
 8102d58:	2b00      	cmp	r3, #0
 8102d5a:	d007      	beq.n	8102d6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8102dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	3304      	adds	r3, #4
 8102d62:	4619      	mov	r1, r3
 8102d64:	481a      	ldr	r0, [pc, #104]	@ (8102dd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8102d66:	f7fe fb38 	bl	81013da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8102d6a:	e026      	b.n	8102dba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8102d6c:	68fa      	ldr	r2, [r7, #12]
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	4413      	add	r3, r2
 8102d72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8102d74:	4b14      	ldr	r3, [pc, #80]	@ (8102dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	68ba      	ldr	r2, [r7, #8]
 8102d7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8102d7c:	68ba      	ldr	r2, [r7, #8]
 8102d7e:	68fb      	ldr	r3, [r7, #12]
 8102d80:	429a      	cmp	r2, r3
 8102d82:	d209      	bcs.n	8102d98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102d84:	4b13      	ldr	r3, [pc, #76]	@ (8102dd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8102d86:	681a      	ldr	r2, [r3, #0]
 8102d88:	4b0f      	ldr	r3, [pc, #60]	@ (8102dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	3304      	adds	r3, #4
 8102d8e:	4619      	mov	r1, r3
 8102d90:	4610      	mov	r0, r2
 8102d92:	f7fe fb46 	bl	8101422 <vListInsert>
}
 8102d96:	e010      	b.n	8102dba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102d98:	4b0f      	ldr	r3, [pc, #60]	@ (8102dd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8102d9a:	681a      	ldr	r2, [r3, #0]
 8102d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8102dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	3304      	adds	r3, #4
 8102da2:	4619      	mov	r1, r3
 8102da4:	4610      	mov	r0, r2
 8102da6:	f7fe fb3c 	bl	8101422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8102daa:	4b0c      	ldr	r3, [pc, #48]	@ (8102ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	68ba      	ldr	r2, [r7, #8]
 8102db0:	429a      	cmp	r2, r3
 8102db2:	d202      	bcs.n	8102dba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8102db4:	4a09      	ldr	r2, [pc, #36]	@ (8102ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8102db6:	68bb      	ldr	r3, [r7, #8]
 8102db8:	6013      	str	r3, [r2, #0]
}
 8102dba:	bf00      	nop
 8102dbc:	3710      	adds	r7, #16
 8102dbe:	46bd      	mov	sp, r7
 8102dc0:	bd80      	pop	{r7, pc}
 8102dc2:	bf00      	nop
 8102dc4:	1000014c 	.word	0x1000014c
 8102dc8:	10000048 	.word	0x10000048
 8102dcc:	10000150 	.word	0x10000150
 8102dd0:	10000134 	.word	0x10000134
 8102dd4:	10000104 	.word	0x10000104
 8102dd8:	10000100 	.word	0x10000100
 8102ddc:	10000168 	.word	0x10000168

08102de0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8102de0:	b580      	push	{r7, lr}
 8102de2:	b08a      	sub	sp, #40	@ 0x28
 8102de4:	af00      	add	r7, sp, #0
 8102de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8102de8:	2300      	movs	r3, #0
 8102dea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8102dec:	f7ff fa4a 	bl	8102284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8102df0:	4b5c      	ldr	r3, [pc, #368]	@ (8102f64 <pvPortMalloc+0x184>)
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	2b00      	cmp	r3, #0
 8102df6:	d101      	bne.n	8102dfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8102df8:	f000 f924 	bl	8103044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8102dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8102f68 <pvPortMalloc+0x188>)
 8102dfe:	681a      	ldr	r2, [r3, #0]
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	4013      	ands	r3, r2
 8102e04:	2b00      	cmp	r3, #0
 8102e06:	f040 8095 	bne.w	8102f34 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	2b00      	cmp	r3, #0
 8102e0e:	d01e      	beq.n	8102e4e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8102e10:	2208      	movs	r2, #8
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	4413      	add	r3, r2
 8102e16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	f003 0307 	and.w	r3, r3, #7
 8102e1e:	2b00      	cmp	r3, #0
 8102e20:	d015      	beq.n	8102e4e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	f023 0307 	bic.w	r3, r3, #7
 8102e28:	3308      	adds	r3, #8
 8102e2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	f003 0307 	and.w	r3, r3, #7
 8102e32:	2b00      	cmp	r3, #0
 8102e34:	d00b      	beq.n	8102e4e <pvPortMalloc+0x6e>
	__asm volatile
 8102e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102e3a:	f383 8811 	msr	BASEPRI, r3
 8102e3e:	f3bf 8f6f 	isb	sy
 8102e42:	f3bf 8f4f 	dsb	sy
 8102e46:	617b      	str	r3, [r7, #20]
}
 8102e48:	bf00      	nop
 8102e4a:	bf00      	nop
 8102e4c:	e7fd      	b.n	8102e4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	d06f      	beq.n	8102f34 <pvPortMalloc+0x154>
 8102e54:	4b45      	ldr	r3, [pc, #276]	@ (8102f6c <pvPortMalloc+0x18c>)
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	687a      	ldr	r2, [r7, #4]
 8102e5a:	429a      	cmp	r2, r3
 8102e5c:	d86a      	bhi.n	8102f34 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8102e5e:	4b44      	ldr	r3, [pc, #272]	@ (8102f70 <pvPortMalloc+0x190>)
 8102e60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8102e62:	4b43      	ldr	r3, [pc, #268]	@ (8102f70 <pvPortMalloc+0x190>)
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102e68:	e004      	b.n	8102e74 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8102e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8102e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e76:	685b      	ldr	r3, [r3, #4]
 8102e78:	687a      	ldr	r2, [r7, #4]
 8102e7a:	429a      	cmp	r2, r3
 8102e7c:	d903      	bls.n	8102e86 <pvPortMalloc+0xa6>
 8102e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	2b00      	cmp	r3, #0
 8102e84:	d1f1      	bne.n	8102e6a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8102e86:	4b37      	ldr	r3, [pc, #220]	@ (8102f64 <pvPortMalloc+0x184>)
 8102e88:	681b      	ldr	r3, [r3, #0]
 8102e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102e8c:	429a      	cmp	r2, r3
 8102e8e:	d051      	beq.n	8102f34 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8102e90:	6a3b      	ldr	r3, [r7, #32]
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	2208      	movs	r2, #8
 8102e96:	4413      	add	r3, r2
 8102e98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8102e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e9c:	681a      	ldr	r2, [r3, #0]
 8102e9e:	6a3b      	ldr	r3, [r7, #32]
 8102ea0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8102ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102ea4:	685a      	ldr	r2, [r3, #4]
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	1ad2      	subs	r2, r2, r3
 8102eaa:	2308      	movs	r3, #8
 8102eac:	005b      	lsls	r3, r3, #1
 8102eae:	429a      	cmp	r2, r3
 8102eb0:	d920      	bls.n	8102ef4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8102eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	4413      	add	r3, r2
 8102eb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8102eba:	69bb      	ldr	r3, [r7, #24]
 8102ebc:	f003 0307 	and.w	r3, r3, #7
 8102ec0:	2b00      	cmp	r3, #0
 8102ec2:	d00b      	beq.n	8102edc <pvPortMalloc+0xfc>
	__asm volatile
 8102ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102ec8:	f383 8811 	msr	BASEPRI, r3
 8102ecc:	f3bf 8f6f 	isb	sy
 8102ed0:	f3bf 8f4f 	dsb	sy
 8102ed4:	613b      	str	r3, [r7, #16]
}
 8102ed6:	bf00      	nop
 8102ed8:	bf00      	nop
 8102eda:	e7fd      	b.n	8102ed8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8102edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102ede:	685a      	ldr	r2, [r3, #4]
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	1ad2      	subs	r2, r2, r3
 8102ee4:	69bb      	ldr	r3, [r7, #24]
 8102ee6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8102ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102eea:	687a      	ldr	r2, [r7, #4]
 8102eec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8102eee:	69b8      	ldr	r0, [r7, #24]
 8102ef0:	f000 f90a 	bl	8103108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8102ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8102f6c <pvPortMalloc+0x18c>)
 8102ef6:	681a      	ldr	r2, [r3, #0]
 8102ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102efa:	685b      	ldr	r3, [r3, #4]
 8102efc:	1ad3      	subs	r3, r2, r3
 8102efe:	4a1b      	ldr	r2, [pc, #108]	@ (8102f6c <pvPortMalloc+0x18c>)
 8102f00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8102f02:	4b1a      	ldr	r3, [pc, #104]	@ (8102f6c <pvPortMalloc+0x18c>)
 8102f04:	681a      	ldr	r2, [r3, #0]
 8102f06:	4b1b      	ldr	r3, [pc, #108]	@ (8102f74 <pvPortMalloc+0x194>)
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	429a      	cmp	r2, r3
 8102f0c:	d203      	bcs.n	8102f16 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8102f0e:	4b17      	ldr	r3, [pc, #92]	@ (8102f6c <pvPortMalloc+0x18c>)
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	4a18      	ldr	r2, [pc, #96]	@ (8102f74 <pvPortMalloc+0x194>)
 8102f14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8102f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102f18:	685a      	ldr	r2, [r3, #4]
 8102f1a:	4b13      	ldr	r3, [pc, #76]	@ (8102f68 <pvPortMalloc+0x188>)
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	431a      	orrs	r2, r3
 8102f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102f22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8102f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102f26:	2200      	movs	r2, #0
 8102f28:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8102f2a:	4b13      	ldr	r3, [pc, #76]	@ (8102f78 <pvPortMalloc+0x198>)
 8102f2c:	681b      	ldr	r3, [r3, #0]
 8102f2e:	3301      	adds	r3, #1
 8102f30:	4a11      	ldr	r2, [pc, #68]	@ (8102f78 <pvPortMalloc+0x198>)
 8102f32:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8102f34:	f7ff f9b4 	bl	81022a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8102f38:	69fb      	ldr	r3, [r7, #28]
 8102f3a:	f003 0307 	and.w	r3, r3, #7
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d00b      	beq.n	8102f5a <pvPortMalloc+0x17a>
	__asm volatile
 8102f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102f46:	f383 8811 	msr	BASEPRI, r3
 8102f4a:	f3bf 8f6f 	isb	sy
 8102f4e:	f3bf 8f4f 	dsb	sy
 8102f52:	60fb      	str	r3, [r7, #12]
}
 8102f54:	bf00      	nop
 8102f56:	bf00      	nop
 8102f58:	e7fd      	b.n	8102f56 <pvPortMalloc+0x176>
	return pvReturn;
 8102f5a:	69fb      	ldr	r3, [r7, #28]
}
 8102f5c:	4618      	mov	r0, r3
 8102f5e:	3728      	adds	r7, #40	@ 0x28
 8102f60:	46bd      	mov	sp, r7
 8102f62:	bd80      	pop	{r7, pc}
 8102f64:	1000097c 	.word	0x1000097c
 8102f68:	10000990 	.word	0x10000990
 8102f6c:	10000980 	.word	0x10000980
 8102f70:	10000974 	.word	0x10000974
 8102f74:	10000984 	.word	0x10000984
 8102f78:	10000988 	.word	0x10000988

08102f7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8102f7c:	b580      	push	{r7, lr}
 8102f7e:	b086      	sub	sp, #24
 8102f80:	af00      	add	r7, sp, #0
 8102f82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	2b00      	cmp	r3, #0
 8102f8c:	d04f      	beq.n	810302e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8102f8e:	2308      	movs	r3, #8
 8102f90:	425b      	negs	r3, r3
 8102f92:	697a      	ldr	r2, [r7, #20]
 8102f94:	4413      	add	r3, r2
 8102f96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8102f98:	697b      	ldr	r3, [r7, #20]
 8102f9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8102f9c:	693b      	ldr	r3, [r7, #16]
 8102f9e:	685a      	ldr	r2, [r3, #4]
 8102fa0:	4b25      	ldr	r3, [pc, #148]	@ (8103038 <vPortFree+0xbc>)
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	4013      	ands	r3, r2
 8102fa6:	2b00      	cmp	r3, #0
 8102fa8:	d10b      	bne.n	8102fc2 <vPortFree+0x46>
	__asm volatile
 8102faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102fae:	f383 8811 	msr	BASEPRI, r3
 8102fb2:	f3bf 8f6f 	isb	sy
 8102fb6:	f3bf 8f4f 	dsb	sy
 8102fba:	60fb      	str	r3, [r7, #12]
}
 8102fbc:	bf00      	nop
 8102fbe:	bf00      	nop
 8102fc0:	e7fd      	b.n	8102fbe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8102fc2:	693b      	ldr	r3, [r7, #16]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	2b00      	cmp	r3, #0
 8102fc8:	d00b      	beq.n	8102fe2 <vPortFree+0x66>
	__asm volatile
 8102fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102fce:	f383 8811 	msr	BASEPRI, r3
 8102fd2:	f3bf 8f6f 	isb	sy
 8102fd6:	f3bf 8f4f 	dsb	sy
 8102fda:	60bb      	str	r3, [r7, #8]
}
 8102fdc:	bf00      	nop
 8102fde:	bf00      	nop
 8102fe0:	e7fd      	b.n	8102fde <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8102fe2:	693b      	ldr	r3, [r7, #16]
 8102fe4:	685a      	ldr	r2, [r3, #4]
 8102fe6:	4b14      	ldr	r3, [pc, #80]	@ (8103038 <vPortFree+0xbc>)
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4013      	ands	r3, r2
 8102fec:	2b00      	cmp	r3, #0
 8102fee:	d01e      	beq.n	810302e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8102ff0:	693b      	ldr	r3, [r7, #16]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	2b00      	cmp	r3, #0
 8102ff6:	d11a      	bne.n	810302e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8102ff8:	693b      	ldr	r3, [r7, #16]
 8102ffa:	685a      	ldr	r2, [r3, #4]
 8102ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8103038 <vPortFree+0xbc>)
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	43db      	mvns	r3, r3
 8103002:	401a      	ands	r2, r3
 8103004:	693b      	ldr	r3, [r7, #16]
 8103006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8103008:	f7ff f93c 	bl	8102284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810300c:	693b      	ldr	r3, [r7, #16]
 810300e:	685a      	ldr	r2, [r3, #4]
 8103010:	4b0a      	ldr	r3, [pc, #40]	@ (810303c <vPortFree+0xc0>)
 8103012:	681b      	ldr	r3, [r3, #0]
 8103014:	4413      	add	r3, r2
 8103016:	4a09      	ldr	r2, [pc, #36]	@ (810303c <vPortFree+0xc0>)
 8103018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810301a:	6938      	ldr	r0, [r7, #16]
 810301c:	f000 f874 	bl	8103108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8103020:	4b07      	ldr	r3, [pc, #28]	@ (8103040 <vPortFree+0xc4>)
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	3301      	adds	r3, #1
 8103026:	4a06      	ldr	r2, [pc, #24]	@ (8103040 <vPortFree+0xc4>)
 8103028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810302a:	f7ff f939 	bl	81022a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810302e:	bf00      	nop
 8103030:	3718      	adds	r7, #24
 8103032:	46bd      	mov	sp, r7
 8103034:	bd80      	pop	{r7, pc}
 8103036:	bf00      	nop
 8103038:	10000990 	.word	0x10000990
 810303c:	10000980 	.word	0x10000980
 8103040:	1000098c 	.word	0x1000098c

08103044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8103044:	b480      	push	{r7}
 8103046:	b085      	sub	sp, #20
 8103048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810304a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810304e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8103050:	4b27      	ldr	r3, [pc, #156]	@ (81030f0 <prvHeapInit+0xac>)
 8103052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8103054:	68fb      	ldr	r3, [r7, #12]
 8103056:	f003 0307 	and.w	r3, r3, #7
 810305a:	2b00      	cmp	r3, #0
 810305c:	d00c      	beq.n	8103078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810305e:	68fb      	ldr	r3, [r7, #12]
 8103060:	3307      	adds	r3, #7
 8103062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8103064:	68fb      	ldr	r3, [r7, #12]
 8103066:	f023 0307 	bic.w	r3, r3, #7
 810306a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810306c:	68ba      	ldr	r2, [r7, #8]
 810306e:	68fb      	ldr	r3, [r7, #12]
 8103070:	1ad3      	subs	r3, r2, r3
 8103072:	4a1f      	ldr	r2, [pc, #124]	@ (81030f0 <prvHeapInit+0xac>)
 8103074:	4413      	add	r3, r2
 8103076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8103078:	68fb      	ldr	r3, [r7, #12]
 810307a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810307c:	4a1d      	ldr	r2, [pc, #116]	@ (81030f4 <prvHeapInit+0xb0>)
 810307e:	687b      	ldr	r3, [r7, #4]
 8103080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8103082:	4b1c      	ldr	r3, [pc, #112]	@ (81030f4 <prvHeapInit+0xb0>)
 8103084:	2200      	movs	r2, #0
 8103086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	68ba      	ldr	r2, [r7, #8]
 810308c:	4413      	add	r3, r2
 810308e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8103090:	2208      	movs	r2, #8
 8103092:	68fb      	ldr	r3, [r7, #12]
 8103094:	1a9b      	subs	r3, r3, r2
 8103096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8103098:	68fb      	ldr	r3, [r7, #12]
 810309a:	f023 0307 	bic.w	r3, r3, #7
 810309e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81030a0:	68fb      	ldr	r3, [r7, #12]
 81030a2:	4a15      	ldr	r2, [pc, #84]	@ (81030f8 <prvHeapInit+0xb4>)
 81030a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81030a6:	4b14      	ldr	r3, [pc, #80]	@ (81030f8 <prvHeapInit+0xb4>)
 81030a8:	681b      	ldr	r3, [r3, #0]
 81030aa:	2200      	movs	r2, #0
 81030ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81030ae:	4b12      	ldr	r3, [pc, #72]	@ (81030f8 <prvHeapInit+0xb4>)
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	2200      	movs	r2, #0
 81030b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81030ba:	683b      	ldr	r3, [r7, #0]
 81030bc:	68fa      	ldr	r2, [r7, #12]
 81030be:	1ad2      	subs	r2, r2, r3
 81030c0:	683b      	ldr	r3, [r7, #0]
 81030c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81030c4:	4b0c      	ldr	r3, [pc, #48]	@ (81030f8 <prvHeapInit+0xb4>)
 81030c6:	681a      	ldr	r2, [r3, #0]
 81030c8:	683b      	ldr	r3, [r7, #0]
 81030ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81030cc:	683b      	ldr	r3, [r7, #0]
 81030ce:	685b      	ldr	r3, [r3, #4]
 81030d0:	4a0a      	ldr	r2, [pc, #40]	@ (81030fc <prvHeapInit+0xb8>)
 81030d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81030d4:	683b      	ldr	r3, [r7, #0]
 81030d6:	685b      	ldr	r3, [r3, #4]
 81030d8:	4a09      	ldr	r2, [pc, #36]	@ (8103100 <prvHeapInit+0xbc>)
 81030da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 81030dc:	4b09      	ldr	r3, [pc, #36]	@ (8103104 <prvHeapInit+0xc0>)
 81030de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81030e2:	601a      	str	r2, [r3, #0]
}
 81030e4:	bf00      	nop
 81030e6:	3714      	adds	r7, #20
 81030e8:	46bd      	mov	sp, r7
 81030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030ee:	4770      	bx	lr
 81030f0:	10000174 	.word	0x10000174
 81030f4:	10000974 	.word	0x10000974
 81030f8:	1000097c 	.word	0x1000097c
 81030fc:	10000984 	.word	0x10000984
 8103100:	10000980 	.word	0x10000980
 8103104:	10000990 	.word	0x10000990

08103108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8103108:	b480      	push	{r7}
 810310a:	b085      	sub	sp, #20
 810310c:	af00      	add	r7, sp, #0
 810310e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8103110:	4b28      	ldr	r3, [pc, #160]	@ (81031b4 <prvInsertBlockIntoFreeList+0xac>)
 8103112:	60fb      	str	r3, [r7, #12]
 8103114:	e002      	b.n	810311c <prvInsertBlockIntoFreeList+0x14>
 8103116:	68fb      	ldr	r3, [r7, #12]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	60fb      	str	r3, [r7, #12]
 810311c:	68fb      	ldr	r3, [r7, #12]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	687a      	ldr	r2, [r7, #4]
 8103122:	429a      	cmp	r2, r3
 8103124:	d8f7      	bhi.n	8103116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8103126:	68fb      	ldr	r3, [r7, #12]
 8103128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810312a:	68fb      	ldr	r3, [r7, #12]
 810312c:	685b      	ldr	r3, [r3, #4]
 810312e:	68ba      	ldr	r2, [r7, #8]
 8103130:	4413      	add	r3, r2
 8103132:	687a      	ldr	r2, [r7, #4]
 8103134:	429a      	cmp	r2, r3
 8103136:	d108      	bne.n	810314a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8103138:	68fb      	ldr	r3, [r7, #12]
 810313a:	685a      	ldr	r2, [r3, #4]
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	685b      	ldr	r3, [r3, #4]
 8103140:	441a      	add	r2, r3
 8103142:	68fb      	ldr	r3, [r7, #12]
 8103144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8103146:	68fb      	ldr	r3, [r7, #12]
 8103148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	685b      	ldr	r3, [r3, #4]
 8103152:	68ba      	ldr	r2, [r7, #8]
 8103154:	441a      	add	r2, r3
 8103156:	68fb      	ldr	r3, [r7, #12]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	429a      	cmp	r2, r3
 810315c:	d118      	bne.n	8103190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810315e:	68fb      	ldr	r3, [r7, #12]
 8103160:	681a      	ldr	r2, [r3, #0]
 8103162:	4b15      	ldr	r3, [pc, #84]	@ (81031b8 <prvInsertBlockIntoFreeList+0xb0>)
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	429a      	cmp	r2, r3
 8103168:	d00d      	beq.n	8103186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	685a      	ldr	r2, [r3, #4]
 810316e:	68fb      	ldr	r3, [r7, #12]
 8103170:	681b      	ldr	r3, [r3, #0]
 8103172:	685b      	ldr	r3, [r3, #4]
 8103174:	441a      	add	r2, r3
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810317a:	68fb      	ldr	r3, [r7, #12]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	681a      	ldr	r2, [r3, #0]
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	601a      	str	r2, [r3, #0]
 8103184:	e008      	b.n	8103198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8103186:	4b0c      	ldr	r3, [pc, #48]	@ (81031b8 <prvInsertBlockIntoFreeList+0xb0>)
 8103188:	681a      	ldr	r2, [r3, #0]
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	601a      	str	r2, [r3, #0]
 810318e:	e003      	b.n	8103198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8103190:	68fb      	ldr	r3, [r7, #12]
 8103192:	681a      	ldr	r2, [r3, #0]
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8103198:	68fa      	ldr	r2, [r7, #12]
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	429a      	cmp	r2, r3
 810319e:	d002      	beq.n	81031a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81031a0:	68fb      	ldr	r3, [r7, #12]
 81031a2:	687a      	ldr	r2, [r7, #4]
 81031a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81031a6:	bf00      	nop
 81031a8:	3714      	adds	r7, #20
 81031aa:	46bd      	mov	sp, r7
 81031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031b0:	4770      	bx	lr
 81031b2:	bf00      	nop
 81031b4:	10000974 	.word	0x10000974
 81031b8:	1000097c 	.word	0x1000097c

081031bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81031bc:	b480      	push	{r7}
 81031be:	b085      	sub	sp, #20
 81031c0:	af00      	add	r7, sp, #0
 81031c2:	60f8      	str	r0, [r7, #12]
 81031c4:	60b9      	str	r1, [r7, #8]
 81031c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81031c8:	68fb      	ldr	r3, [r7, #12]
 81031ca:	3b04      	subs	r3, #4
 81031cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81031ce:	68fb      	ldr	r3, [r7, #12]
 81031d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81031d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81031d6:	68fb      	ldr	r3, [r7, #12]
 81031d8:	3b04      	subs	r3, #4
 81031da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81031dc:	68bb      	ldr	r3, [r7, #8]
 81031de:	f023 0201 	bic.w	r2, r3, #1
 81031e2:	68fb      	ldr	r3, [r7, #12]
 81031e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81031e6:	68fb      	ldr	r3, [r7, #12]
 81031e8:	3b04      	subs	r3, #4
 81031ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81031ec:	4a0c      	ldr	r2, [pc, #48]	@ (8103220 <pxPortInitialiseStack+0x64>)
 81031ee:	68fb      	ldr	r3, [r7, #12]
 81031f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81031f2:	68fb      	ldr	r3, [r7, #12]
 81031f4:	3b14      	subs	r3, #20
 81031f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81031f8:	687a      	ldr	r2, [r7, #4]
 81031fa:	68fb      	ldr	r3, [r7, #12]
 81031fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81031fe:	68fb      	ldr	r3, [r7, #12]
 8103200:	3b04      	subs	r3, #4
 8103202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8103204:	68fb      	ldr	r3, [r7, #12]
 8103206:	f06f 0202 	mvn.w	r2, #2
 810320a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810320c:	68fb      	ldr	r3, [r7, #12]
 810320e:	3b20      	subs	r3, #32
 8103210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8103212:	68fb      	ldr	r3, [r7, #12]
}
 8103214:	4618      	mov	r0, r3
 8103216:	3714      	adds	r7, #20
 8103218:	46bd      	mov	sp, r7
 810321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810321e:	4770      	bx	lr
 8103220:	08103225 	.word	0x08103225

08103224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8103224:	b480      	push	{r7}
 8103226:	b085      	sub	sp, #20
 8103228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810322a:	2300      	movs	r3, #0
 810322c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810322e:	4b13      	ldr	r3, [pc, #76]	@ (810327c <prvTaskExitError+0x58>)
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103236:	d00b      	beq.n	8103250 <prvTaskExitError+0x2c>
	__asm volatile
 8103238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810323c:	f383 8811 	msr	BASEPRI, r3
 8103240:	f3bf 8f6f 	isb	sy
 8103244:	f3bf 8f4f 	dsb	sy
 8103248:	60fb      	str	r3, [r7, #12]
}
 810324a:	bf00      	nop
 810324c:	bf00      	nop
 810324e:	e7fd      	b.n	810324c <prvTaskExitError+0x28>
	__asm volatile
 8103250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103254:	f383 8811 	msr	BASEPRI, r3
 8103258:	f3bf 8f6f 	isb	sy
 810325c:	f3bf 8f4f 	dsb	sy
 8103260:	60bb      	str	r3, [r7, #8]
}
 8103262:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8103264:	bf00      	nop
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	2b00      	cmp	r3, #0
 810326a:	d0fc      	beq.n	8103266 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810326c:	bf00      	nop
 810326e:	bf00      	nop
 8103270:	3714      	adds	r7, #20
 8103272:	46bd      	mov	sp, r7
 8103274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103278:	4770      	bx	lr
 810327a:	bf00      	nop
 810327c:	10000020 	.word	0x10000020

08103280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8103280:	4b07      	ldr	r3, [pc, #28]	@ (81032a0 <pxCurrentTCBConst2>)
 8103282:	6819      	ldr	r1, [r3, #0]
 8103284:	6808      	ldr	r0, [r1, #0]
 8103286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810328a:	f380 8809 	msr	PSP, r0
 810328e:	f3bf 8f6f 	isb	sy
 8103292:	f04f 0000 	mov.w	r0, #0
 8103296:	f380 8811 	msr	BASEPRI, r0
 810329a:	4770      	bx	lr
 810329c:	f3af 8000 	nop.w

081032a0 <pxCurrentTCBConst2>:
 81032a0:	10000048 	.word	0x10000048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81032a4:	bf00      	nop
 81032a6:	bf00      	nop

081032a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81032a8:	4808      	ldr	r0, [pc, #32]	@ (81032cc <prvPortStartFirstTask+0x24>)
 81032aa:	6800      	ldr	r0, [r0, #0]
 81032ac:	6800      	ldr	r0, [r0, #0]
 81032ae:	f380 8808 	msr	MSP, r0
 81032b2:	f04f 0000 	mov.w	r0, #0
 81032b6:	f380 8814 	msr	CONTROL, r0
 81032ba:	b662      	cpsie	i
 81032bc:	b661      	cpsie	f
 81032be:	f3bf 8f4f 	dsb	sy
 81032c2:	f3bf 8f6f 	isb	sy
 81032c6:	df00      	svc	0
 81032c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81032ca:	bf00      	nop
 81032cc:	e000ed08 	.word	0xe000ed08

081032d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81032d0:	b580      	push	{r7, lr}
 81032d2:	b084      	sub	sp, #16
 81032d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81032d6:	4b36      	ldr	r3, [pc, #216]	@ (81033b0 <xPortStartScheduler+0xe0>)
 81032d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81032da:	68fb      	ldr	r3, [r7, #12]
 81032dc:	781b      	ldrb	r3, [r3, #0]
 81032de:	b2db      	uxtb	r3, r3
 81032e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81032e2:	68fb      	ldr	r3, [r7, #12]
 81032e4:	22ff      	movs	r2, #255	@ 0xff
 81032e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	781b      	ldrb	r3, [r3, #0]
 81032ec:	b2db      	uxtb	r3, r3
 81032ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81032f0:	78fb      	ldrb	r3, [r7, #3]
 81032f2:	b2db      	uxtb	r3, r3
 81032f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 81032f8:	b2da      	uxtb	r2, r3
 81032fa:	4b2e      	ldr	r3, [pc, #184]	@ (81033b4 <xPortStartScheduler+0xe4>)
 81032fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81032fe:	4b2e      	ldr	r3, [pc, #184]	@ (81033b8 <xPortStartScheduler+0xe8>)
 8103300:	2207      	movs	r2, #7
 8103302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8103304:	e009      	b.n	810331a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8103306:	4b2c      	ldr	r3, [pc, #176]	@ (81033b8 <xPortStartScheduler+0xe8>)
 8103308:	681b      	ldr	r3, [r3, #0]
 810330a:	3b01      	subs	r3, #1
 810330c:	4a2a      	ldr	r2, [pc, #168]	@ (81033b8 <xPortStartScheduler+0xe8>)
 810330e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8103310:	78fb      	ldrb	r3, [r7, #3]
 8103312:	b2db      	uxtb	r3, r3
 8103314:	005b      	lsls	r3, r3, #1
 8103316:	b2db      	uxtb	r3, r3
 8103318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810331a:	78fb      	ldrb	r3, [r7, #3]
 810331c:	b2db      	uxtb	r3, r3
 810331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103322:	2b80      	cmp	r3, #128	@ 0x80
 8103324:	d0ef      	beq.n	8103306 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8103326:	4b24      	ldr	r3, [pc, #144]	@ (81033b8 <xPortStartScheduler+0xe8>)
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	f1c3 0307 	rsb	r3, r3, #7
 810332e:	2b04      	cmp	r3, #4
 8103330:	d00b      	beq.n	810334a <xPortStartScheduler+0x7a>
	__asm volatile
 8103332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103336:	f383 8811 	msr	BASEPRI, r3
 810333a:	f3bf 8f6f 	isb	sy
 810333e:	f3bf 8f4f 	dsb	sy
 8103342:	60bb      	str	r3, [r7, #8]
}
 8103344:	bf00      	nop
 8103346:	bf00      	nop
 8103348:	e7fd      	b.n	8103346 <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810334a:	4b1b      	ldr	r3, [pc, #108]	@ (81033b8 <xPortStartScheduler+0xe8>)
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	021b      	lsls	r3, r3, #8
 8103350:	4a19      	ldr	r2, [pc, #100]	@ (81033b8 <xPortStartScheduler+0xe8>)
 8103352:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8103354:	4b18      	ldr	r3, [pc, #96]	@ (81033b8 <xPortStartScheduler+0xe8>)
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810335c:	4a16      	ldr	r2, [pc, #88]	@ (81033b8 <xPortStartScheduler+0xe8>)
 810335e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	b2da      	uxtb	r2, r3
 8103364:	68fb      	ldr	r3, [r7, #12]
 8103366:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8103368:	4b14      	ldr	r3, [pc, #80]	@ (81033bc <xPortStartScheduler+0xec>)
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	4a13      	ldr	r2, [pc, #76]	@ (81033bc <xPortStartScheduler+0xec>)
 810336e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8103372:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8103374:	4b11      	ldr	r3, [pc, #68]	@ (81033bc <xPortStartScheduler+0xec>)
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	4a10      	ldr	r2, [pc, #64]	@ (81033bc <xPortStartScheduler+0xec>)
 810337a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810337e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8103380:	f000 f8b2 	bl	81034e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8103384:	4b0e      	ldr	r3, [pc, #56]	@ (81033c0 <xPortStartScheduler+0xf0>)
 8103386:	2200      	movs	r2, #0
 8103388:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810338a:	f000 f8d1 	bl	8103530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810338e:	4b0d      	ldr	r3, [pc, #52]	@ (81033c4 <xPortStartScheduler+0xf4>)
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a0c      	ldr	r2, [pc, #48]	@ (81033c4 <xPortStartScheduler+0xf4>)
 8103394:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8103398:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810339a:	f7ff ff85 	bl	81032a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810339e:	f7ff f8d7 	bl	8102550 <vTaskSwitchContext>
	prvTaskExitError();
 81033a2:	f7ff ff3f 	bl	8103224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81033a6:	2300      	movs	r3, #0
}
 81033a8:	4618      	mov	r0, r3
 81033aa:	3710      	adds	r7, #16
 81033ac:	46bd      	mov	sp, r7
 81033ae:	bd80      	pop	{r7, pc}
 81033b0:	e000e400 	.word	0xe000e400
 81033b4:	10000994 	.word	0x10000994
 81033b8:	10000998 	.word	0x10000998
 81033bc:	e000ed20 	.word	0xe000ed20
 81033c0:	10000020 	.word	0x10000020
 81033c4:	e000ef34 	.word	0xe000ef34

081033c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81033c8:	b480      	push	{r7}
 81033ca:	b083      	sub	sp, #12
 81033cc:	af00      	add	r7, sp, #0
	__asm volatile
 81033ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81033d2:	f383 8811 	msr	BASEPRI, r3
 81033d6:	f3bf 8f6f 	isb	sy
 81033da:	f3bf 8f4f 	dsb	sy
 81033de:	607b      	str	r3, [r7, #4]
}
 81033e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81033e2:	4b10      	ldr	r3, [pc, #64]	@ (8103424 <vPortEnterCritical+0x5c>)
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	3301      	adds	r3, #1
 81033e8:	4a0e      	ldr	r2, [pc, #56]	@ (8103424 <vPortEnterCritical+0x5c>)
 81033ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81033ec:	4b0d      	ldr	r3, [pc, #52]	@ (8103424 <vPortEnterCritical+0x5c>)
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	2b01      	cmp	r3, #1
 81033f2:	d110      	bne.n	8103416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 81033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8103428 <vPortEnterCritical+0x60>)
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	b2db      	uxtb	r3, r3
 81033fa:	2b00      	cmp	r3, #0
 81033fc:	d00b      	beq.n	8103416 <vPortEnterCritical+0x4e>
	__asm volatile
 81033fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103402:	f383 8811 	msr	BASEPRI, r3
 8103406:	f3bf 8f6f 	isb	sy
 810340a:	f3bf 8f4f 	dsb	sy
 810340e:	603b      	str	r3, [r7, #0]
}
 8103410:	bf00      	nop
 8103412:	bf00      	nop
 8103414:	e7fd      	b.n	8103412 <vPortEnterCritical+0x4a>
	}
}
 8103416:	bf00      	nop
 8103418:	370c      	adds	r7, #12
 810341a:	46bd      	mov	sp, r7
 810341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103420:	4770      	bx	lr
 8103422:	bf00      	nop
 8103424:	10000020 	.word	0x10000020
 8103428:	e000ed04 	.word	0xe000ed04

0810342c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810342c:	b480      	push	{r7}
 810342e:	b083      	sub	sp, #12
 8103430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8103432:	4b12      	ldr	r3, [pc, #72]	@ (810347c <vPortExitCritical+0x50>)
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	2b00      	cmp	r3, #0
 8103438:	d10b      	bne.n	8103452 <vPortExitCritical+0x26>
	__asm volatile
 810343a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810343e:	f383 8811 	msr	BASEPRI, r3
 8103442:	f3bf 8f6f 	isb	sy
 8103446:	f3bf 8f4f 	dsb	sy
 810344a:	607b      	str	r3, [r7, #4]
}
 810344c:	bf00      	nop
 810344e:	bf00      	nop
 8103450:	e7fd      	b.n	810344e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8103452:	4b0a      	ldr	r3, [pc, #40]	@ (810347c <vPortExitCritical+0x50>)
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	3b01      	subs	r3, #1
 8103458:	4a08      	ldr	r2, [pc, #32]	@ (810347c <vPortExitCritical+0x50>)
 810345a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810345c:	4b07      	ldr	r3, [pc, #28]	@ (810347c <vPortExitCritical+0x50>)
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	2b00      	cmp	r3, #0
 8103462:	d105      	bne.n	8103470 <vPortExitCritical+0x44>
 8103464:	2300      	movs	r3, #0
 8103466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8103468:	683b      	ldr	r3, [r7, #0]
 810346a:	f383 8811 	msr	BASEPRI, r3
}
 810346e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8103470:	bf00      	nop
 8103472:	370c      	adds	r7, #12
 8103474:	46bd      	mov	sp, r7
 8103476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810347a:	4770      	bx	lr
 810347c:	10000020 	.word	0x10000020

08103480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8103480:	f3ef 8009 	mrs	r0, PSP
 8103484:	f3bf 8f6f 	isb	sy
 8103488:	4b15      	ldr	r3, [pc, #84]	@ (81034e0 <pxCurrentTCBConst>)
 810348a:	681a      	ldr	r2, [r3, #0]
 810348c:	f01e 0f10 	tst.w	lr, #16
 8103490:	bf08      	it	eq
 8103492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8103496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810349a:	6010      	str	r0, [r2, #0]
 810349c:	e92d 0009 	stmdb	sp!, {r0, r3}
 81034a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81034a4:	b672      	cpsid	i
 81034a6:	f380 8811 	msr	BASEPRI, r0
 81034aa:	f3bf 8f4f 	dsb	sy
 81034ae:	f3bf 8f6f 	isb	sy
 81034b2:	b662      	cpsie	i
 81034b4:	f7ff f84c 	bl	8102550 <vTaskSwitchContext>
 81034b8:	f04f 0000 	mov.w	r0, #0
 81034bc:	f380 8811 	msr	BASEPRI, r0
 81034c0:	bc09      	pop	{r0, r3}
 81034c2:	6819      	ldr	r1, [r3, #0]
 81034c4:	6808      	ldr	r0, [r1, #0]
 81034c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81034ca:	f01e 0f10 	tst.w	lr, #16
 81034ce:	bf08      	it	eq
 81034d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81034d4:	f380 8809 	msr	PSP, r0
 81034d8:	f3bf 8f6f 	isb	sy
 81034dc:	4770      	bx	lr
 81034de:	bf00      	nop

081034e0 <pxCurrentTCBConst>:
 81034e0:	10000048 	.word	0x10000048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81034e4:	bf00      	nop
 81034e6:	bf00      	nop

081034e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81034e8:	b480      	push	{r7}
 81034ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81034ec:	4b0b      	ldr	r3, [pc, #44]	@ (810351c <vPortSetupTimerInterrupt+0x34>)
 81034ee:	2200      	movs	r2, #0
 81034f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81034f2:	4b0b      	ldr	r3, [pc, #44]	@ (8103520 <vPortSetupTimerInterrupt+0x38>)
 81034f4:	2200      	movs	r2, #0
 81034f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81034f8:	4b0a      	ldr	r3, [pc, #40]	@ (8103524 <vPortSetupTimerInterrupt+0x3c>)
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	4a0a      	ldr	r2, [pc, #40]	@ (8103528 <vPortSetupTimerInterrupt+0x40>)
 81034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8103502:	099b      	lsrs	r3, r3, #6
 8103504:	4a09      	ldr	r2, [pc, #36]	@ (810352c <vPortSetupTimerInterrupt+0x44>)
 8103506:	3b01      	subs	r3, #1
 8103508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810350a:	4b04      	ldr	r3, [pc, #16]	@ (810351c <vPortSetupTimerInterrupt+0x34>)
 810350c:	2207      	movs	r2, #7
 810350e:	601a      	str	r2, [r3, #0]
}
 8103510:	bf00      	nop
 8103512:	46bd      	mov	sp, r7
 8103514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103518:	4770      	bx	lr
 810351a:	bf00      	nop
 810351c:	e000e010 	.word	0xe000e010
 8103520:	e000e018 	.word	0xe000e018
 8103524:	10000014 	.word	0x10000014
 8103528:	10624dd3 	.word	0x10624dd3
 810352c:	e000e014 	.word	0xe000e014

08103530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8103530:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8103540 <vPortEnableVFP+0x10>
 8103534:	6801      	ldr	r1, [r0, #0]
 8103536:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810353a:	6001      	str	r1, [r0, #0]
 810353c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810353e:	bf00      	nop
 8103540:	e000ed88 	.word	0xe000ed88

08103544 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8103544:	b480      	push	{r7}
 8103546:	b085      	sub	sp, #20
 8103548:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810354a:	f3ef 8305 	mrs	r3, IPSR
 810354e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8103550:	68fb      	ldr	r3, [r7, #12]
 8103552:	2b0f      	cmp	r3, #15
 8103554:	d915      	bls.n	8103582 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8103556:	4a18      	ldr	r2, [pc, #96]	@ (81035b8 <vPortValidateInterruptPriority+0x74>)
 8103558:	68fb      	ldr	r3, [r7, #12]
 810355a:	4413      	add	r3, r2
 810355c:	781b      	ldrb	r3, [r3, #0]
 810355e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8103560:	4b16      	ldr	r3, [pc, #88]	@ (81035bc <vPortValidateInterruptPriority+0x78>)
 8103562:	781b      	ldrb	r3, [r3, #0]
 8103564:	7afa      	ldrb	r2, [r7, #11]
 8103566:	429a      	cmp	r2, r3
 8103568:	d20b      	bcs.n	8103582 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810356a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810356e:	f383 8811 	msr	BASEPRI, r3
 8103572:	f3bf 8f6f 	isb	sy
 8103576:	f3bf 8f4f 	dsb	sy
 810357a:	607b      	str	r3, [r7, #4]
}
 810357c:	bf00      	nop
 810357e:	bf00      	nop
 8103580:	e7fd      	b.n	810357e <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8103582:	4b0f      	ldr	r3, [pc, #60]	@ (81035c0 <vPortValidateInterruptPriority+0x7c>)
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810358a:	4b0e      	ldr	r3, [pc, #56]	@ (81035c4 <vPortValidateInterruptPriority+0x80>)
 810358c:	681b      	ldr	r3, [r3, #0]
 810358e:	429a      	cmp	r2, r3
 8103590:	d90b      	bls.n	81035aa <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8103592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103596:	f383 8811 	msr	BASEPRI, r3
 810359a:	f3bf 8f6f 	isb	sy
 810359e:	f3bf 8f4f 	dsb	sy
 81035a2:	603b      	str	r3, [r7, #0]
}
 81035a4:	bf00      	nop
 81035a6:	bf00      	nop
 81035a8:	e7fd      	b.n	81035a6 <vPortValidateInterruptPriority+0x62>
	}
 81035aa:	bf00      	nop
 81035ac:	3714      	adds	r7, #20
 81035ae:	46bd      	mov	sp, r7
 81035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035b4:	4770      	bx	lr
 81035b6:	bf00      	nop
 81035b8:	e000e3f0 	.word	0xe000e3f0
 81035bc:	10000994 	.word	0x10000994
 81035c0:	e000ed0c 	.word	0xe000ed0c
 81035c4:	10000998 	.word	0x10000998

081035c8 <memset>:
 81035c8:	4402      	add	r2, r0
 81035ca:	4603      	mov	r3, r0
 81035cc:	4293      	cmp	r3, r2
 81035ce:	d100      	bne.n	81035d2 <memset+0xa>
 81035d0:	4770      	bx	lr
 81035d2:	f803 1b01 	strb.w	r1, [r3], #1
 81035d6:	e7f9      	b.n	81035cc <memset+0x4>

081035d8 <__libc_init_array>:
 81035d8:	b570      	push	{r4, r5, r6, lr}
 81035da:	4d0d      	ldr	r5, [pc, #52]	@ (8103610 <__libc_init_array+0x38>)
 81035dc:	4c0d      	ldr	r4, [pc, #52]	@ (8103614 <__libc_init_array+0x3c>)
 81035de:	1b64      	subs	r4, r4, r5
 81035e0:	10a4      	asrs	r4, r4, #2
 81035e2:	2600      	movs	r6, #0
 81035e4:	42a6      	cmp	r6, r4
 81035e6:	d109      	bne.n	81035fc <__libc_init_array+0x24>
 81035e8:	4d0b      	ldr	r5, [pc, #44]	@ (8103618 <__libc_init_array+0x40>)
 81035ea:	4c0c      	ldr	r4, [pc, #48]	@ (810361c <__libc_init_array+0x44>)
 81035ec:	f000 f826 	bl	810363c <_init>
 81035f0:	1b64      	subs	r4, r4, r5
 81035f2:	10a4      	asrs	r4, r4, #2
 81035f4:	2600      	movs	r6, #0
 81035f6:	42a6      	cmp	r6, r4
 81035f8:	d105      	bne.n	8103606 <__libc_init_array+0x2e>
 81035fa:	bd70      	pop	{r4, r5, r6, pc}
 81035fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8103600:	4798      	blx	r3
 8103602:	3601      	adds	r6, #1
 8103604:	e7ee      	b.n	81035e4 <__libc_init_array+0xc>
 8103606:	f855 3b04 	ldr.w	r3, [r5], #4
 810360a:	4798      	blx	r3
 810360c:	3601      	adds	r6, #1
 810360e:	e7f2      	b.n	81035f6 <__libc_init_array+0x1e>
 8103610:	081036a0 	.word	0x081036a0
 8103614:	081036a0 	.word	0x081036a0
 8103618:	081036a0 	.word	0x081036a0
 810361c:	081036a4 	.word	0x081036a4

08103620 <memcpy>:
 8103620:	440a      	add	r2, r1
 8103622:	4291      	cmp	r1, r2
 8103624:	f100 33ff 	add.w	r3, r0, #4294967295
 8103628:	d100      	bne.n	810362c <memcpy+0xc>
 810362a:	4770      	bx	lr
 810362c:	b510      	push	{r4, lr}
 810362e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8103632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8103636:	4291      	cmp	r1, r2
 8103638:	d1f9      	bne.n	810362e <memcpy+0xe>
 810363a:	bd10      	pop	{r4, pc}

0810363c <_init>:
 810363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810363e:	bf00      	nop
 8103640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103642:	bc08      	pop	{r3}
 8103644:	469e      	mov	lr, r3
 8103646:	4770      	bx	lr

08103648 <_fini>:
 8103648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810364a:	bf00      	nop
 810364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810364e:	bc08      	pop	{r3}
 8103650:	469e      	mov	lr, r3
 8103652:	4770      	bx	lr
